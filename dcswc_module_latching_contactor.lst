CCS PCH C Compiler, Version 5.090, 49113               05-Feb-22 16:58

               Filename:   C:\Users\James Jarvis\Desktop\planetPrecision\dcswc_module_latching_contactor\dcswc_module_latching_contactor.lst

               ROM used:   14618 bytes (94%)
                           Largest free fragment is 930
               RAM used:   277 (54%) at main() level
                           325 (63%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 30

0000:  GOTO   3714
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00D4
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0E92
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "dcswc_module_latching_contactor.h"
.................... #include <18F14K22.h>
.................... //////////// Standard Header file for the PIC18F14K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F14K22
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 35,2D
00CC:  DATA 46,65
00CE:  DATA 62,2D
00D0:  DATA 32,32
00D2:  DATA 00,00
*
0F64:  DATA 23,20
0F66:  DATA 27,25
0F68:  DATA 73,27
0F6A:  DATA 0D,0A
0F6C:  DATA 00,00
0F6E:  DATA 23,20
0F70:  DATA 20,63
0F72:  DATA 6F,6D
0F74:  DATA 70,69
0F76:  DATA 6C,65
0F78:  DATA 5F,79
0F7A:  DATA 65,61
0F7C:  DATA 72,3D
0F7E:  DATA 25,75
0F80:  DATA 0D,0A
0F82:  DATA 00,00
0F84:  DATA 23,20
0F86:  DATA 63,6F
0F88:  DATA 6D,70
0F8A:  DATA 69,6C
0F8C:  DATA 65,5F
0F8E:  DATA 6D,6F
0F90:  DATA 6E,74
0F92:  DATA 68,3D
0F94:  DATA 25,75
0F96:  DATA 0D,0A
0F98:  DATA 00,00
0F9A:  DATA 23,20
0F9C:  DATA 20,20
0F9E:  DATA 63,6F
0FA0:  DATA 6D,70
0FA2:  DATA 69,6C
0FA4:  DATA 65,5F
0FA6:  DATA 64,61
0FA8:  DATA 79,3D
0FAA:  DATA 25,75
0FAC:  DATA 0D,0A
0FAE:  DATA 00,00
0FB0:  DATA 23,20
0FB2:  DATA 20,20
0FB4:  DATA 20,20
0FB6:  DATA 20,20
0FB8:  DATA 76,69
0FBA:  DATA 6E,20
0FBC:  DATA 61,64
0FBE:  DATA 63,3D
0FC0:  DATA 25,6C
0FC2:  DATA 75,0D
0FC4:  DATA 0A,00
0FC6:  DATA 23,20
0FC8:  DATA 20,20
0FCA:  DATA 20,20
0FCC:  DATA 20,74
0FCE:  DATA 65,6D
0FD0:  DATA 70,20
0FD2:  DATA 61,64
0FD4:  DATA 63,3D
0FD6:  DATA 25,6C
0FD8:  DATA 75,0D
0FDA:  DATA 0A,00
0FDC:  DATA 23,20
0FDE:  DATA 63,6F
0FE0:  DATA 6E,66
0FE2:  DATA 69,67
0FE4:  DATA 2E,63
0FE6:  DATA 68,5B
0FE8:  DATA 25,75
0FEA:  DATA 5D,0D
0FEC:  DATA 0A,00
0FEE:  DATA 23,20
0FF0:  DATA 63,6F
0FF2:  DATA 6D,6D
0FF4:  DATA 61,6E
0FF6:  DATA 64,5F
0FF8:  DATA 6F,66
0FFA:  DATA 66,5F
0FFC:  DATA 68,6F
0FFE:  DATA 6C,64
1000:  DATA 5F,74
1002:  DATA 69,6D
1004:  DATA 65,3D
1006:  DATA 25,6C
1008:  DATA 75,0D
100A:  DATA 0A,00
100C:  DATA 23,20
100E:  DATA 20,20
1010:  DATA 20,6C
1012:  DATA 76,64
1014:  DATA 5F,64
1016:  DATA 69,73
1018:  DATA 63,6F
101A:  DATA 6E,6E
101C:  DATA 65,63
101E:  DATA 74,5F
1020:  DATA 61,64
1022:  DATA 63,3D
1024:  DATA 25,6C
1026:  DATA 75,0D
1028:  DATA 0A,00
102A:  DATA 23,20
102C:  DATA 20,6C
102E:  DATA 76,64
1030:  DATA 5F,64
1032:  DATA 69,73
1034:  DATA 63,6F
1036:  DATA 6E,6E
1038:  DATA 65,63
103A:  DATA 74,5F
103C:  DATA 64,65
103E:  DATA 6C,61
1040:  DATA 79,3D
1042:  DATA 25,6C
1044:  DATA 75,0D
1046:  DATA 0A,00
1048:  DATA 23,20
104A:  DATA 20,20
104C:  DATA 20,20
104E:  DATA 6C,76
1050:  DATA 64,5F
1052:  DATA 72,65
1054:  DATA 63,6F
1056:  DATA 6E,6E
1058:  DATA 65,63
105A:  DATA 74,5F
105C:  DATA 61,64
105E:  DATA 63,3D
1060:  DATA 25,6C
1062:  DATA 75,0D
1064:  DATA 0A,00
1066:  DATA 23,20
1068:  DATA 20,20
106A:  DATA 6C,76
106C:  DATA 64,5F
106E:  DATA 72,65
1070:  DATA 63,6F
1072:  DATA 6E,6E
1074:  DATA 65,63
1076:  DATA 74,5F
1078:  DATA 64,65
107A:  DATA 6C,61
107C:  DATA 79,3D
107E:  DATA 25,6C
1080:  DATA 75,0D
1082:  DATA 0A,00
1084:  DATA 23,20
1086:  DATA 20,20
1088:  DATA 20,68
108A:  DATA 76,64
108C:  DATA 5F,64
108E:  DATA 69,73
1090:  DATA 63,6F
1092:  DATA 6E,6E
1094:  DATA 65,63
1096:  DATA 74,5F
1098:  DATA 61,64
109A:  DATA 63,3D
109C:  DATA 25,6C
109E:  DATA 75,0D
10A0:  DATA 0A,00
10A2:  DATA 23,20
10A4:  DATA 20,68
10A6:  DATA 76,64
10A8:  DATA 5F,64
10AA:  DATA 69,73
10AC:  DATA 63,6F
10AE:  DATA 6E,6E
10B0:  DATA 65,63
10B2:  DATA 74,5F
10B4:  DATA 64,65
10B6:  DATA 6C,61
10B8:  DATA 79,3D
10BA:  DATA 25,6C
10BC:  DATA 75,0D
10BE:  DATA 0A,00
10C0:  DATA 23,20
10C2:  DATA 20,20
10C4:  DATA 20,20
10C6:  DATA 68,76
10C8:  DATA 64,5F
10CA:  DATA 72,65
10CC:  DATA 63,6F
10CE:  DATA 6E,6E
10D0:  DATA 65,63
10D2:  DATA 74,5F
10D4:  DATA 61,64
10D6:  DATA 63,3D
10D8:  DATA 25,6C
10DA:  DATA 75,0D
10DC:  DATA 0A,00
10DE:  DATA 23,20
10E0:  DATA 20,20
10E2:  DATA 68,76
10E4:  DATA 64,5F
10E6:  DATA 72,65
10E8:  DATA 63,6F
10EA:  DATA 6E,6E
10EC:  DATA 65,63
10EE:  DATA 74,5F
10F0:  DATA 64,65
10F2:  DATA 6C,61
10F4:  DATA 79,3D
10F6:  DATA 25,6C
10F8:  DATA 75,0D
10FA:  DATA 0A,00
10FC:  DATA 23,20
10FE:  DATA 20,20
1100:  DATA 20,6C
1102:  DATA 74,64
1104:  DATA 5F,64
1106:  DATA 69,73
1108:  DATA 63,6F
110A:  DATA 6E,6E
110C:  DATA 65,63
110E:  DATA 74,5F
1110:  DATA 61,64
1112:  DATA 63,3D
1114:  DATA 25,6C
1116:  DATA 75,0D
1118:  DATA 0A,00
111A:  DATA 23,20
111C:  DATA 20,6C
111E:  DATA 74,64
1120:  DATA 5F,64
1122:  DATA 69,73
1124:  DATA 63,6F
1126:  DATA 6E,6E
1128:  DATA 65,63
112A:  DATA 74,5F
112C:  DATA 64,65
112E:  DATA 6C,61
1130:  DATA 79,3D
1132:  DATA 25,6C
1134:  DATA 75,0D
1136:  DATA 0A,00
1138:  DATA 23,20
113A:  DATA 20,20
113C:  DATA 20,20
113E:  DATA 6C,74
1140:  DATA 64,5F
1142:  DATA 72,65
1144:  DATA 63,6F
1146:  DATA 6E,6E
1148:  DATA 65,63
114A:  DATA 74,5F
114C:  DATA 61,64
114E:  DATA 63,3D
1150:  DATA 25,6C
1152:  DATA 75,0D
1154:  DATA 0A,00
1156:  DATA 23,20
1158:  DATA 20,20
115A:  DATA 6C,74
115C:  DATA 64,5F
115E:  DATA 72,65
1160:  DATA 63,6F
1162:  DATA 6E,6E
1164:  DATA 65,63
1166:  DATA 74,5F
1168:  DATA 64,65
116A:  DATA 6C,61
116C:  DATA 79,3D
116E:  DATA 25,6C
1170:  DATA 75,0D
1172:  DATA 0A,00
1174:  DATA 23,20
1176:  DATA 20,20
1178:  DATA 20,68
117A:  DATA 74,64
117C:  DATA 5F,64
117E:  DATA 69,73
1180:  DATA 63,6F
1182:  DATA 6E,6E
1184:  DATA 65,63
1186:  DATA 74,5F
1188:  DATA 61,64
118A:  DATA 63,3D
118C:  DATA 25,6C
118E:  DATA 75,0D
1190:  DATA 0A,00
1192:  DATA 23,20
1194:  DATA 20,68
1196:  DATA 74,64
1198:  DATA 5F,64
119A:  DATA 69,73
119C:  DATA 63,6F
119E:  DATA 6E,6E
11A0:  DATA 65,63
11A2:  DATA 74,5F
11A4:  DATA 64,65
11A6:  DATA 6C,61
11A8:  DATA 79,3D
11AA:  DATA 25,6C
11AC:  DATA 75,0D
11AE:  DATA 0A,00
11B0:  DATA 23,20
11B2:  DATA 20,20
11B4:  DATA 20,20
11B6:  DATA 68,74
11B8:  DATA 64,5F
11BA:  DATA 72,65
11BC:  DATA 63,6F
11BE:  DATA 6E,6E
11C0:  DATA 65,63
11C2:  DATA 74,5F
11C4:  DATA 61,64
11C6:  DATA 63,3D
11C8:  DATA 25,6C
11CA:  DATA 75,0D
11CC:  DATA 0A,00
11CE:  DATA 23,20
11D0:  DATA 20,20
11D2:  DATA 68,74
11D4:  DATA 64,5F
11D6:  DATA 72,65
11D8:  DATA 63,6F
11DA:  DATA 6E,6E
11DC:  DATA 65,63
11DE:  DATA 74,5F
11E0:  DATA 64,65
11E2:  DATA 6C,61
11E4:  DATA 79,3D
11E6:  DATA 25,6C
11E8:  DATA 75,0D
11EA:  DATA 0A,00
11EC:  DATA 23,20
11EE:  DATA 63,68
11F0:  DATA 61,6E
11F2:  DATA 6E,65
11F4:  DATA 6C,5B
11F6:  DATA 25,75
11F8:  DATA 5D,0D
11FA:  DATA 0A,00
11FC:  DATA 23,20
11FE:  DATA 20,20
1200:  DATA 20,20
1202:  DATA 20,20
1204:  DATA 20,20
1206:  DATA 20,20
1208:  DATA 20,20
120A:  DATA 20,20
120C:  DATA 20,20
120E:  DATA 20,20
1210:  DATA 20,20
1212:  DATA 20,20
1214:  DATA 20,73
1216:  DATA 74,61
1218:  DATA 74,65
121A:  DATA 3D,30
121C:  DATA 78,25
121E:  DATA 30,32
1220:  DATA 78,0D
1222:  DATA 0A,00
1224:  DATA 23,20
1226:  DATA 20,20
1228:  DATA 20,20
122A:  DATA 20,20
122C:  DATA 20,20
122E:  DATA 20,20
1230:  DATA 63,6F
1232:  DATA 6D,6D
1234:  DATA 61,6E
1236:  DATA 64,5F
1238:  DATA 6F,6E
123A:  DATA 5F,73
123C:  DATA 65,63
123E:  DATA 6F,6E
1240:  DATA 64,73
1242:  DATA 3D,25
1244:  DATA 6C,75
1246:  DATA 0D,0A
1248:  DATA 00,00
124A:  DATA 23,20
124C:  DATA 20,20
124E:  DATA 20,20
1250:  DATA 20,63
1252:  DATA 6F,6D
1254:  DATA 6D,61
1256:  DATA 6E,64
1258:  DATA 5F,6F
125A:  DATA 6E,5F
125C:  DATA 68,6F
125E:  DATA 6C,64
1260:  DATA 5F,73
1262:  DATA 65,63
1264:  DATA 6F,6E
1266:  DATA 64,73
1268:  DATA 3D,25
126A:  DATA 6C,75
126C:  DATA 0D,0A
126E:  DATA 00,00
1270:  DATA 23,20
1272:  DATA 20,20
1274:  DATA 20,20
1276:  DATA 20,20
1278:  DATA 20,20
127A:  DATA 20,63
127C:  DATA 6F,6D
127E:  DATA 6D,61
1280:  DATA 6E,64
1282:  DATA 5F,6F
1284:  DATA 66,66
1286:  DATA 5F,73
1288:  DATA 65,63
128A:  DATA 6F,6E
128C:  DATA 64,73
128E:  DATA 3D,25
1290:  DATA 6C,75
1292:  DATA 0D,0A
1294:  DATA 00,00
1296:  DATA 23,20
1298:  DATA 20,20
129A:  DATA 20,20
129C:  DATA 63,6F
129E:  DATA 6D,6D
12A0:  DATA 61,6E
12A2:  DATA 64,5F
12A4:  DATA 6F,66
12A6:  DATA 66,5F
12A8:  DATA 68,6F
12AA:  DATA 6C,64
12AC:  DATA 5F,73
12AE:  DATA 65,63
12B0:  DATA 6F,6E
12B2:  DATA 64,73
12B4:  DATA 3D,25
12B6:  DATA 6C,75
12B8:  DATA 0D,0A
12BA:  DATA 00,00
12BC:  DATA 23,20
12BE:  DATA 6C,76
12C0:  DATA 64,5F
12C2:  DATA 64,69
12C4:  DATA 73,63
12C6:  DATA 6F,6E
12C8:  DATA 6E,65
12CA:  DATA 63,74
12CC:  DATA 5F,64
12CE:  DATA 65,6C
12D0:  DATA 61,79
12D2:  DATA 5F,73
12D4:  DATA 65,63
12D6:  DATA 6F,6E
12D8:  DATA 64,73
12DA:  DATA 3D,25
12DC:  DATA 6C,75
12DE:  DATA 0D,0A
12E0:  DATA 00,00
12E2:  DATA 23,20
12E4:  DATA 20,6C
12E6:  DATA 76,64
12E8:  DATA 5F,72
12EA:  DATA 65,63
12EC:  DATA 6F,6E
12EE:  DATA 6E,65
12F0:  DATA 63,74
12F2:  DATA 5F,64
12F4:  DATA 65,6C
12F6:  DATA 61,79
12F8:  DATA 5F,73
12FA:  DATA 65,63
12FC:  DATA 6F,6E
12FE:  DATA 64,73
1300:  DATA 3D,25
1302:  DATA 6C,75
1304:  DATA 0D,0A
1306:  DATA 00,00
1308:  DATA 23,20
130A:  DATA 68,76
130C:  DATA 64,5F
130E:  DATA 64,69
1310:  DATA 73,63
1312:  DATA 6F,6E
1314:  DATA 6E,65
1316:  DATA 63,74
1318:  DATA 5F,64
131A:  DATA 65,6C
131C:  DATA 61,79
131E:  DATA 5F,73
1320:  DATA 65,63
1322:  DATA 6F,6E
1324:  DATA 64,73
1326:  DATA 3D,25
1328:  DATA 6C,75
132A:  DATA 0D,0A
132C:  DATA 00,00
132E:  DATA 23,20
1330:  DATA 20,68
1332:  DATA 76,64
1334:  DATA 5F,72
1336:  DATA 65,63
1338:  DATA 6F,6E
133A:  DATA 6E,65
133C:  DATA 63,74
133E:  DATA 5F,64
1340:  DATA 65,6C
1342:  DATA 61,79
1344:  DATA 5F,73
1346:  DATA 65,63
1348:  DATA 6F,6E
134A:  DATA 64,73
134C:  DATA 3D,25
134E:  DATA 6C,75
1350:  DATA 0D,0A
1352:  DATA 00,00
1354:  DATA 23,20
1356:  DATA 6C,74
1358:  DATA 64,5F
135A:  DATA 64,69
135C:  DATA 73,63
135E:  DATA 6F,6E
1360:  DATA 6E,65
1362:  DATA 63,74
1364:  DATA 5F,64
1366:  DATA 65,6C
1368:  DATA 61,79
136A:  DATA 5F,73
136C:  DATA 65,63
136E:  DATA 6F,6E
1370:  DATA 64,73
1372:  DATA 3D,25
1374:  DATA 6C,75
1376:  DATA 0D,0A
1378:  DATA 00,00
137A:  DATA 23,20
137C:  DATA 20,6C
137E:  DATA 74,64
1380:  DATA 5F,72
1382:  DATA 65,63
1384:  DATA 6F,6E
1386:  DATA 6E,65
1388:  DATA 63,74
138A:  DATA 5F,64
138C:  DATA 65,6C
138E:  DATA 61,79
1390:  DATA 5F,73
1392:  DATA 65,63
1394:  DATA 6F,6E
1396:  DATA 64,73
1398:  DATA 3D,25
139A:  DATA 6C,75
139C:  DATA 0D,0A
139E:  DATA 00,00
13A0:  DATA 23,20
13A2:  DATA 68,74
13A4:  DATA 64,5F
13A6:  DATA 64,69
13A8:  DATA 73,63
13AA:  DATA 6F,6E
13AC:  DATA 6E,65
13AE:  DATA 63,74
13B0:  DATA 5F,64
13B2:  DATA 65,6C
13B4:  DATA 61,79
13B6:  DATA 5F,73
13B8:  DATA 65,63
13BA:  DATA 6F,6E
13BC:  DATA 64,73
13BE:  DATA 3D,25
13C0:  DATA 6C,75
13C2:  DATA 0D,0A
13C4:  DATA 00,00
13C6:  DATA 23,20
13C8:  DATA 20,68
13CA:  DATA 74,64
13CC:  DATA 5F,72
13CE:  DATA 65,63
13D0:  DATA 6F,6E
13D2:  DATA 6E,65
13D4:  DATA 63,74
13D6:  DATA 5F,64
13D8:  DATA 65,6C
13DA:  DATA 61,79
13DC:  DATA 5F,73
13DE:  DATA 65,63
13E0:  DATA 6F,6E
13E2:  DATA 64,73
13E4:  DATA 3D,25
13E6:  DATA 6C,75
13E8:  DATA 0D,0A
13EA:  DATA 00,00
13EC:  DATA 23,20
13EE:  DATA 64,63
13F0:  DATA 73,77
13F2:  DATA 63,5F
13F4:  DATA 6D,6F
13F6:  DATA 64,75
13F8:  DATA 6C,65
13FA:  DATA 5F,6C
13FC:  DATA 61,74
13FE:  DATA 63,68
1400:  DATA 69,6E
1402:  DATA 67,5F
1404:  DATA 63,6F
1406:  DATA 6E,74
1408:  DATA 61,63
140A:  DATA 74,6F
140C:  DATA 72,20
140E:  DATA 25,73
1410:  DATA 0D,0A
1412:  DATA 23,20
1414:  DATA 00,00
1416:  DATA 35,2D
1418:  DATA 46,65
141A:  DATA 62,2D
141C:  DATA 32,32
141E:  DATA 00,00
1420:  DATA 57,44
1422:  DATA 54,20
1424:  DATA 54,49
1426:  DATA 4D,45
1428:  DATA 4F,55
142A:  DATA 54,00
142C:  DATA 4D,43
142E:  DATA 4C,52
1430:  DATA 20,46
1432:  DATA 52,4F
1434:  DATA 4D,20
1436:  DATA 53,4C
1438:  DATA 45,45
143A:  DATA 50,00
143C:  DATA 4D,43
143E:  DATA 4C,52
1440:  DATA 20,46
1442:  DATA 52,4F
1444:  DATA 4D,20
1446:  DATA 52,55
1448:  DATA 4E,00
144A:  DATA 4E,4F
144C:  DATA 52,4D
144E:  DATA 41,4C
1450:  DATA 20,50
1452:  DATA 4F,57
1454:  DATA 45,52
1456:  DATA 20,55
1458:  DATA 50,00
145A:  DATA 42,52
145C:  DATA 4F,57
145E:  DATA 4E,4F
1460:  DATA 55,54
1462:  DATA 20,52
1464:  DATA 45,53
1466:  DATA 54,41
1468:  DATA 52,54
146A:  DATA 00,00
146C:  DATA 57,44
146E:  DATA 54,20
1470:  DATA 46,52
1472:  DATA 4F,4D
1474:  DATA 20,53
1476:  DATA 4C,45
1478:  DATA 45,50
147A:  DATA 00,00
147C:  DATA 52,45
147E:  DATA 53,45
1480:  DATA 54,20
1482:  DATA 49,4E
1484:  DATA 53,54
1486:  DATA 52,55
1488:  DATA 43,54
148A:  DATA 49,4F
148C:  DATA 4E,00
148E:  DATA 55,4E
1490:  DATA 4B,4E
1492:  DATA 4F,57
1494:  DATA 4E,21
1496:  DATA 00,00
*
1982:  TBLRD*+
1984:  MOVFF  FF6,11A
1988:  MOVFF  FF7,11B
198C:  MOVF   FF5,W
198E:  BTFSS  F9E.4
1990:  BRA    198E
1992:  MOVWF  FAD
1994:  MOVFF  11A,FF6
1998:  MOVFF  11B,FF7
199C:  MOVLB  1
199E:  DECFSZ x19,F
19A0:  BRA    19A4
19A2:  BRA    19A8
19A4:  MOVLB  0
19A6:  BRA    1982
19A8:  MOVLB  0
19AA:  RETURN 0
19AC:  TBLRD*+
19AE:  MOVF   FF5,F
19B0:  BZ    19CC
19B2:  MOVFF  FF6,116
19B6:  MOVFF  FF7,117
19BA:  MOVF   FF5,W
19BC:  BTFSS  F9E.4
19BE:  BRA    19BC
19C0:  MOVWF  FAD
19C2:  MOVFF  116,FF6
19C6:  MOVFF  117,FF7
19CA:  BRA    19AC
19CC:  RETURN 0
*
25FE:  MOVLB  1
2600:  MOVF   x18,W
2602:  ANDLW  07
2604:  MOVWF  00
2606:  RRCF   x18,W
2608:  MOVWF  01
260A:  RRCF   01,F
260C:  RRCF   01,F
260E:  MOVLW  1F
2610:  ANDWF  01,F
2612:  MOVF   01,W
2614:  ADDWF  x19,W
2616:  MOVWF  FE9
2618:  MOVLW  00
261A:  ADDWFC x1A,W
261C:  MOVWF  FEA
261E:  MOVFF  FEF,01
2622:  INCF   00,F
2624:  BRA    2628
2626:  RRCF   01,F
2628:  DECFSZ 00,F
262A:  BRA    2626
262C:  MOVLW  01
262E:  ANDWF  01,F
2630:  MOVLB  0
2632:  RETURN 0
2634:  MOVLB  1
2636:  MOVF   x18,W
2638:  ANDLW  07
263A:  MOVWF  00
263C:  RRCF   x18,W
263E:  MOVWF  01
2640:  RRCF   01,F
2642:  RRCF   01,F
2644:  MOVLW  1F
2646:  ANDWF  01,F
2648:  MOVF   01,W
264A:  ADDWF  x1A,W
264C:  MOVWF  FE9
264E:  MOVLW  00
2650:  ADDWFC x1B,W
2652:  MOVWF  FEA
2654:  CLRF   01
2656:  INCF   01,F
2658:  INCF   00,F
265A:  BRA    265E
265C:  RLCF   01,F
265E:  DECFSZ 00,F
2660:  BRA    265C
2662:  MOVF   x19,F
2664:  BZ    266C
2666:  MOVF   01,W
2668:  IORWF  FEF,F
266A:  BRA    2672
266C:  COMF   01,F
266E:  MOVF   01,W
2670:  ANDWF  FEF,F
2672:  MOVLB  0
2674:  RETURN 0
*
2860:  MOVLB  1
2862:  MOVF   x19,W
2864:  CLRF   01
2866:  SUBWF  x18,W
2868:  BC    2870
286A:  MOVFF  118,00
286E:  BRA    2888
2870:  CLRF   00
2872:  MOVLW  08
2874:  MOVWF  x1A
2876:  RLCF   x18,F
2878:  RLCF   00,F
287A:  MOVF   x19,W
287C:  SUBWF  00,W
287E:  BTFSC  FD8.0
2880:  MOVWF  00
2882:  RLCF   01,F
2884:  DECFSZ x1A,F
2886:  BRA    2876
2888:  MOVLB  0
288A:  RETURN 0
288C:  MOVF   01,W
288E:  MOVFF  116,118
2892:  MOVLW  64
2894:  MOVLB  1
2896:  MOVWF  x19
2898:  MOVLB  0
289A:  RCALL  2860
289C:  MOVFF  00,116
28A0:  MOVF   01,W
28A2:  MOVLW  30
28A4:  BNZ   28B6
28A6:  MOVLB  1
28A8:  BTFSS  x17.1
28AA:  BRA    28C8
28AC:  BTFSC  x17.3
28AE:  BRA    28C8
28B0:  BTFSC  x17.4
28B2:  MOVLW  20
28B4:  BRA    28BE
28B6:  MOVLB  1
28B8:  BCF    x17.3
28BA:  BCF    x17.4
28BC:  BSF    x17.0
28BE:  ADDWF  01,F
28C0:  MOVF   01,W
28C2:  BTFSS  F9E.4
28C4:  BRA    28C2
28C6:  MOVWF  FAD
28C8:  MOVFF  116,118
28CC:  MOVLW  0A
28CE:  MOVWF  x19
28D0:  MOVLB  0
28D2:  RCALL  2860
28D4:  MOVFF  00,116
28D8:  MOVF   01,W
28DA:  MOVLW  30
28DC:  BNZ   28EE
28DE:  MOVLB  1
28E0:  BTFSC  x17.3
28E2:  BRA    28FA
28E4:  BTFSS  x17.0
28E6:  BRA    28FA
28E8:  BTFSC  x17.4
28EA:  MOVLW  20
28EC:  MOVLB  0
28EE:  ADDWF  01,F
28F0:  MOVF   01,W
28F2:  BTFSS  F9E.4
28F4:  BRA    28F2
28F6:  MOVWF  FAD
28F8:  MOVLB  1
28FA:  MOVLW  30
28FC:  ADDWF  x16,F
28FE:  MOVF   x16,W
2900:  BTFSS  F9E.4
2902:  BRA    2900
2904:  MOVWF  FAD
2906:  MOVLB  0
2908:  RETURN 0
290A:  MOVFF  FEA,120
290E:  MOVFF  FE9,11F
2912:  MOVLB  1
2914:  SWAPF  x19,W
2916:  IORLW  F0
2918:  MOVWF  x1B
291A:  ADDWF  x1B,F
291C:  ADDLW  E2
291E:  MOVWF  x1C
2920:  ADDLW  32
2922:  MOVWF  x1E
2924:  MOVF   x19,W
2926:  ANDLW  0F
2928:  ADDWF  x1C,F
292A:  ADDWF  x1C,F
292C:  ADDWF  x1E,F
292E:  ADDLW  E9
2930:  MOVWF  x1D
2932:  ADDWF  x1D,F
2934:  ADDWF  x1D,F
2936:  SWAPF  x18,W
2938:  ANDLW  0F
293A:  ADDWF  x1D,F
293C:  ADDWF  x1E,F
293E:  RLCF   x1D,F
2940:  RLCF   x1E,F
2942:  COMF   x1E,F
2944:  RLCF   x1E,F
2946:  MOVF   x18,W
2948:  ANDLW  0F
294A:  ADDWF  x1E,F
294C:  RLCF   x1B,F
294E:  MOVLW  07
2950:  MOVWF  x1A
2952:  MOVLW  0A
2954:  DECF   x1D,F
2956:  ADDWF  x1E,F
2958:  BNC   2954
295A:  DECF   x1C,F
295C:  ADDWF  x1D,F
295E:  BNC   295A
2960:  DECF   x1B,F
2962:  ADDWF  x1C,F
2964:  BNC   2960
2966:  DECF   x1A,F
2968:  ADDWF  x1B,F
296A:  BNC   2966
296C:  MOVLW  01
296E:  MOVWF  FEA
2970:  MOVLW  1A
2972:  MOVWF  FE9
2974:  MOVLW  07
2976:  ANDWF  x1F,W
2978:  BCF    x1F.6
297A:  ADDWF  FE9,F
297C:  MOVLW  00
297E:  ADDWFC FEA,F
2980:  MOVF   FE9,W
2982:  SUBLW  1E
2984:  BNZ   298C
2986:  DECFSZ FEA,W
2988:  BRA    298C
298A:  BSF    x1F.6
298C:  MOVF   FEF,W
298E:  MOVWF  00
2990:  BNZ   29A2
2992:  BTFSC  x1F.6
2994:  BRA    29A2
2996:  BTFSC  x1F.4
2998:  BRA    29B2
299A:  BTFSC  x1F.3
299C:  BRA    29A2
299E:  MOVLW  20
29A0:  BRA    29A8
29A2:  BSF    x1F.3
29A4:  BCF    x1F.4
29A6:  MOVLW  30
29A8:  ADDWF  00,F
29AA:  MOVF   00,W
29AC:  BTFSS  F9E.4
29AE:  BRA    29AC
29B0:  MOVWF  FAD
29B2:  MOVF   FEE,W
29B4:  BTFSS  x1F.6
29B6:  BRA    2980
29B8:  MOVLB  0
29BA:  RETURN 0
29BC:  MOVLB  1
29BE:  BTFSC  x1A.7
29C0:  BRA    29E2
29C2:  MOVLW  0F
29C4:  MOVWF  00
29C6:  SWAPF  x19,W
29C8:  ANDWF  00,F
29CA:  MOVLW  0A
29CC:  SUBWF  00,W
29CE:  BC    29D6
29D0:  MOVLW  30
29D2:  ADDWF  00,F
29D4:  BRA    29DA
29D6:  MOVF   x1A,W
29D8:  ADDWF  00,F
29DA:  MOVF   00,W
29DC:  BTFSS  F9E.4
29DE:  BRA    29DC
29E0:  MOVWF  FAD
29E2:  MOVLW  0F
29E4:  ANDWF  x19,F
29E6:  MOVLW  0A
29E8:  SUBWF  x19,W
29EA:  BC    29F0
29EC:  MOVLW  30
29EE:  BRA    29F4
29F0:  BCF    x1A.7
29F2:  MOVF   x1A,W
29F4:  ADDWF  x19,F
29F6:  MOVF   x19,W
29F8:  BTFSS  F9E.4
29FA:  BRA    29F8
29FC:  MOVWF  FAD
29FE:  MOVLB  0
2A00:  GOTO   3274 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #device *=16
.................... #use delay(clock=16MHz)
*
1498:  MOVLW  01
149A:  MOVWF  FEA
149C:  MOVLW  37
149E:  MOVWF  FE9
14A0:  MOVF   FEF,W
14A2:  BZ    14C0
14A4:  MOVLW  05
14A6:  MOVWF  01
14A8:  CLRF   00
14AA:  DECFSZ 00,F
14AC:  BRA    14AA
14AE:  DECFSZ 01,F
14B0:  BRA    14A8
14B2:  MOVLW  2E
14B4:  MOVWF  00
14B6:  DECFSZ 00,F
14B8:  BRA    14B6
14BA:  BRA    14BC
14BC:  DECFSZ FEF,F
14BE:  BRA    14A4
14C0:  RETURN 0
.................... 
.................... /* hardware I2C port is slave and is connected to DCSWC bus */
.................... #use i2c(stream=STREAM_SLAVE,SLAVE, I2C1, FORCE_HW)
*
0E7C:  MOVF   FC9,W
0E7E:  MOVFF  13B,FC9
0E82:  BSF    FC6.4
0E84:  BCF    F9E.3
0E86:  BTFSC  FC7.0
0E88:  BRA    0E86
0E8A:  CLRF   01
0E8C:  BTFSS  FC5.6
0E8E:  INCF   01,F
0E90:  RETURN 0
.................... /* slave address set based on dip switch in init() */
.................... 
.................... 
.................... #fuses INTRC_IO
.................... #fuses NOPLLEN
.................... #fuses NOFCMEN
.................... #fuses NOIESO
.................... #fuses PUT
.................... #fuses BROWNOUT
.................... #fuses WDT512
.................... #fuses NOHFOFST
.................... #fuses NOMCLR
.................... #fuses STVREN
.................... #fuses NOLVP
.................... #fuses NOXINST
.................... #fuses NODEBUG
.................... #fuses NOPROTECT
.................... #fuses NOWRT
.................... #fuses NOWRTC 
.................... #fuses NOWRTB
.................... #fuses NOWRTD
.................... #fuses NOEBTR
.................... #fuses NOEBTRB
.................... 
.................... #use standard_io(ALL)
.................... 
.................... #use rs232(UART1,stream=STREAM_FTDI,baud=9600,errors)	
.................... 
.................... /* program config CRC of 0 and a serial_prefix of 'A' ... that will trigger a write default on first boot */
.................... #ROM 0xF00000 = { 0x00, 0x00, 0x40, 0x00 }
.................... 
.................... 
.................... 
.................... 
.................... #define SW_OVERRIDE_A        PIN_A5
.................... #define SW_OVERRIDE_B        PIN_A4
.................... #define BRIDGE_B_A           PIN_C5
.................... #define BRIDGE_A_B           PIN_C4
.................... #define BRIDGE_A_A           PIN_C3
.................... #define BRIDGE_B_B           PIN_C6
.................... #define AN_DIP               PIN_C7
.................... #define SER_TO_PC            PIN_B7
.................... #define AN_VTEMP             PIN_A2
.................... #define AN_IN_VOLTS          PIN_C0
.................... #define LED_A                PIN_C1
.................... #define LED_B                PIN_C2
.................... #define I2C_SDA              PIN_B4
.................... #define SER_FROM_PC          PIN_B5
.................... #define I2C_SCL              PIN_B6
.................... 
.................... 
.................... /* 
.................... Parameters are stored in EEPROM
.................... */
.................... #define PARAM_CRC_ADDRESS  0x00
.................... #define PARAM_ADDRESS      PARAM_CRC_ADDRESS+2
.................... 
.................... 
.................... 
.................... /* bit positions for a channel state byte */
.................... #define CH_STATE_BIT_FUTURE   7  /* reserved for future use */
.................... #define CH_STATE_BIT_HTD      6  /* high temperature disconnect */
.................... #define CH_STATE_BIT_LTD      5  /* low temperature disconnect */
.................... #define CH_STATE_BIT_HVD      4  /* high voltage disconnect */
.................... #define CH_STATE_BIT_LVD      3  /* low voltage disconnect */
.................... #define CH_STATE_BIT_CMD_OFF  2  /* commanded off */
.................... #define CH_STATE_BIT_CMD_ON   1  /* commanded on (takes presedence over commanded off) */
.................... #define CH_STATE_BIT_OVERRIDE 0  /* override switch */
.................... 
.................... /* _OVERRIDE or _CMD_ON set means output on */
.................... #define CH_STATE_MASK_ON     0b00000011 
.................... /* _CMD_OFF, _LVD, _HVD, _LTD, _HTD means output off, unless override by on mask */
.................... #define CH_STATE_MASK_OFF    0b01111100 
.................... 
.................... #define ADC_SAMPLE_TICKS              20
.................... #define CONTACTOR_POWER_SAVE_MS       200 /* milliseconds for contactor be on. Must be >0 and <= 255 */
.................... 
.................... 
.................... typedef struct {
.................... 	/* command on hold time */
.................... 	int16 command_on_hold_time;
.................... 
.................... 	/* command off hold time */
.................... 	int16 command_off_hold_time;
.................... 
.................... 	/* low voltage disconnect */
.................... 	int16 lvd_disconnect_adc;
.................... 	int16 lvd_disconnect_delay;
.................... 	int16 lvd_reconnect_adc;
.................... 	int16 lvd_reconnect_delay;
.................... 
.................... 	/* high voltage disconnect */
.................... 	int16 hvd_disconnect_adc;
.................... 	int16 hvd_disconnect_delay;
.................... 	int16 hvd_reconnect_adc;
.................... 	int16 hvd_reconnect_delay;
.................... 
.................... 	/* low temperature disconnect */
.................... 	int16 ltd_disconnect_adc;
.................... 	int16 ltd_disconnect_delay;
.................... 	int16 ltd_reconnect_adc;
.................... 	int16 ltd_reconnect_delay;
.................... 
.................... 	/* high temperature disconnect */
.................... 	int16 htd_disconnect_adc;
.................... 	int16 htd_disconnect_delay;
.................... 	int16 htd_reconnect_adc;
.................... 	int16 htd_reconnect_delay;
.................... } struct_config_channel;
.................... 
.................... typedef struct {
.................... 	/* not much going on here */
.................... 	struct_config_channel ch[2];
.................... } struct_config;
.................... 
.................... 
.................... typedef struct {
.................... 	int8 state;
.................... 
.................... 	int16 command_on_seconds;			/* counts down. Off at zero. */
.................... 	int16 command_on_hold_seconds;      /* counts down. Off at zero. */
.................... 
.................... 	int16 command_off_seconds;			/* counts down. Off at zero. */
.................... 	int16 command_off_hold_seconds;     /* counts down. Off at zero. */
.................... 
.................... 	int16 lvd_disconnect_delay_seconds;	/* counts down */
.................... 	int16  lvd_reconnect_delay_seconds;	/* counts down */
.................... 
.................... 	int16 hvd_disconnect_delay_seconds;	/* counts down */
.................... 	int16  hvd_reconnect_delay_seconds;	/* counts down */
.................... 
.................... 	int16 ltd_disconnect_delay_seconds; /* counts down */
.................... 	int16 ltd_reconnect_delay_seconds;  /* counts down */
.................... 
.................... 	int16 htd_disconnect_delay_seconds; /* counts down */
.................... 	int16 htd_reconnect_delay_seconds;  /* counts down */
.................... } struct_channel;
.................... 
.................... typedef struct {
.................... 	/* circular buffer for ADC readings */
.................... 	int16 adc_buffer[3][16];
.................... 	int8  adc_buffer_index;
.................... 
.................... 	int16 sequence_number;
.................... 	int16 uptime_minutes;
.................... 	int16 interval_milliseconds;
.................... 
.................... 	int8 factory_unlocked;
.................... 
.................... 
.................... 	int8 compile_year;
.................... 	int8 compile_month;
.................... 	int8 compile_day;
.................... 
.................... 
.................... 	int8 default_params_written;
.................... } struct_current;
.................... 
.................... typedef struct {
.................... 	/* action flags */
.................... 	int1 now_adc_sample;
.................... 	int1 now_adc_reset_count;
.................... 
.................... 	int1 now_millisecond;
.................... 
.................... 	int1 now_write_config;
.................... 	int1 now_reset_config;
.................... 
.................... 	int1 now_debug_dump;
.................... 
.................... 	int1 contactor[2]; 	/* contactor states */
.................... 
.................... 
.................... 	/* timers */
.................... 	int8 led_on_a;
.................... 	int8 led_on_b;
.................... 
.................... 
.................... 	int8 contactor_powersave[2]; /* counts down. Off at zero. */
.................... } struct_time_keep;
.................... 
.................... /* global structures */
.................... struct_config config={0};
.................... struct_current current={0};
.................... struct_time_keep timers={0};
.................... struct_channel channel[2]={0};
.................... 
.................... #include "adc_dcswc_module_latching_contactor.c"
.................... int16 adc_get(int8 ch) {
.................... 	int16 sum;
.................... 	int8 i;
.................... 
.................... 	/* pre-compute address of channel adc buffer. Saves computing it 16 times in the loop below */
.................... 	int16 *p;
.................... 	p = current.adc_buffer[ch];
*
0594:  MOVLB  1
0596:  MOVF   x3D,W
0598:  MULLW  20
059A:  MOVF   FF3,W
059C:  CLRF   03
059E:  ADDLW  63
05A0:  MOVWF  01
05A2:  MOVLW  00
05A4:  ADDWFC 03,F
05A6:  MOVFF  01,141
05AA:  MOVFF  03,142
.................... 
.................... 	// Calculate the mean.  This is done by summing up the
.................... 	// values and dividing by the number of elements.
.................... 	sum = 0;
05AE:  CLRF   x3F
05B0:  CLRF   x3E
.................... 	for( i = 0; i < 16 ; i++ ) {
05B2:  CLRF   x40
05B4:  MOVF   x40,W
05B6:  SUBLW  0F
05B8:  BNC   05E4
.................... //		sum += current.adc_buffer[ch][i];
.................... 		sum += p[i];
05BA:  CLRF   03
05BC:  MOVFF  140,02
05C0:  BCF    FD8.0
05C2:  RLCF   02,F
05C4:  RLCF   03,F
05C6:  MOVF   02,W
05C8:  ADDWF  x41,W
05CA:  MOVWF  FE9
05CC:  MOVF   x42,W
05CE:  ADDWFC 03,W
05D0:  MOVWF  FEA
05D2:  MOVFF  FEC,03
05D6:  MOVF   FED,F
05D8:  MOVF   FEF,W
05DA:  ADDWF  x3E,F
05DC:  MOVF   03,W
05DE:  ADDWFC x3F,F
05E0:  INCF   x40,F
05E2:  BRA    05B4
.................... 	}
.................... 
.................... 	/* divide sum by our 16 samples and round by adding 8 */
.................... 	return ( (sum+8) >> 4 );
05E4:  MOVLW  08
05E6:  ADDWF  x3E,W
05E8:  MOVWF  x43
05EA:  MOVLW  00
05EC:  ADDWFC x3F,W
05EE:  MOVWF  x44
05F0:  RRCF   x44,W
05F2:  MOVWF  03
05F4:  RRCF   x43,W
05F6:  MOVWF  02
05F8:  RRCF   03,F
05FA:  RRCF   02,F
05FC:  RRCF   03,F
05FE:  RRCF   02,F
0600:  RRCF   03,F
0602:  RRCF   02,F
0604:  MOVLW  0F
0606:  ANDWF  03,F
0608:  MOVFF  02,01
060C:  MOVFF  03,02
0610:  MOVLB  0
0612:  RETURN 0
.................... }
.................... 
.................... 
.................... void adc_update(void) {
.................... 
.................... 	/* wrap buffer around */
.................... 	current.adc_buffer_index++;
*
19CE:  INCF   xC3,F
.................... 	if ( current.adc_buffer_index >= 16 )
19D0:  MOVF   xC3,W
19D2:  SUBLW  0F
19D4:  BC    19D8
.................... 		current.adc_buffer_index=0;
19D6:  CLRF   xC3
.................... 
.................... 	set_adc_channel(4);
19D8:  MOVLW  10
19DA:  MOVWF  01
19DC:  MOVF   FC2,W
19DE:  ANDLW  C3
19E0:  IORWF  01,W
19E2:  MOVWF  FC2
.................... 	current.adc_buffer[0][current.adc_buffer_index] = read_adc();
19E4:  BCF    FD8.0
19E6:  RLCF   xC3,W
19E8:  CLRF   03
19EA:  ADDLW  63
19EC:  MOVWF  FE9
19EE:  MOVLW  00
19F0:  ADDWFC 03,W
19F2:  MOVWF  FEA
19F4:  BSF    FC2.1
19F6:  BTFSC  FC2.1
19F8:  BRA    19F6
19FA:  MOVFF  FC3,FEF
19FE:  MOVFF  FC4,FEC
.................... 
.................... 
.................... 	set_adc_channel(2);
1A02:  MOVLW  08
1A04:  MOVWF  01
1A06:  MOVF   FC2,W
1A08:  ANDLW  C3
1A0A:  IORWF  01,W
1A0C:  MOVWF  FC2
.................... 	delay_ms(1);
1A0E:  MOVLW  01
1A10:  MOVLB  1
1A12:  MOVWF  x37
1A14:  MOVLB  0
1A16:  RCALL  1498
.................... 	current.adc_buffer[1][current.adc_buffer_index] = read_adc();
1A18:  BCF    FD8.0
1A1A:  RLCF   xC3,W
1A1C:  CLRF   03
1A1E:  ADDLW  83
1A20:  MOVWF  FE9
1A22:  MOVLW  00
1A24:  ADDWFC 03,W
1A26:  MOVWF  FEA
1A28:  BSF    FC2.1
1A2A:  BTFSC  FC2.1
1A2C:  BRA    1A2A
1A2E:  MOVFF  FC3,FEF
1A32:  MOVFF  FC4,FEC
.................... 
.................... 	set_adc_channel(9);
1A36:  MOVLW  24
1A38:  MOVWF  01
1A3A:  MOVF   FC2,W
1A3C:  ANDLW  C3
1A3E:  IORWF  01,W
1A40:  MOVWF  FC2
.................... 	delay_ms(1);
1A42:  MOVLW  01
1A44:  MOVLB  1
1A46:  MOVWF  x37
1A48:  MOVLB  0
1A4A:  RCALL  1498
.................... 	current.adc_buffer[2][current.adc_buffer_index] = read_adc();
1A4C:  BCF    FD8.0
1A4E:  RLCF   xC3,W
1A50:  CLRF   03
1A52:  ADDLW  A3
1A54:  MOVWF  FE9
1A56:  MOVLW  00
1A58:  ADDWFC 03,W
1A5A:  MOVWF  FEA
1A5C:  BSF    FC2.1
1A5E:  BTFSC  FC2.1
1A60:  BRA    1A5E
1A62:  MOVFF  FC3,FEF
1A66:  MOVFF  FC4,FEC
1A6A:  RETURN 0
.................... }
.................... 
.................... int8 read_dip_switch(void) {
.................... 	int16 adc;
.................... 
.................... 	set_adc_channel(9);
*
14C2:  MOVLW  24
14C4:  MOVWF  01
14C6:  MOVF   FC2,W
14C8:  ANDLW  C3
14CA:  IORWF  01,W
14CC:  MOVWF  FC2
.................... 	delay_ms(1);
14CE:  MOVLW  01
14D0:  MOVLB  1
14D2:  MOVWF  x37
14D4:  MOVLB  0
14D6:  RCALL  1498
.................... 	adc=read_adc();
14D8:  BSF    FC2.1
14DA:  BTFSC  FC2.1
14DC:  BRA    14DA
14DE:  MOVFF  FC4,136
14E2:  MOVFF  FC3,135
.................... 
.................... 	/* (note that table is sorted by vout reading 
.................... 	SW3.1 (LSB) SW3.2 (MSB) VALUE ADC
....................     OFF         OFF         0     1023
.................... 	OFF         ON          2     682
....................     ON          OFF         1     511
.................... 	ON          ON          3     409
.................... 	*/
.................... 
.................... 	if ( adc > (1023-64) )
14E6:  MOVLB  1
14E8:  MOVF   x36,W
14EA:  SUBLW  02
14EC:  BC    14FE
14EE:  XORLW  FF
14F0:  BNZ   14F8
14F2:  MOVF   x35,W
14F4:  SUBLW  BF
14F6:  BC    14FE
.................... 		return 0;
14F8:  MOVLW  00
14FA:  MOVWF  01
14FC:  BRA    152E
.................... 	if ( adc > (682-64) )
14FE:  MOVF   x36,W
1500:  SUBLW  01
1502:  BC    1514
1504:  XORLW  FF
1506:  BNZ   150E
1508:  MOVF   x35,W
150A:  SUBLW  6A
150C:  BC    1514
.................... 		return 2;
150E:  MOVLW  02
1510:  MOVWF  01
1512:  BRA    152E
.................... 	if ( adc > (511-64) )
1514:  MOVF   x36,W
1516:  SUBLW  00
1518:  BC    152A
151A:  XORLW  FF
151C:  BNZ   1524
151E:  MOVF   x35,W
1520:  SUBLW  BF
1522:  BC    152A
.................... 		return 1;
1524:  MOVLW  01
1526:  MOVWF  01
1528:  BRA    152E
.................... 
.................... 	return 3;
152A:  MOVLW  03
152C:  MOVWF  01
152E:  MOVLB  0
1530:  GOTO   169C (RETURN)
.................... }
.................... 
.................... #include "param_dcswc_module_latching_contactor.c"
.................... #inline
.................... char xor_crc(char oldcrc, char data) {
.................... 	return oldcrc ^ data;
*
1714:  MOVF   x22,W
1716:  XORWF  x23,W
1718:  MOVWF  01
*
1762:  MOVF   x22,W
1764:  XORWF  x23,W
1766:  MOVWF  01
.................... }
.................... 
.................... char EEPROMDataRead( int16 address, int8 *data, int16 count ) {
*
16AC:  MOVLB  1
16AE:  CLRF   x1E
.................... 	char crc=0;
.................... 
.................... 	while ( count-- != 0 ) {
16B0:  MOVFF  11D,120
16B4:  MOVF   x1C,W
16B6:  BTFSC  FD8.2
16B8:  DECF   x1D,F
16BA:  DECF   x1C,F
16BC:  MOVWF  x1F
16BE:  MOVF   x1F,F
16C0:  BNZ   16C6
16C2:  MOVF   x20,F
16C4:  BZ    1726
.................... 		*data = read_eeprom( address++ );
16C6:  MOVFF  11B,03
16CA:  MOVF   x1A,W
16CC:  MOVWF  FE9
16CE:  MOVFF  03,FEA
16D2:  MOVF   x19,W
16D4:  MOVWF  03
16D6:  MOVF   x18,W
16D8:  INCF   x18,F
16DA:  BTFSC  FD8.2
16DC:  INCF   x19,F
16DE:  MOVWF  x21
16E0:  MOVFF  03,122
16E4:  MOVFF  FF2,123
16E8:  BCF    FF2.7
16EA:  MOVFF  121,FA9
16EE:  BCF    FA6.6
16F0:  BCF    FA6.7
16F2:  BSF    FA6.0
16F4:  MOVF   FA8,W
16F6:  BTFSC  x23.7
16F8:  BSF    FF2.7
16FA:  MOVWF  FEF
.................... 		crc = xor_crc(crc,*data);
16FC:  MOVFF  11B,03
1700:  MOVF   x1A,W
1702:  MOVWF  FE9
1704:  MOVFF  03,FEA
1708:  MOVFF  FEF,11F
170C:  MOVFF  11E,122
1710:  MOVFF  11F,123
*
171A:  MOVFF  01,11E
.................... 		data++;
171E:  INCF   x1A,F
1720:  BTFSC  FD8.2
1722:  INCF   x1B,F
1724:  BRA    16B0
.................... 	}
.................... 	return crc;
1726:  MOVFF  11E,01
172A:  MOVLB  0
172C:  GOTO   1958 (RETURN)
.................... }
.................... 
.................... char EEPROMDataWrite( int16 address, int8 *data, int16 count ) {
1730:  MOVLB  1
1732:  CLRF   x20
.................... 	char crc=0;
.................... 
.................... 	while ( count-- != 0 ) {
1734:  MOVFF  11F,122
1738:  MOVF   x1E,W
173A:  BTFSC  FD8.2
173C:  DECF   x1F,F
173E:  DECF   x1E,F
1740:  MOVWF  x21
1742:  MOVF   x21,F
1744:  BNZ   174A
1746:  MOVF   x22,F
1748:  BZ    17C2
.................... 		/* restart_wdt() */
.................... 		crc = xor_crc(crc,*data);
174A:  MOVFF  11D,03
174E:  MOVF   x1C,W
1750:  MOVWF  FE9
1752:  MOVFF  03,FEA
1756:  MOVFF  FEF,121
175A:  MOVFF  120,122
175E:  MOVFF  121,123
*
1768:  MOVFF  01,120
.................... 		write_eeprom( address++, *data++ );
176C:  MOVF   x1B,W
176E:  MOVWF  03
1770:  MOVF   x1A,W
1772:  INCF   x1A,F
1774:  BTFSC  FD8.2
1776:  INCF   x1B,F
1778:  MOVWF  x21
177A:  MOVFF  03,122
177E:  MOVF   x1D,W
1780:  MOVWF  03
1782:  MOVF   x1C,W
1784:  INCF   x1C,F
1786:  BTFSC  FD8.2
1788:  INCF   x1D,F
178A:  MOVWF  FE9
178C:  MOVFF  03,FEA
1790:  MOVFF  FEF,123
1794:  MOVF   FF2,W
1796:  MOVWF  00
1798:  BCF    FF2.7
179A:  MOVFF  121,FA9
179E:  MOVFF  123,FA8
17A2:  BCF    FA6.6
17A4:  BCF    FA6.7
17A6:  BSF    FA6.2
17A8:  MOVLB  F
17AA:  MOVLW  55
17AC:  MOVWF  FA7
17AE:  MOVLW  AA
17B0:  MOVWF  FA7
17B2:  BSF    FA6.1
17B4:  BTFSC  FA6.1
17B6:  BRA    17B4
17B8:  BCF    FA6.2
17BA:  MOVF   00,W
17BC:  IORWF  FF2,F
17BE:  MOVLB  1
17C0:  BRA    1734
.................... 	}
.................... 
.................... 	return crc;
17C2:  MOVFF  120,01
17C6:  MOVLB  0
17C8:  GOTO   17E8 (RETURN)
.................... }
.................... 
.................... void write_param_file() {
.................... 	int8 crc;
.................... 
.................... 	/* write the config structure */
.................... 	crc = EEPROMDataWrite(PARAM_ADDRESS,(void *)&config,sizeof(config));
17CC:  MOVLB  1
17CE:  MOVLW  1B
17D0:  MOVWF  x18
17D2:  CLRF   x1B
17D4:  MOVLW  02
17D6:  MOVWF  x1A
17D8:  CLRF   x1D
17DA:  MOVFF  118,11C
17DE:  CLRF   x1F
17E0:  MOVLW  48
17E2:  MOVWF  x1E
17E4:  MOVLB  0
17E6:  BRA    1730
17E8:  MOVFF  01,117
.................... 	/* write the CRC was calculated on the structure */
.................... 	write_eeprom(PARAM_CRC_ADDRESS,crc);
17EC:  MOVF   FF2,W
17EE:  MOVWF  00
17F0:  BCF    FF2.7
17F2:  CLRF   FA9
17F4:  MOVFF  117,FA8
17F8:  BCF    FA6.6
17FA:  BCF    FA6.7
17FC:  BSF    FA6.2
17FE:  MOVLB  F
1800:  MOVLW  55
1802:  MOVWF  FA7
1804:  MOVLW  AA
1806:  MOVWF  FA7
1808:  BSF    FA6.1
180A:  BTFSC  FA6.1
180C:  BRA    180A
180E:  BCF    FA6.2
1810:  MOVF   00,W
1812:  IORWF  FF2,F
1814:  MOVLB  0
1816:  RETURN 0
.................... }
.................... 
.................... void write_default_param_file() {
.................... 	int8 i;
.................... 
.................... 	current.default_params_written=1;
1818:  MOVLW  01
181A:  MOVWF  xCE
.................... 
.................... 	/* both LEDs on */
.................... 	timers.led_on_a=150;
181C:  MOVLW  96
181E:  MOVWF  xD0
.................... 	timers.led_on_b=150;
1820:  MOVWF  xD1
.................... 
.................... 
.................... 	for ( i=0 ; i<2 ; i++ ) {
1822:  MOVLB  1
1824:  CLRF   x16
1826:  MOVF   x16,W
1828:  SUBLW  01
182A:  BTFSS  FD8.0
182C:  BRA    1936
.................... 		config.ch[i].lvd_disconnect_adc=303;
182E:  MOVF   x16,W
1830:  MULLW  24
1832:  MOVF   FF3,W
1834:  CLRF   x18
1836:  MOVWF  x17
1838:  MOVLW  04
183A:  ADDWF  x17,W
183C:  MOVWF  01
183E:  MOVLW  00
1840:  ADDWFC x18,W
1842:  MOVWF  03
1844:  MOVF   01,W
1846:  ADDLW  1B
1848:  MOVWF  FE9
184A:  MOVLW  00
184C:  ADDWFC 03,W
184E:  MOVWF  FEA
1850:  MOVLW  01
1852:  MOVWF  FEC
1854:  MOVF   FED,F
1856:  MOVLW  2F
1858:  MOVWF  FEF
.................... 		config.ch[i].lvd_disconnect_delay=40;
185A:  MOVF   x16,W
185C:  MULLW  24
185E:  MOVF   FF3,W
1860:  CLRF   x18
1862:  MOVWF  x17
1864:  MOVLW  06
1866:  ADDWF  x17,W
1868:  MOVWF  01
186A:  MOVLW  00
186C:  ADDWFC x18,W
186E:  MOVWF  03
1870:  MOVF   01,W
1872:  ADDLW  1B
1874:  MOVWF  FE9
1876:  MOVLW  00
1878:  ADDWFC 03,W
187A:  MOVWF  FEA
187C:  CLRF   FEC
187E:  MOVF   FED,F
1880:  MOVLW  28
1882:  MOVWF  FEF
.................... 		config.ch[i].lvd_reconnect_adc=308;
1884:  MOVF   x16,W
1886:  MULLW  24
1888:  MOVF   FF3,W
188A:  CLRF   x18
188C:  MOVWF  x17
188E:  MOVLW  08
1890:  ADDWF  x17,W
1892:  MOVWF  01
1894:  MOVLW  00
1896:  ADDWFC x18,W
1898:  MOVWF  03
189A:  MOVF   01,W
189C:  ADDLW  1B
189E:  MOVWF  FE9
18A0:  MOVLW  00
18A2:  ADDWFC 03,W
18A4:  MOVWF  FEA
18A6:  MOVLW  01
18A8:  MOVWF  FEC
18AA:  MOVF   FED,F
18AC:  MOVLW  34
18AE:  MOVWF  FEF
.................... 
.................... 		config.ch[i].hvd_disconnect_adc=410;
18B0:  MOVF   x16,W
18B2:  MULLW  24
18B4:  MOVF   FF3,W
18B6:  CLRF   x18
18B8:  MOVWF  x17
18BA:  MOVLW  0C
18BC:  ADDWF  x17,W
18BE:  MOVWF  01
18C0:  MOVLW  00
18C2:  ADDWFC x18,W
18C4:  MOVWF  03
18C6:  MOVF   01,W
18C8:  ADDLW  1B
18CA:  MOVWF  FE9
18CC:  MOVLW  00
18CE:  ADDWFC 03,W
18D0:  MOVWF  FEA
18D2:  MOVLW  01
18D4:  MOVWF  FEC
18D6:  MOVF   FED,F
18D8:  MOVLW  9A
18DA:  MOVWF  FEF
.................... 		config.ch[i].hvd_disconnect_delay=15;
18DC:  MOVF   x16,W
18DE:  MULLW  24
18E0:  MOVF   FF3,W
18E2:  CLRF   x18
18E4:  MOVWF  x17
18E6:  MOVLW  0E
18E8:  ADDWF  x17,W
18EA:  MOVWF  01
18EC:  MOVLW  00
18EE:  ADDWFC x18,W
18F0:  MOVWF  03
18F2:  MOVF   01,W
18F4:  ADDLW  1B
18F6:  MOVWF  FE9
18F8:  MOVLW  00
18FA:  ADDWFC 03,W
18FC:  MOVWF  FEA
18FE:  CLRF   FEC
1900:  MOVF   FED,F
1902:  MOVLW  0F
1904:  MOVWF  FEF
.................... 		config.ch[i].hvd_reconnect_adc=385;
1906:  MOVF   x16,W
1908:  MULLW  24
190A:  MOVF   FF3,W
190C:  CLRF   x18
190E:  MOVWF  x17
1910:  MOVLW  10
1912:  ADDWF  x17,W
1914:  MOVWF  01
1916:  MOVLW  00
1918:  ADDWFC x18,W
191A:  MOVWF  03
191C:  MOVF   01,W
191E:  ADDLW  1B
1920:  MOVWF  FE9
1922:  MOVLW  00
1924:  ADDWFC 03,W
1926:  MOVWF  FEA
1928:  MOVLW  01
192A:  MOVWF  FEC
192C:  MOVF   FED,F
192E:  MOVLW  81
1930:  MOVWF  FEF
1932:  INCF   x16,F
1934:  BRA    1826
.................... 	}
.................... 	
.................... 	/* write them so next time we use from EEPROM */
.................... 	write_param_file();
1936:  MOVLB  0
1938:  RCALL  17CC
193A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... void read_param_file() {
.................... 	int8 crc;
.................... 
.................... 	crc = EEPROMDataRead(PARAM_ADDRESS, (void *)&config, sizeof(config)); 
193C:  MOVLB  1
193E:  MOVLW  1B
1940:  MOVWF  x16
1942:  CLRF   x19
1944:  MOVLW  02
1946:  MOVWF  x18
1948:  CLRF   x1B
194A:  MOVFF  116,11A
194E:  CLRF   x1D
1950:  MOVLW  48
1952:  MOVWF  x1C
1954:  MOVLB  0
1956:  BRA    16AC
1958:  MOVFF  01,115
.................... 		
.................... 	if ( crc != read_eeprom(PARAM_CRC_ADDRESS) ) {
195C:  MOVFF  FF2,116
1960:  BCF    FF2.7
1962:  CLRF   FA9
1964:  BCF    FA6.6
1966:  BCF    FA6.7
1968:  BSF    FA6.0
196A:  MOVF   FA8,W
196C:  MOVLB  1
196E:  BTFSC  x16.7
1970:  BSF    FF2.7
1972:  SUBWF  x15,W
1974:  BZ    197C
.................... 		write_default_param_file();
1976:  MOVLB  0
1978:  RCALL  1818
197A:  MOVLB  1
.................... 	}
197C:  MOVLB  0
197E:  GOTO   37AA (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #include "i2c_handler_dcswc_module_latching_contactor.c"
.................... #include "registers_dcswc_module_latching_contactor.h"
.................... 
.................... /* first two or three registers will give enough information for telemetry */
.................... /* 10 bit input voltage ADC averaged value */
.................... #define I2C_REG_VOLTAGE_INPUT_AVG             0  
.................... /* two 8 bit channel states (A is MSB / B is LSB) */
.................... #define I2C_REG_STATE_CONTACTORS              1 
.................... /* 10 bit NTC thermistor ADC averaged value */
.................... #define I2C_REG_TEMPERATURE_BOARD_AVG         2
.................... 
....................   
.................... /* channel 0 / A */
.................... /* command can only come from I2C interface */
.................... #define I2C_REG_CH0_COMMAND_ON                3 /* R/W seconds */
.................... #define I2C_REG_CH0_COMMAND_ON_HOLD           4
.................... 
.................... #define I2C_REG_CH0_COMMAND_OFF               5 /* R/W seconds */
.................... #define I2C_REG_CH0_COMMAND_OFF_HOLD          6
.................... 
.................... /* low voltage disconnect */
.................... #define I2C_REG_CH0_LVD_DISCONNECT            7  /* R seconds */
.................... #define I2C_REG_CH0_LVD_RECONNECT             8 
.................... 
.................... /* high voltage disconnect */
.................... #define I2C_REG_CH0_HVD_DISCONNECT            9 /* R seconds */
.................... #define I2C_REG_CH0_HVD_RECONNECT             10
.................... 
.................... /* low temperature disconnect */
.................... #define I2C_REG_CH0_LTD_DISCONNECT            11  /* R seconds */
.................... #define I2C_REG_CH0_LTD_RECONNECT             12
.................... 
.................... /* high temperature disconnect */
.................... #define I2C_REG_CH0_HTD_DISCONNECT            13 /* R seconds */
.................... #define I2C_REG_CH0_HTD_RECONNECT             14
.................... 
.................... /* reserved for future, unimplemented */
.................... #define I2C_REG_CH0_FUT_DISCONNECT            15 /* R seconds */
.................... #define I2C_REG_CH0_FUT_RECONNECT             16
.................... 
.................... /* channel 1 / B */
.................... /* command can only come from I2C interface */
.................... #define I2C_REG_CH1_COMMAND_ON                17 /* R/W seconds */
.................... #define I2C_REG_CH1_COMMAND_ON_HOLD           18
.................... 
.................... #define I2C_REG_CH1_COMMAND_OFF               19 /* R/W seconds */
.................... #define I2C_REG_CH1_COMMAND_OFF_HOLD          20
.................... 
.................... /* low voltage disconnect */
.................... #define I2C_REG_CH1_LVD_DISCONNECT            21 /* R seconds */
.................... #define I2C_REG_CH1_LVD_RECONNECT             22 
.................... 
.................... /* high voltage disconnect */
.................... #define I2C_REG_CH1_HVD_DISCONNECT            23 /* R seconds */
.................... #define I2C_REG_CH1_HVD_RECONNECT             24
.................... 
.................... /* low temperature disconnect */
.................... #define I2C_REG_CH1_LTD_DISCONNECT            25  /* R seconds */
.................... #define I2C_REG_CH1_LTD_RECONNECT             26
.................... 
.................... /* high temperature disconnect */
.................... #define I2C_REG_CH1_HTD_DISCONNECT            27 /* R seconds */
.................... #define I2C_REG_CH1_HTD_RECONNECT             28
.................... 
.................... /* reserved for future, unimplemented */
.................... #define I2C_REG_CH1_FUT_DISCONNECT            29 /* R seconds */
.................... #define I2C_REG_CH1_FUT_RECONNECT             30
.................... 
.................... /* meta */
.................... #define I2C_REG_SEQUENCE_NUMBER               31 /* R */
.................... #define I2C_REG_TIME_INTERVAL_MILLISECONDS    32
.................... #define I2C_REG_TIME_UPTIME_MINUTES           33
.................... #define I2C_REG_DEFAULT_PARAMS_WRITTEN        34
.................... 
.................... /* channel configuration */
.................... /* channel 0 / A */
.................... #define I2C_REG_CH0_COMMAND_ON_HOLD_INITIAL   64
.................... 
.................... #define I2C_REG_CH0_COMMAND_OFF_HOLD_INITIAL  65
.................... 
.................... #define I2C_REG_CH0_LVD_DISCONNECT_ADC        66
.................... #define I2C_REG_CH0_LVD_DISCONNECT_DELAY      67
.................... #define I2C_REG_CH0_LVD_RECONNECT_ADC         68
.................... #define I2C_REG_CH0_LVD_RECONNECT_DELAY       69
.................... 
.................... #define I2C_REG_CH0_HVD_DISCONNECT_ADC        70
.................... #define I2C_REG_CH0_HVD_DISCONNECT_DELAY      71
.................... #define I2C_REG_CH0_HVD_RECONNECT_ADC         72
.................... #define I2C_REG_CH0_HVD_RECONNECT_DELAY       73
.................... 
.................... #define I2C_REG_CH0_LTD_DISCONNECT_ADC        74
.................... #define I2C_REG_CH0_LTD_DISCONNECT_DELAY      75
.................... #define I2C_REG_CH0_LTD_RECONNECT_ADC         76
.................... #define I2C_REG_CH0_LTD_RECONNECT_DELAY       77
.................... 
.................... #define I2C_REG_CH0_HTD_DISCONNECT_ADC        78
.................... #define I2C_REG_CH0_HTD_DISCONNECT_DELAY      79
.................... #define I2C_REG_CH0_HTD_RECONNECT_ADC         80
.................... #define I2C_REG_CH0_HTD_RECONNECT_DELAY       81
.................... 
.................... #define I2C_REG_CH0_FUT_DISCONNECT_VALUE      82
.................... #define I2C_REG_CH0_FUT_DISCONNECT_DELAY      83
.................... #define I2C_REG_CH0_FUT_RECONNECT_VALUE       84
.................... #define I2C_REG_CH0_FUT_RECONNECT_DELAY       85
.................... 
.................... /* channel 1 / B */
.................... #define I2C_REG_CH1_COMMAND_ON_HOLD_INITIAL   86
.................... 
.................... #define I2C_REG_CH1_COMMAND_OFF_HOLD_INITIAL  87
.................... 
.................... #define I2C_REG_CH1_LVD_DISCONNECT_ADC        88
.................... #define I2C_REG_CH1_LVD_DISCONNECT_DELAY      89
.................... #define I2C_REG_CH1_LVD_RECONNECT_ADC         90
.................... #define I2C_REG_CH1_LVD_RECONNECT_DELAY       91
.................... 
.................... #define I2C_REG_CH1_HVD_DISCONNECT_ADC        92
.................... #define I2C_REG_CH1_HVD_DISCONNECT_DELAY      93
.................... #define I2C_REG_CH1_HVD_RECONNECT_ADC         94
.................... #define I2C_REG_CH1_HVD_RECONNECT_DELAY       95
.................... 
.................... #define I2C_REG_CH1_LTD_DISCONNECT_ADC        96
.................... #define I2C_REG_CH1_LTD_DISCONNECT_DELAY      97
.................... #define I2C_REG_CH1_LTD_RECONNECT_ADC         98
.................... #define I2C_REG_CH1_LTD_RECONNECT_DELAY       99
.................... 
.................... #define I2C_REG_CH1_HTD_DISCONNECT_ADC        100
.................... #define I2C_REG_CH1_HTD_DISCONNECT_DELAY      101
.................... #define I2C_REG_CH1_HTD_RECONNECT_ADC         102
.................... #define I2C_REG_CH1_HTD_RECONNECT_DELAY       103
.................... 
.................... #define I2C_REG_CH1_FUT_DISCONNECT_VALUE      104
.................... #define I2C_REG_CH1_FUT_DISCONNECT_DELAY      105
.................... #define I2C_REG_CH1_FUT_RECONNECT_VALUE       106
.................... #define I2C_REG_CH1_FUT_RECONNECT_DELAY       107
.................... 
.................... 
.................... /* configuration */
.................... #define I2C_REG_CONFIG_HARDWARE_MODEL              128 /* R */
.................... #define I2C_REG_CONFIG_HARDWARE_VERSION            129
.................... #define I2C_REG_CONFIG_SOFTWARE_MODEL              130
.................... #define I2C_REG_CONFIG_SOFTWARE_VERSION            131
.................... #define I2C_REG_CONFIG_SOFTWARE_YEAR               132
.................... #define I2C_REG_CONFIG_SOFTWARE_MONTH              133
.................... #define I2C_REG_CONFIG_SOFTWARE_DAY                134
.................... 
.................... #define I2C_REG_CONFIG_PARAM_WRITE                 135 /* R / W */
.................... 
.................... 
.................... 
.................... void write_i2c(int8 addr, int16 value) {
.................... 	int8 c;
.................... 
.................... 	/* c is the channel we are accessing based on register range */
.................... 	if ( addr >= I2C_REG_CH1_COMMAND_ON && addr <= I2C_REG_CH1_FUT_RECONNECT ) {
*
00DC:  MOVLB  1
00DE:  MOVF   x3D,W
00E0:  SUBLW  10
00E2:  BC    00F4
00E4:  MOVF   x3D,W
00E6:  SUBLW  1E
00E8:  BNC   00F4
.................... 		/* channel 1 status region */
.................... 		c=1;
00EA:  MOVLW  01
00EC:  MOVWF  x40
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON - I2C_REG_CH0_COMMAND_ON);
00EE:  MOVLW  0E
00F0:  SUBWF  x3D,F
.................... 	} else if ( addr >= I2C_REG_CH1_COMMAND_ON_HOLD && addr <= I2C_REG_CH1_FUT_RECONNECT_DELAY ) {
00F2:  BRA    010C
00F4:  MOVF   x3D,W
00F6:  SUBLW  11
00F8:  BC    010A
00FA:  MOVF   x3D,W
00FC:  SUBLW  6B
00FE:  BNC   010A
.................... 		/* channel 1 configuration region */
.................... 		c=1;
0100:  MOVLW  01
0102:  MOVWF  x40
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON_HOLD - I2C_REG_CH0_COMMAND_ON_HOLD );
0104:  MOVLW  0E
0106:  SUBWF  x3D,F
.................... 	} else {
0108:  BRA    010C
.................... 		c=0;
010A:  CLRF   x40
.................... 	}
.................... 
.................... 	switch ( addr ) {
010C:  MOVF   x3D,W
010E:  XORLW  03
0110:  MOVLB  0
0112:  BZ    018A
0114:  XORLW  07
0116:  BZ    01BA
0118:  XORLW  01
011A:  BZ    01EA
011C:  XORLW  03
011E:  BTFSC  FD8.2
0120:  BRA    021A
0122:  XORLW  44
0124:  BTFSC  FD8.2
0126:  BRA    024A
0128:  XORLW  01
012A:  BTFSC  FD8.2
012C:  BRA    027A
012E:  XORLW  07
0130:  BTFSC  FD8.2
0132:  BRA    02AA
0134:  XORLW  01
0136:  BTFSC  FD8.2
0138:  BRA    02DA
013A:  XORLW  03
013C:  BTFSC  FD8.2
013E:  BRA    030A
0140:  XORLW  01
0142:  BTFSC  FD8.2
0144:  BRA    033A
0146:  XORLW  0F
0148:  BTFSC  FD8.2
014A:  BRA    036A
014C:  XORLW  01
014E:  BTFSC  FD8.2
0150:  BRA    039A
0152:  XORLW  03
0154:  BTFSC  FD8.2
0156:  BRA    03CA
0158:  XORLW  01
015A:  BTFSC  FD8.2
015C:  BRA    03FA
015E:  XORLW  07
0160:  BTFSC  FD8.2
0162:  BRA    042A
0164:  XORLW  01
0166:  BTFSC  FD8.2
0168:  BRA    045A
016A:  XORLW  03
016C:  BTFSC  FD8.2
016E:  BRA    048A
0170:  XORLW  01
0172:  BTFSC  FD8.2
0174:  BRA    04BA
0176:  XORLW  1F
0178:  BTFSC  FD8.2
017A:  BRA    04EA
017C:  XORLW  01
017E:  BTFSC  FD8.2
0180:  BRA    051A
0182:  XORLW  D6
0184:  BTFSC  FD8.2
0186:  BRA    054A
0188:  BRA    0590
.................... 		case I2C_REG_CH0_COMMAND_ON:
.................... 			channel[c].command_on_seconds=value;
018A:  MOVLB  1
018C:  MOVF   x40,W
018E:  MULLW  19
0190:  MOVF   FF3,W
0192:  CLRF   x42
0194:  MOVWF  x41
0196:  MOVLW  01
0198:  ADDWF  x41,W
019A:  MOVWF  01
019C:  MOVLW  00
019E:  ADDWFC x42,W
01A0:  MOVWF  03
01A2:  MOVF   01,W
01A4:  ADDLW  D4
01A6:  MOVWF  FE9
01A8:  MOVLW  00
01AA:  ADDWFC 03,W
01AC:  MOVWF  FEA
01AE:  MOVFF  13F,FEC
01B2:  MOVF   FED,F
01B4:  MOVFF  13E,FEF
01B8:  MOVLB  0
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD:
.................... 			channel[c].command_on_hold_seconds=value;
01BA:  MOVLB  1
01BC:  MOVF   x40,W
01BE:  MULLW  19
01C0:  MOVF   FF3,W
01C2:  CLRF   x42
01C4:  MOVWF  x41
01C6:  MOVLW  03
01C8:  ADDWF  x41,W
01CA:  MOVWF  01
01CC:  MOVLW  00
01CE:  ADDWFC x42,W
01D0:  MOVWF  03
01D2:  MOVF   01,W
01D4:  ADDLW  D4
01D6:  MOVWF  FE9
01D8:  MOVLW  00
01DA:  ADDWFC 03,W
01DC:  MOVWF  FEA
01DE:  MOVFF  13F,FEC
01E2:  MOVF   FED,F
01E4:  MOVFF  13E,FEF
01E8:  MOVLB  0
.................... 	
.................... 		case I2C_REG_CH0_COMMAND_OFF:
.................... 			channel[c].command_off_seconds=value;
01EA:  MOVLB  1
01EC:  MOVF   x40,W
01EE:  MULLW  19
01F0:  MOVF   FF3,W
01F2:  CLRF   x42
01F4:  MOVWF  x41
01F6:  MOVLW  05
01F8:  ADDWF  x41,W
01FA:  MOVWF  01
01FC:  MOVLW  00
01FE:  ADDWFC x42,W
0200:  MOVWF  03
0202:  MOVF   01,W
0204:  ADDLW  D4
0206:  MOVWF  FE9
0208:  MOVLW  00
020A:  ADDWFC 03,W
020C:  MOVWF  FEA
020E:  MOVFF  13F,FEC
0212:  MOVF   FED,F
0214:  MOVFF  13E,FEF
0218:  MOVLB  0
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD:
.................... 			channel[c].command_off_hold_seconds=value;
021A:  MOVLB  1
021C:  MOVF   x40,W
021E:  MULLW  19
0220:  MOVF   FF3,W
0222:  CLRF   x42
0224:  MOVWF  x41
0226:  MOVLW  07
0228:  ADDWF  x41,W
022A:  MOVWF  01
022C:  MOVLW  00
022E:  ADDWFC x42,W
0230:  MOVWF  03
0232:  MOVF   01,W
0234:  ADDLW  D4
0236:  MOVWF  FE9
0238:  MOVLW  00
023A:  ADDWFC 03,W
023C:  MOVWF  FEA
023E:  MOVFF  13F,FEC
0242:  MOVF   FED,F
0244:  MOVFF  13E,FEF
0248:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_ADC:
.................... 			config.ch[c].lvd_disconnect_adc=value;
024A:  MOVLB  1
024C:  MOVF   x40,W
024E:  MULLW  24
0250:  MOVF   FF3,W
0252:  CLRF   x42
0254:  MOVWF  x41
0256:  MOVLW  04
0258:  ADDWF  x41,W
025A:  MOVWF  01
025C:  MOVLW  00
025E:  ADDWFC x42,W
0260:  MOVWF  03
0262:  MOVF   01,W
0264:  ADDLW  1B
0266:  MOVWF  FE9
0268:  MOVLW  00
026A:  ADDWFC 03,W
026C:  MOVWF  FEA
026E:  MOVFF  13F,FEC
0272:  MOVF   FED,F
0274:  MOVFF  13E,FEF
0278:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_DELAY:
.................... 			config.ch[c].lvd_disconnect_delay=value;
027A:  MOVLB  1
027C:  MOVF   x40,W
027E:  MULLW  24
0280:  MOVF   FF3,W
0282:  CLRF   x42
0284:  MOVWF  x41
0286:  MOVLW  06
0288:  ADDWF  x41,W
028A:  MOVWF  01
028C:  MOVLW  00
028E:  ADDWFC x42,W
0290:  MOVWF  03
0292:  MOVF   01,W
0294:  ADDLW  1B
0296:  MOVWF  FE9
0298:  MOVLW  00
029A:  ADDWFC 03,W
029C:  MOVWF  FEA
029E:  MOVFF  13F,FEC
02A2:  MOVF   FED,F
02A4:  MOVFF  13E,FEF
02A8:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_RECONNECT_ADC:
.................... 			config.ch[c].lvd_reconnect_adc=value;
02AA:  MOVLB  1
02AC:  MOVF   x40,W
02AE:  MULLW  24
02B0:  MOVF   FF3,W
02B2:  CLRF   x42
02B4:  MOVWF  x41
02B6:  MOVLW  08
02B8:  ADDWF  x41,W
02BA:  MOVWF  01
02BC:  MOVLW  00
02BE:  ADDWFC x42,W
02C0:  MOVWF  03
02C2:  MOVF   01,W
02C4:  ADDLW  1B
02C6:  MOVWF  FE9
02C8:  MOVLW  00
02CA:  ADDWFC 03,W
02CC:  MOVWF  FEA
02CE:  MOVFF  13F,FEC
02D2:  MOVF   FED,F
02D4:  MOVFF  13E,FEF
02D8:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_RECONNECT_DELAY:
.................... 			config.ch[c].lvd_reconnect_delay=value;
02DA:  MOVLB  1
02DC:  MOVF   x40,W
02DE:  MULLW  24
02E0:  MOVF   FF3,W
02E2:  CLRF   x42
02E4:  MOVWF  x41
02E6:  MOVLW  0A
02E8:  ADDWF  x41,W
02EA:  MOVWF  01
02EC:  MOVLW  00
02EE:  ADDWFC x42,W
02F0:  MOVWF  03
02F2:  MOVF   01,W
02F4:  ADDLW  1B
02F6:  MOVWF  FE9
02F8:  MOVLW  00
02FA:  ADDWFC 03,W
02FC:  MOVWF  FEA
02FE:  MOVFF  13F,FEC
0302:  MOVF   FED,F
0304:  MOVFF  13E,FEF
0308:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_ADC:
.................... 			config.ch[c].hvd_disconnect_adc=value;
030A:  MOVLB  1
030C:  MOVF   x40,W
030E:  MULLW  24
0310:  MOVF   FF3,W
0312:  CLRF   x42
0314:  MOVWF  x41
0316:  MOVLW  0C
0318:  ADDWF  x41,W
031A:  MOVWF  01
031C:  MOVLW  00
031E:  ADDWFC x42,W
0320:  MOVWF  03
0322:  MOVF   01,W
0324:  ADDLW  1B
0326:  MOVWF  FE9
0328:  MOVLW  00
032A:  ADDWFC 03,W
032C:  MOVWF  FEA
032E:  MOVFF  13F,FEC
0332:  MOVF   FED,F
0334:  MOVFF  13E,FEF
0338:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_DELAY:
.................... 			config.ch[c].hvd_disconnect_delay=value;
033A:  MOVLB  1
033C:  MOVF   x40,W
033E:  MULLW  24
0340:  MOVF   FF3,W
0342:  CLRF   x42
0344:  MOVWF  x41
0346:  MOVLW  0E
0348:  ADDWF  x41,W
034A:  MOVWF  01
034C:  MOVLW  00
034E:  ADDWFC x42,W
0350:  MOVWF  03
0352:  MOVF   01,W
0354:  ADDLW  1B
0356:  MOVWF  FE9
0358:  MOVLW  00
035A:  ADDWFC 03,W
035C:  MOVWF  FEA
035E:  MOVFF  13F,FEC
0362:  MOVF   FED,F
0364:  MOVFF  13E,FEF
0368:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_RECONNECT_ADC:
.................... 			config.ch[c].hvd_reconnect_adc=value;
036A:  MOVLB  1
036C:  MOVF   x40,W
036E:  MULLW  24
0370:  MOVF   FF3,W
0372:  CLRF   x42
0374:  MOVWF  x41
0376:  MOVLW  10
0378:  ADDWF  x41,W
037A:  MOVWF  01
037C:  MOVLW  00
037E:  ADDWFC x42,W
0380:  MOVWF  03
0382:  MOVF   01,W
0384:  ADDLW  1B
0386:  MOVWF  FE9
0388:  MOVLW  00
038A:  ADDWFC 03,W
038C:  MOVWF  FEA
038E:  MOVFF  13F,FEC
0392:  MOVF   FED,F
0394:  MOVFF  13E,FEF
0398:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_RECONNECT_DELAY:
.................... 			config.ch[c].hvd_reconnect_delay=value;
039A:  MOVLB  1
039C:  MOVF   x40,W
039E:  MULLW  24
03A0:  MOVF   FF3,W
03A2:  CLRF   x42
03A4:  MOVWF  x41
03A6:  MOVLW  12
03A8:  ADDWF  x41,W
03AA:  MOVWF  01
03AC:  MOVLW  00
03AE:  ADDWFC x42,W
03B0:  MOVWF  03
03B2:  MOVF   01,W
03B4:  ADDLW  1B
03B6:  MOVWF  FE9
03B8:  MOVLW  00
03BA:  ADDWFC 03,W
03BC:  MOVWF  FEA
03BE:  MOVFF  13F,FEC
03C2:  MOVF   FED,F
03C4:  MOVFF  13E,FEF
03C8:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_ADC:
.................... 			config.ch[c].ltd_disconnect_adc=value;
03CA:  MOVLB  1
03CC:  MOVF   x40,W
03CE:  MULLW  24
03D0:  MOVF   FF3,W
03D2:  CLRF   x42
03D4:  MOVWF  x41
03D6:  MOVLW  14
03D8:  ADDWF  x41,W
03DA:  MOVWF  01
03DC:  MOVLW  00
03DE:  ADDWFC x42,W
03E0:  MOVWF  03
03E2:  MOVF   01,W
03E4:  ADDLW  1B
03E6:  MOVWF  FE9
03E8:  MOVLW  00
03EA:  ADDWFC 03,W
03EC:  MOVWF  FEA
03EE:  MOVFF  13F,FEC
03F2:  MOVF   FED,F
03F4:  MOVFF  13E,FEF
03F8:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_DELAY:
.................... 			config.ch[c].ltd_disconnect_delay=value;
03FA:  MOVLB  1
03FC:  MOVF   x40,W
03FE:  MULLW  24
0400:  MOVF   FF3,W
0402:  CLRF   x42
0404:  MOVWF  x41
0406:  MOVLW  16
0408:  ADDWF  x41,W
040A:  MOVWF  01
040C:  MOVLW  00
040E:  ADDWFC x42,W
0410:  MOVWF  03
0412:  MOVF   01,W
0414:  ADDLW  1B
0416:  MOVWF  FE9
0418:  MOVLW  00
041A:  ADDWFC 03,W
041C:  MOVWF  FEA
041E:  MOVFF  13F,FEC
0422:  MOVF   FED,F
0424:  MOVFF  13E,FEF
0428:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_RECONNECT_ADC:
.................... 			config.ch[c].ltd_reconnect_adc=value;
042A:  MOVLB  1
042C:  MOVF   x40,W
042E:  MULLW  24
0430:  MOVF   FF3,W
0432:  CLRF   x42
0434:  MOVWF  x41
0436:  MOVLW  18
0438:  ADDWF  x41,W
043A:  MOVWF  01
043C:  MOVLW  00
043E:  ADDWFC x42,W
0440:  MOVWF  03
0442:  MOVF   01,W
0444:  ADDLW  1B
0446:  MOVWF  FE9
0448:  MOVLW  00
044A:  ADDWFC 03,W
044C:  MOVWF  FEA
044E:  MOVFF  13F,FEC
0452:  MOVF   FED,F
0454:  MOVFF  13E,FEF
0458:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_RECONNECT_DELAY:
.................... 			config.ch[c].ltd_reconnect_delay=value;
045A:  MOVLB  1
045C:  MOVF   x40,W
045E:  MULLW  24
0460:  MOVF   FF3,W
0462:  CLRF   x42
0464:  MOVWF  x41
0466:  MOVLW  1A
0468:  ADDWF  x41,W
046A:  MOVWF  01
046C:  MOVLW  00
046E:  ADDWFC x42,W
0470:  MOVWF  03
0472:  MOVF   01,W
0474:  ADDLW  1B
0476:  MOVWF  FE9
0478:  MOVLW  00
047A:  ADDWFC 03,W
047C:  MOVWF  FEA
047E:  MOVFF  13F,FEC
0482:  MOVF   FED,F
0484:  MOVFF  13E,FEF
0488:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_ADC:
.................... 			config.ch[c].htd_disconnect_adc=value;
048A:  MOVLB  1
048C:  MOVF   x40,W
048E:  MULLW  24
0490:  MOVF   FF3,W
0492:  CLRF   x42
0494:  MOVWF  x41
0496:  MOVLW  1C
0498:  ADDWF  x41,W
049A:  MOVWF  01
049C:  MOVLW  00
049E:  ADDWFC x42,W
04A0:  MOVWF  03
04A2:  MOVF   01,W
04A4:  ADDLW  1B
04A6:  MOVWF  FE9
04A8:  MOVLW  00
04AA:  ADDWFC 03,W
04AC:  MOVWF  FEA
04AE:  MOVFF  13F,FEC
04B2:  MOVF   FED,F
04B4:  MOVFF  13E,FEF
04B8:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_DELAY:
.................... 			config.ch[c].htd_disconnect_delay=value;
04BA:  MOVLB  1
04BC:  MOVF   x40,W
04BE:  MULLW  24
04C0:  MOVF   FF3,W
04C2:  CLRF   x42
04C4:  MOVWF  x41
04C6:  MOVLW  1E
04C8:  ADDWF  x41,W
04CA:  MOVWF  01
04CC:  MOVLW  00
04CE:  ADDWFC x42,W
04D0:  MOVWF  03
04D2:  MOVF   01,W
04D4:  ADDLW  1B
04D6:  MOVWF  FE9
04D8:  MOVLW  00
04DA:  ADDWFC 03,W
04DC:  MOVWF  FEA
04DE:  MOVFF  13F,FEC
04E2:  MOVF   FED,F
04E4:  MOVFF  13E,FEF
04E8:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_RECONNECT_ADC:
.................... 			config.ch[c].htd_reconnect_adc=value;
04EA:  MOVLB  1
04EC:  MOVF   x40,W
04EE:  MULLW  24
04F0:  MOVF   FF3,W
04F2:  CLRF   x42
04F4:  MOVWF  x41
04F6:  MOVLW  20
04F8:  ADDWF  x41,W
04FA:  MOVWF  01
04FC:  MOVLW  00
04FE:  ADDWFC x42,W
0500:  MOVWF  03
0502:  MOVF   01,W
0504:  ADDLW  1B
0506:  MOVWF  FE9
0508:  MOVLW  00
050A:  ADDWFC 03,W
050C:  MOVWF  FEA
050E:  MOVFF  13F,FEC
0512:  MOVF   FED,F
0514:  MOVFF  13E,FEF
0518:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_RECONNECT_DELAY:
.................... 			config.ch[c].htd_reconnect_delay=value;
051A:  MOVLB  1
051C:  MOVF   x40,W
051E:  MULLW  24
0520:  MOVF   FF3,W
0522:  CLRF   x42
0524:  MOVWF  x41
0526:  MOVLW  22
0528:  ADDWF  x41,W
052A:  MOVWF  01
052C:  MOVLW  00
052E:  ADDWFC x42,W
0530:  MOVWF  03
0532:  MOVF   01,W
0534:  ADDLW  1B
0536:  MOVWF  FE9
0538:  MOVLW  00
053A:  ADDWFC 03,W
053C:  MOVWF  FEA
053E:  MOVFF  13F,FEC
0542:  MOVF   FED,F
0544:  MOVFF  13E,FEF
0548:  MOVLB  0
.................... 
.................... 		/* don't need to implement FUT ... there is nowhere for it to go anyhow */
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			if ( 1 == value ) {
054A:  MOVLB  1
054C:  DECFSZ x3E,W
054E:  BRA    055C
0550:  MOVF   x3F,F
0552:  BNZ   055C
.................... 				timers.now_write_config=1;
0554:  MOVLB  0
0556:  BSF    xCF.3
.................... 			} else if ( 2 == value ) {
0558:  BRA    0590
055A:  MOVLB  1
055C:  MOVF   x3E,W
055E:  SUBLW  02
0560:  BNZ   056E
0562:  MOVF   x3F,F
0564:  BNZ   056E
.................... 				timers.now_reset_config=1;
0566:  MOVLB  0
0568:  BSF    xCF.4
.................... 			} else if ( 1802 == value ) {
056A:  BRA    0590
056C:  MOVLB  1
056E:  MOVF   x3E,W
0570:  SUBLW  0A
0572:  BNZ   0584
0574:  MOVF   x3F,W
0576:  SUBLW  07
0578:  BNZ   0584
.................... 				current.factory_unlocked =1;
057A:  MOVLW  01
057C:  MOVLB  0
057E:  MOVWF  xCA
.................... 			} else if ( 65535 == value ) {
0580:  BRA    0590
0582:  MOVLB  1
0584:  INCFSZ x3E,W
0586:  BRA    058E
0588:  INCFSZ x3F,W
058A:  BRA    058E
.................... 				reset_cpu();
058C:  RESET
058E:  MOVLB  0
.................... 			}
.................... 			break;
.................... 		default:
.................... 			/* do nothing */
.................... 	}
0590:  GOTO   0F1C (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... int16 map_i2c(int8 addr) {
.................... 	int8 c;
.................... 
.................... 	/* c is the channel we are accessing based on register range */
.................... 	if ( addr >= I2C_REG_CH1_COMMAND_ON && addr <= I2C_REG_CH1_FUT_RECONNECT ) {
*
0614:  MOVLB  1
0616:  MOVF   x3B,W
0618:  SUBLW  10
061A:  BC    062C
061C:  MOVF   x3B,W
061E:  SUBLW  1E
0620:  BNC   062C
.................... 		/* channel 1 status region */
.................... 		c=1;
0622:  MOVLW  01
0624:  MOVWF  x3C
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON - I2C_REG_CH0_COMMAND_ON);
0626:  MOVLW  0E
0628:  SUBWF  x3B,F
.................... 	} else if ( addr >= I2C_REG_CH1_COMMAND_ON_HOLD && addr <= I2C_REG_CH1_FUT_RECONNECT_DELAY ) {
062A:  BRA    0644
062C:  MOVF   x3B,W
062E:  SUBLW  11
0630:  BC    0642
0632:  MOVF   x3B,W
0634:  SUBLW  6B
0636:  BNC   0642
.................... 		/* channel 1 configuration region */
.................... 		c=1;
0638:  MOVLW  01
063A:  MOVWF  x3C
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON_HOLD - I2C_REG_CH0_COMMAND_ON_HOLD );
063C:  MOVLW  0E
063E:  SUBWF  x3B,F
.................... 	} else {
0640:  BRA    0644
.................... 		c=0;
0642:  CLRF   x3C
.................... 	}
.................... 
.................... 	timers.led_on_a=100;
0644:  MOVLW  64
0646:  MOVLB  0
0648:  MOVWF  xD0
.................... 
.................... 	switch ( addr ) {
064A:  MOVLB  1
064C:  MOVF   x3B,W
064E:  XORLW  00
0650:  MOVLB  0
0652:  BTFSC  FD8.2
0654:  BRA    0784
0656:  XORLW  01
0658:  BTFSC  FD8.2
065A:  BRA    0790
065C:  XORLW  03
065E:  BTFSC  FD8.2
0660:  BRA    079E
0662:  XORLW  01
0664:  BTFSC  FD8.2
0666:  BRA    07AC
0668:  XORLW  07
066A:  BTFSC  FD8.2
066C:  BRA    07E2
066E:  XORLW  01
0670:  BTFSC  FD8.2
0672:  BRA    0818
0674:  XORLW  03
0676:  BTFSC  FD8.2
0678:  BRA    084E
067A:  XORLW  01
067C:  BTFSC  FD8.2
067E:  BRA    0884
0680:  XORLW  0F
0682:  BTFSC  FD8.2
0684:  BRA    08BA
0686:  XORLW  01
0688:  BTFSC  FD8.2
068A:  BRA    08F0
068C:  XORLW  03
068E:  BTFSC  FD8.2
0690:  BRA    0926
0692:  XORLW  01
0694:  BTFSC  FD8.2
0696:  BRA    095C
0698:  XORLW  07
069A:  BTFSC  FD8.2
069C:  BRA    0992
069E:  XORLW  01
06A0:  BTFSC  FD8.2
06A2:  BRA    09C8
06A4:  XORLW  03
06A6:  BTFSC  FD8.2
06A8:  BRA    09FE
06AA:  XORLW  01
06AC:  BTFSC  FD8.2
06AE:  BRA    0A34
06B0:  XORLW  1F
06B2:  BTFSC  FD8.2
06B4:  BRA    0A34
06B6:  XORLW  0F
06B8:  BTFSC  FD8.2
06BA:  BRA    0A3C
06BC:  XORLW  3F
06BE:  BTFSC  FD8.2
06C0:  BRA    0A46
06C2:  XORLW  01
06C4:  BTFSC  FD8.2
06C6:  BRA    0A50
06C8:  XORLW  03
06CA:  BTFSC  FD8.2
06CC:  BRA    0A5A
06CE:  XORLW  62
06D0:  BTFSC  FD8.2
06D2:  BRA    0A62
06D4:  XORLW  01
06D6:  BTFSC  FD8.2
06D8:  BRA    0A8C
06DA:  XORLW  03
06DC:  BTFSC  FD8.2
06DE:  BRA    0AC2
06E0:  XORLW  01
06E2:  BTFSC  FD8.2
06E4:  BRA    0AF8
06E6:  XORLW  07
06E8:  BTFSC  FD8.2
06EA:  BRA    0B2E
06EC:  XORLW  01
06EE:  BTFSC  FD8.2
06F0:  BRA    0B64
06F2:  XORLW  03
06F4:  BTFSC  FD8.2
06F6:  BRA    0B9A
06F8:  XORLW  01
06FA:  BTFSC  FD8.2
06FC:  BRA    0BD0
06FE:  XORLW  0F
0700:  BTFSC  FD8.2
0702:  BRA    0C06
0704:  XORLW  01
0706:  BTFSC  FD8.2
0708:  BRA    0C3C
070A:  XORLW  03
070C:  BTFSC  FD8.2
070E:  BRA    0C72
0710:  XORLW  01
0712:  BTFSC  FD8.2
0714:  BRA    0CA8
0716:  XORLW  07
0718:  BTFSC  FD8.2
071A:  BRA    0CDE
071C:  XORLW  01
071E:  BTFSC  FD8.2
0720:  BRA    0D14
0722:  XORLW  03
0724:  BTFSC  FD8.2
0726:  BRA    0D4A
0728:  XORLW  01
072A:  BTFSC  FD8.2
072C:  BRA    0D80
072E:  XORLW  1F
0730:  BTFSC  FD8.2
0732:  BRA    0DB6
0734:  XORLW  01
0736:  BTFSC  FD8.2
0738:  BRA    0DEC
073A:  XORLW  03
073C:  BTFSC  FD8.2
073E:  BRA    0E22
0740:  XORLW  01
0742:  BTFSC  FD8.2
0744:  BRA    0E22
0746:  XORLW  07
0748:  BTFSC  FD8.2
074A:  BRA    0E22
074C:  XORLW  01
074E:  BTFSC  FD8.2
0750:  BRA    0E22
0752:  XORLW  D5
0754:  BTFSC  FD8.2
0756:  BRA    0E2A
0758:  XORLW  01
075A:  BTFSC  FD8.2
075C:  BRA    0E34
075E:  XORLW  03
0760:  BTFSC  FD8.2
0762:  BRA    0E3E
0764:  XORLW  01
0766:  BTFSC  FD8.2
0768:  BRA    0E48
076A:  XORLW  07
076C:  BTFSC  FD8.2
076E:  BRA    0E52
0770:  XORLW  01
0772:  BTFSC  FD8.2
0774:  BRA    0E5A
0776:  XORLW  03
0778:  BTFSC  FD8.2
077A:  BRA    0E62
077C:  XORLW  01
077E:  BTFSC  FD8.2
0780:  BRA    0E6A
0782:  BRA    0E72
.................... 		/* not channel based */
.................... 		case I2C_REG_VOLTAGE_INPUT_AVG: 
.................... 			return (int16) adc_get(0);
0784:  MOVLB  1
0786:  CLRF   x3D
0788:  MOVLB  0
078A:  RCALL  0594
078C:  MOVF   02,W
078E:  BRA    0E78
.................... 		case I2C_REG_STATE_CONTACTORS:
.................... 			return (int16) make16(channel[0].state,channel[1].state);
0790:  MOVFF  D4,03
0794:  MOVFF  ED,01
0798:  MOVFF  D4,02
079C:  BRA    0E78
.................... 		case I2C_REG_TEMPERATURE_BOARD_AVG: 
.................... 			return (int16) adc_get(1);
079E:  MOVLW  01
07A0:  MOVLB  1
07A2:  MOVWF  x3D
07A4:  MOVLB  0
07A6:  RCALL  0594
07A8:  MOVF   02,W
07AA:  BRA    0E78
.................... 
.................... 		/* status based on channel value c */
.................... 		case I2C_REG_CH0_COMMAND_ON :
.................... 			return (int16) channel[c].command_on_seconds;
07AC:  MOVLB  1
07AE:  MOVF   x3C,W
07B0:  MULLW  19
07B2:  MOVF   FF3,W
07B4:  CLRF   x3E
07B6:  MOVWF  x3D
07B8:  MOVLW  01
07BA:  ADDWF  x3D,W
07BC:  MOVWF  01
07BE:  MOVLW  00
07C0:  ADDWFC x3E,W
07C2:  MOVWF  03
07C4:  MOVF   01,W
07C6:  ADDLW  D4
07C8:  MOVWF  FE9
07CA:  MOVLW  00
07CC:  ADDWFC 03,W
07CE:  MOVWF  FEA
07D0:  MOVFF  FEC,03
07D4:  MOVF   FED,F
07D6:  MOVFF  FEF,01
07DA:  MOVFF  03,02
07DE:  MOVLB  0
07E0:  BRA    0E78
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD:
.................... 			return (int16) channel[c].command_on_hold_seconds;
07E2:  MOVLB  1
07E4:  MOVF   x3C,W
07E6:  MULLW  19
07E8:  MOVF   FF3,W
07EA:  CLRF   x3E
07EC:  MOVWF  x3D
07EE:  MOVLW  03
07F0:  ADDWF  x3D,W
07F2:  MOVWF  01
07F4:  MOVLW  00
07F6:  ADDWFC x3E,W
07F8:  MOVWF  03
07FA:  MOVF   01,W
07FC:  ADDLW  D4
07FE:  MOVWF  FE9
0800:  MOVLW  00
0802:  ADDWFC 03,W
0804:  MOVWF  FEA
0806:  MOVFF  FEC,03
080A:  MOVF   FED,F
080C:  MOVFF  FEF,01
0810:  MOVFF  03,02
0814:  MOVLB  0
0816:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_COMMAND_OFF:
.................... 			return (int16) channel[c].command_off_seconds;
0818:  MOVLB  1
081A:  MOVF   x3C,W
081C:  MULLW  19
081E:  MOVF   FF3,W
0820:  CLRF   x3E
0822:  MOVWF  x3D
0824:  MOVLW  05
0826:  ADDWF  x3D,W
0828:  MOVWF  01
082A:  MOVLW  00
082C:  ADDWFC x3E,W
082E:  MOVWF  03
0830:  MOVF   01,W
0832:  ADDLW  D4
0834:  MOVWF  FE9
0836:  MOVLW  00
0838:  ADDWFC 03,W
083A:  MOVWF  FEA
083C:  MOVFF  FEC,03
0840:  MOVF   FED,F
0842:  MOVFF  FEF,01
0846:  MOVFF  03,02
084A:  MOVLB  0
084C:  BRA    0E78
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD:
.................... 			return (int16) channel[c].command_off_hold_seconds;
084E:  MOVLB  1
0850:  MOVF   x3C,W
0852:  MULLW  19
0854:  MOVF   FF3,W
0856:  CLRF   x3E
0858:  MOVWF  x3D
085A:  MOVLW  07
085C:  ADDWF  x3D,W
085E:  MOVWF  01
0860:  MOVLW  00
0862:  ADDWFC x3E,W
0864:  MOVWF  03
0866:  MOVF   01,W
0868:  ADDLW  D4
086A:  MOVWF  FE9
086C:  MOVLW  00
086E:  ADDWFC 03,W
0870:  MOVWF  FEA
0872:  MOVFF  FEC,03
0876:  MOVF   FED,F
0878:  MOVFF  FEF,01
087C:  MOVFF  03,02
0880:  MOVLB  0
0882:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT:
.................... 			return (int16) channel[c].lvd_disconnect_delay_seconds;
0884:  MOVLB  1
0886:  MOVF   x3C,W
0888:  MULLW  19
088A:  MOVF   FF3,W
088C:  CLRF   x3E
088E:  MOVWF  x3D
0890:  MOVLW  09
0892:  ADDWF  x3D,W
0894:  MOVWF  01
0896:  MOVLW  00
0898:  ADDWFC x3E,W
089A:  MOVWF  03
089C:  MOVF   01,W
089E:  ADDLW  D4
08A0:  MOVWF  FE9
08A2:  MOVLW  00
08A4:  ADDWFC 03,W
08A6:  MOVWF  FEA
08A8:  MOVFF  FEC,03
08AC:  MOVF   FED,F
08AE:  MOVFF  FEF,01
08B2:  MOVFF  03,02
08B6:  MOVLB  0
08B8:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT:
.................... 			return (int16) channel[c].lvd_reconnect_delay_seconds;
08BA:  MOVLB  1
08BC:  MOVF   x3C,W
08BE:  MULLW  19
08C0:  MOVF   FF3,W
08C2:  CLRF   x3E
08C4:  MOVWF  x3D
08C6:  MOVLW  0B
08C8:  ADDWF  x3D,W
08CA:  MOVWF  01
08CC:  MOVLW  00
08CE:  ADDWFC x3E,W
08D0:  MOVWF  03
08D2:  MOVF   01,W
08D4:  ADDLW  D4
08D6:  MOVWF  FE9
08D8:  MOVLW  00
08DA:  ADDWFC 03,W
08DC:  MOVWF  FEA
08DE:  MOVFF  FEC,03
08E2:  MOVF   FED,F
08E4:  MOVFF  FEF,01
08E8:  MOVFF  03,02
08EC:  MOVLB  0
08EE:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT:
.................... 			return (int16) channel[c].hvd_disconnect_delay_seconds;
08F0:  MOVLB  1
08F2:  MOVF   x3C,W
08F4:  MULLW  19
08F6:  MOVF   FF3,W
08F8:  CLRF   x3E
08FA:  MOVWF  x3D
08FC:  MOVLW  0D
08FE:  ADDWF  x3D,W
0900:  MOVWF  01
0902:  MOVLW  00
0904:  ADDWFC x3E,W
0906:  MOVWF  03
0908:  MOVF   01,W
090A:  ADDLW  D4
090C:  MOVWF  FE9
090E:  MOVLW  00
0910:  ADDWFC 03,W
0912:  MOVWF  FEA
0914:  MOVFF  FEC,03
0918:  MOVF   FED,F
091A:  MOVFF  FEF,01
091E:  MOVFF  03,02
0922:  MOVLB  0
0924:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT:
.................... 			return (int16) channel[c].hvd_reconnect_delay_seconds;
0926:  MOVLB  1
0928:  MOVF   x3C,W
092A:  MULLW  19
092C:  MOVF   FF3,W
092E:  CLRF   x3E
0930:  MOVWF  x3D
0932:  MOVLW  0F
0934:  ADDWF  x3D,W
0936:  MOVWF  01
0938:  MOVLW  00
093A:  ADDWFC x3E,W
093C:  MOVWF  03
093E:  MOVF   01,W
0940:  ADDLW  D4
0942:  MOVWF  FE9
0944:  MOVLW  00
0946:  ADDWFC 03,W
0948:  MOVWF  FEA
094A:  MOVFF  FEC,03
094E:  MOVF   FED,F
0950:  MOVFF  FEF,01
0954:  MOVFF  03,02
0958:  MOVLB  0
095A:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT:
.................... 			return (int16) channel[c].ltd_disconnect_delay_seconds;
095C:  MOVLB  1
095E:  MOVF   x3C,W
0960:  MULLW  19
0962:  MOVF   FF3,W
0964:  CLRF   x3E
0966:  MOVWF  x3D
0968:  MOVLW  11
096A:  ADDWF  x3D,W
096C:  MOVWF  01
096E:  MOVLW  00
0970:  ADDWFC x3E,W
0972:  MOVWF  03
0974:  MOVF   01,W
0976:  ADDLW  D4
0978:  MOVWF  FE9
097A:  MOVLW  00
097C:  ADDWFC 03,W
097E:  MOVWF  FEA
0980:  MOVFF  FEC,03
0984:  MOVF   FED,F
0986:  MOVFF  FEF,01
098A:  MOVFF  03,02
098E:  MOVLB  0
0990:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT:
.................... 			return (int16) channel[c].ltd_reconnect_delay_seconds;
0992:  MOVLB  1
0994:  MOVF   x3C,W
0996:  MULLW  19
0998:  MOVF   FF3,W
099A:  CLRF   x3E
099C:  MOVWF  x3D
099E:  MOVLW  13
09A0:  ADDWF  x3D,W
09A2:  MOVWF  01
09A4:  MOVLW  00
09A6:  ADDWFC x3E,W
09A8:  MOVWF  03
09AA:  MOVF   01,W
09AC:  ADDLW  D4
09AE:  MOVWF  FE9
09B0:  MOVLW  00
09B2:  ADDWFC 03,W
09B4:  MOVWF  FEA
09B6:  MOVFF  FEC,03
09BA:  MOVF   FED,F
09BC:  MOVFF  FEF,01
09C0:  MOVFF  03,02
09C4:  MOVLB  0
09C6:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT:
.................... 			return (int16) channel[c].htd_disconnect_delay_seconds;
09C8:  MOVLB  1
09CA:  MOVF   x3C,W
09CC:  MULLW  19
09CE:  MOVF   FF3,W
09D0:  CLRF   x3E
09D2:  MOVWF  x3D
09D4:  MOVLW  15
09D6:  ADDWF  x3D,W
09D8:  MOVWF  01
09DA:  MOVLW  00
09DC:  ADDWFC x3E,W
09DE:  MOVWF  03
09E0:  MOVF   01,W
09E2:  ADDLW  D4
09E4:  MOVWF  FE9
09E6:  MOVLW  00
09E8:  ADDWFC 03,W
09EA:  MOVWF  FEA
09EC:  MOVFF  FEC,03
09F0:  MOVF   FED,F
09F2:  MOVFF  FEF,01
09F6:  MOVFF  03,02
09FA:  MOVLB  0
09FC:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT:
.................... 			return (int16) channel[c].htd_reconnect_delay_seconds;
09FE:  MOVLB  1
0A00:  MOVF   x3C,W
0A02:  MULLW  19
0A04:  MOVF   FF3,W
0A06:  CLRF   x3E
0A08:  MOVWF  x3D
0A0A:  MOVLW  17
0A0C:  ADDWF  x3D,W
0A0E:  MOVWF  01
0A10:  MOVLW  00
0A12:  ADDWFC x3E,W
0A14:  MOVWF  03
0A16:  MOVF   01,W
0A18:  ADDLW  D4
0A1A:  MOVWF  FE9
0A1C:  MOVLW  00
0A1E:  ADDWFC 03,W
0A20:  MOVWF  FEA
0A22:  MOVFF  FEC,03
0A26:  MOVF   FED,F
0A28:  MOVFF  FEF,01
0A2C:  MOVFF  03,02
0A30:  MOVLB  0
0A32:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_FUT_DISCONNECT:
.................... 		case I2C_REG_CH0_FUT_RECONNECT:
.................... 			return (int16) 0xffff; /* not yet implemented */
0A34:  MOVLW  FF
0A36:  MOVWF  01
0A38:  MOVWF  02
0A3A:  BRA    0E78
.................... 
.................... 
.................... 		/* non-channel based meta */
.................... 		case I2C_REG_SEQUENCE_NUMBER:
.................... 			return (int16) current.sequence_number;
0A3C:  MOVFF  C4,01
0A40:  MOVFF  C5,02
0A44:  BRA    0E78
.................... 		case I2C_REG_TIME_INTERVAL_MILLISECONDS:
.................... 			return (int16) current.interval_milliseconds;
0A46:  MOVFF  C8,01
0A4A:  MOVFF  C9,02
0A4E:  BRA    0E78
.................... 		case I2C_REG_TIME_UPTIME_MINUTES:
.................... 			return (int16) current.uptime_minutes;
0A50:  MOVFF  C6,01
0A54:  MOVFF  C7,02
0A58:  BRA    0E78
.................... 		case I2C_REG_DEFAULT_PARAMS_WRITTEN:
.................... 			return (int16) current.default_params_written;
0A5A:  MOVFF  CE,01
0A5E:  CLRF   02
0A60:  BRA    0E78
.................... 
.................... 		/* channel based configuration */
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD_INITIAL:
.................... 			return (int16) config.ch[c].command_on_hold_time;
0A62:  MOVLB  1
0A64:  MOVF   x3C,W
0A66:  MULLW  24
0A68:  MOVF   FF3,W
0A6A:  CLRF   x3E
0A6C:  MOVWF  x3D
0A6E:  MOVLW  1B
0A70:  ADDWF  x3D,W
0A72:  MOVWF  FE9
0A74:  MOVLW  00
0A76:  ADDWFC x3E,W
0A78:  MOVWF  FEA
0A7A:  MOVFF  FEC,03
0A7E:  MOVF   FED,F
0A80:  MOVFF  FEF,01
0A84:  MOVFF  03,02
0A88:  MOVLB  0
0A8A:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD_INITIAL:
.................... 			return (int16) config.ch[c].command_off_hold_time;
0A8C:  MOVLB  1
0A8E:  MOVF   x3C,W
0A90:  MULLW  24
0A92:  MOVF   FF3,W
0A94:  CLRF   x3E
0A96:  MOVWF  x3D
0A98:  MOVLW  02
0A9A:  ADDWF  x3D,W
0A9C:  MOVWF  01
0A9E:  MOVLW  00
0AA0:  ADDWFC x3E,W
0AA2:  MOVWF  03
0AA4:  MOVF   01,W
0AA6:  ADDLW  1B
0AA8:  MOVWF  FE9
0AAA:  MOVLW  00
0AAC:  ADDWFC 03,W
0AAE:  MOVWF  FEA
0AB0:  MOVFF  FEC,03
0AB4:  MOVF   FED,F
0AB6:  MOVFF  FEF,01
0ABA:  MOVFF  03,02
0ABE:  MOVLB  0
0AC0:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].lvd_disconnect_adc;
0AC2:  MOVLB  1
0AC4:  MOVF   x3C,W
0AC6:  MULLW  24
0AC8:  MOVF   FF3,W
0ACA:  CLRF   x3E
0ACC:  MOVWF  x3D
0ACE:  MOVLW  04
0AD0:  ADDWF  x3D,W
0AD2:  MOVWF  01
0AD4:  MOVLW  00
0AD6:  ADDWFC x3E,W
0AD8:  MOVWF  03
0ADA:  MOVF   01,W
0ADC:  ADDLW  1B
0ADE:  MOVWF  FE9
0AE0:  MOVLW  00
0AE2:  ADDWFC 03,W
0AE4:  MOVWF  FEA
0AE6:  MOVFF  FEC,03
0AEA:  MOVF   FED,F
0AEC:  MOVFF  FEF,01
0AF0:  MOVFF  03,02
0AF4:  MOVLB  0
0AF6:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].lvd_disconnect_delay;
0AF8:  MOVLB  1
0AFA:  MOVF   x3C,W
0AFC:  MULLW  24
0AFE:  MOVF   FF3,W
0B00:  CLRF   x3E
0B02:  MOVWF  x3D
0B04:  MOVLW  06
0B06:  ADDWF  x3D,W
0B08:  MOVWF  01
0B0A:  MOVLW  00
0B0C:  ADDWFC x3E,W
0B0E:  MOVWF  03
0B10:  MOVF   01,W
0B12:  ADDLW  1B
0B14:  MOVWF  FE9
0B16:  MOVLW  00
0B18:  ADDWFC 03,W
0B1A:  MOVWF  FEA
0B1C:  MOVFF  FEC,03
0B20:  MOVF   FED,F
0B22:  MOVFF  FEF,01
0B26:  MOVFF  03,02
0B2A:  MOVLB  0
0B2C:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].lvd_reconnect_adc;
0B2E:  MOVLB  1
0B30:  MOVF   x3C,W
0B32:  MULLW  24
0B34:  MOVF   FF3,W
0B36:  CLRF   x3E
0B38:  MOVWF  x3D
0B3A:  MOVLW  08
0B3C:  ADDWF  x3D,W
0B3E:  MOVWF  01
0B40:  MOVLW  00
0B42:  ADDWFC x3E,W
0B44:  MOVWF  03
0B46:  MOVF   01,W
0B48:  ADDLW  1B
0B4A:  MOVWF  FE9
0B4C:  MOVLW  00
0B4E:  ADDWFC 03,W
0B50:  MOVWF  FEA
0B52:  MOVFF  FEC,03
0B56:  MOVF   FED,F
0B58:  MOVFF  FEF,01
0B5C:  MOVFF  03,02
0B60:  MOVLB  0
0B62:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].lvd_reconnect_delay;
0B64:  MOVLB  1
0B66:  MOVF   x3C,W
0B68:  MULLW  24
0B6A:  MOVF   FF3,W
0B6C:  CLRF   x3E
0B6E:  MOVWF  x3D
0B70:  MOVLW  0A
0B72:  ADDWF  x3D,W
0B74:  MOVWF  01
0B76:  MOVLW  00
0B78:  ADDWFC x3E,W
0B7A:  MOVWF  03
0B7C:  MOVF   01,W
0B7E:  ADDLW  1B
0B80:  MOVWF  FE9
0B82:  MOVLW  00
0B84:  ADDWFC 03,W
0B86:  MOVWF  FEA
0B88:  MOVFF  FEC,03
0B8C:  MOVF   FED,F
0B8E:  MOVFF  FEF,01
0B92:  MOVFF  03,02
0B96:  MOVLB  0
0B98:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].hvd_disconnect_adc;
0B9A:  MOVLB  1
0B9C:  MOVF   x3C,W
0B9E:  MULLW  24
0BA0:  MOVF   FF3,W
0BA2:  CLRF   x3E
0BA4:  MOVWF  x3D
0BA6:  MOVLW  0C
0BA8:  ADDWF  x3D,W
0BAA:  MOVWF  01
0BAC:  MOVLW  00
0BAE:  ADDWFC x3E,W
0BB0:  MOVWF  03
0BB2:  MOVF   01,W
0BB4:  ADDLW  1B
0BB6:  MOVWF  FE9
0BB8:  MOVLW  00
0BBA:  ADDWFC 03,W
0BBC:  MOVWF  FEA
0BBE:  MOVFF  FEC,03
0BC2:  MOVF   FED,F
0BC4:  MOVFF  FEF,01
0BC8:  MOVFF  03,02
0BCC:  MOVLB  0
0BCE:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].hvd_disconnect_delay;
0BD0:  MOVLB  1
0BD2:  MOVF   x3C,W
0BD4:  MULLW  24
0BD6:  MOVF   FF3,W
0BD8:  CLRF   x3E
0BDA:  MOVWF  x3D
0BDC:  MOVLW  0E
0BDE:  ADDWF  x3D,W
0BE0:  MOVWF  01
0BE2:  MOVLW  00
0BE4:  ADDWFC x3E,W
0BE6:  MOVWF  03
0BE8:  MOVF   01,W
0BEA:  ADDLW  1B
0BEC:  MOVWF  FE9
0BEE:  MOVLW  00
0BF0:  ADDWFC 03,W
0BF2:  MOVWF  FEA
0BF4:  MOVFF  FEC,03
0BF8:  MOVF   FED,F
0BFA:  MOVFF  FEF,01
0BFE:  MOVFF  03,02
0C02:  MOVLB  0
0C04:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].hvd_reconnect_adc;
0C06:  MOVLB  1
0C08:  MOVF   x3C,W
0C0A:  MULLW  24
0C0C:  MOVF   FF3,W
0C0E:  CLRF   x3E
0C10:  MOVWF  x3D
0C12:  MOVLW  10
0C14:  ADDWF  x3D,W
0C16:  MOVWF  01
0C18:  MOVLW  00
0C1A:  ADDWFC x3E,W
0C1C:  MOVWF  03
0C1E:  MOVF   01,W
0C20:  ADDLW  1B
0C22:  MOVWF  FE9
0C24:  MOVLW  00
0C26:  ADDWFC 03,W
0C28:  MOVWF  FEA
0C2A:  MOVFF  FEC,03
0C2E:  MOVF   FED,F
0C30:  MOVFF  FEF,01
0C34:  MOVFF  03,02
0C38:  MOVLB  0
0C3A:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].hvd_reconnect_delay;
0C3C:  MOVLB  1
0C3E:  MOVF   x3C,W
0C40:  MULLW  24
0C42:  MOVF   FF3,W
0C44:  CLRF   x3E
0C46:  MOVWF  x3D
0C48:  MOVLW  12
0C4A:  ADDWF  x3D,W
0C4C:  MOVWF  01
0C4E:  MOVLW  00
0C50:  ADDWFC x3E,W
0C52:  MOVWF  03
0C54:  MOVF   01,W
0C56:  ADDLW  1B
0C58:  MOVWF  FE9
0C5A:  MOVLW  00
0C5C:  ADDWFC 03,W
0C5E:  MOVWF  FEA
0C60:  MOVFF  FEC,03
0C64:  MOVF   FED,F
0C66:  MOVFF  FEF,01
0C6A:  MOVFF  03,02
0C6E:  MOVLB  0
0C70:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_disconnect_adc;
0C72:  MOVLB  1
0C74:  MOVF   x3C,W
0C76:  MULLW  24
0C78:  MOVF   FF3,W
0C7A:  CLRF   x3E
0C7C:  MOVWF  x3D
0C7E:  MOVLW  14
0C80:  ADDWF  x3D,W
0C82:  MOVWF  01
0C84:  MOVLW  00
0C86:  ADDWFC x3E,W
0C88:  MOVWF  03
0C8A:  MOVF   01,W
0C8C:  ADDLW  1B
0C8E:  MOVWF  FE9
0C90:  MOVLW  00
0C92:  ADDWFC 03,W
0C94:  MOVWF  FEA
0C96:  MOVFF  FEC,03
0C9A:  MOVF   FED,F
0C9C:  MOVFF  FEF,01
0CA0:  MOVFF  03,02
0CA4:  MOVLB  0
0CA6:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_disconnect_delay;
0CA8:  MOVLB  1
0CAA:  MOVF   x3C,W
0CAC:  MULLW  24
0CAE:  MOVF   FF3,W
0CB0:  CLRF   x3E
0CB2:  MOVWF  x3D
0CB4:  MOVLW  16
0CB6:  ADDWF  x3D,W
0CB8:  MOVWF  01
0CBA:  MOVLW  00
0CBC:  ADDWFC x3E,W
0CBE:  MOVWF  03
0CC0:  MOVF   01,W
0CC2:  ADDLW  1B
0CC4:  MOVWF  FE9
0CC6:  MOVLW  00
0CC8:  ADDWFC 03,W
0CCA:  MOVWF  FEA
0CCC:  MOVFF  FEC,03
0CD0:  MOVF   FED,F
0CD2:  MOVFF  FEF,01
0CD6:  MOVFF  03,02
0CDA:  MOVLB  0
0CDC:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_reconnect_adc;
0CDE:  MOVLB  1
0CE0:  MOVF   x3C,W
0CE2:  MULLW  24
0CE4:  MOVF   FF3,W
0CE6:  CLRF   x3E
0CE8:  MOVWF  x3D
0CEA:  MOVLW  18
0CEC:  ADDWF  x3D,W
0CEE:  MOVWF  01
0CF0:  MOVLW  00
0CF2:  ADDWFC x3E,W
0CF4:  MOVWF  03
0CF6:  MOVF   01,W
0CF8:  ADDLW  1B
0CFA:  MOVWF  FE9
0CFC:  MOVLW  00
0CFE:  ADDWFC 03,W
0D00:  MOVWF  FEA
0D02:  MOVFF  FEC,03
0D06:  MOVF   FED,F
0D08:  MOVFF  FEF,01
0D0C:  MOVFF  03,02
0D10:  MOVLB  0
0D12:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_reconnect_delay;
0D14:  MOVLB  1
0D16:  MOVF   x3C,W
0D18:  MULLW  24
0D1A:  MOVF   FF3,W
0D1C:  CLRF   x3E
0D1E:  MOVWF  x3D
0D20:  MOVLW  1A
0D22:  ADDWF  x3D,W
0D24:  MOVWF  01
0D26:  MOVLW  00
0D28:  ADDWFC x3E,W
0D2A:  MOVWF  03
0D2C:  MOVF   01,W
0D2E:  ADDLW  1B
0D30:  MOVWF  FE9
0D32:  MOVLW  00
0D34:  ADDWFC 03,W
0D36:  MOVWF  FEA
0D38:  MOVFF  FEC,03
0D3C:  MOVF   FED,F
0D3E:  MOVFF  FEF,01
0D42:  MOVFF  03,02
0D46:  MOVLB  0
0D48:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_disconnect_adc;
0D4A:  MOVLB  1
0D4C:  MOVF   x3C,W
0D4E:  MULLW  24
0D50:  MOVF   FF3,W
0D52:  CLRF   x3E
0D54:  MOVWF  x3D
0D56:  MOVLW  14
0D58:  ADDWF  x3D,W
0D5A:  MOVWF  01
0D5C:  MOVLW  00
0D5E:  ADDWFC x3E,W
0D60:  MOVWF  03
0D62:  MOVF   01,W
0D64:  ADDLW  1B
0D66:  MOVWF  FE9
0D68:  MOVLW  00
0D6A:  ADDWFC 03,W
0D6C:  MOVWF  FEA
0D6E:  MOVFF  FEC,03
0D72:  MOVF   FED,F
0D74:  MOVFF  FEF,01
0D78:  MOVFF  03,02
0D7C:  MOVLB  0
0D7E:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_disconnect_delay;
0D80:  MOVLB  1
0D82:  MOVF   x3C,W
0D84:  MULLW  24
0D86:  MOVF   FF3,W
0D88:  CLRF   x3E
0D8A:  MOVWF  x3D
0D8C:  MOVLW  16
0D8E:  ADDWF  x3D,W
0D90:  MOVWF  01
0D92:  MOVLW  00
0D94:  ADDWFC x3E,W
0D96:  MOVWF  03
0D98:  MOVF   01,W
0D9A:  ADDLW  1B
0D9C:  MOVWF  FE9
0D9E:  MOVLW  00
0DA0:  ADDWFC 03,W
0DA2:  MOVWF  FEA
0DA4:  MOVFF  FEC,03
0DA8:  MOVF   FED,F
0DAA:  MOVFF  FEF,01
0DAE:  MOVFF  03,02
0DB2:  MOVLB  0
0DB4:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_reconnect_adc;
0DB6:  MOVLB  1
0DB8:  MOVF   x3C,W
0DBA:  MULLW  24
0DBC:  MOVF   FF3,W
0DBE:  CLRF   x3E
0DC0:  MOVWF  x3D
0DC2:  MOVLW  18
0DC4:  ADDWF  x3D,W
0DC6:  MOVWF  01
0DC8:  MOVLW  00
0DCA:  ADDWFC x3E,W
0DCC:  MOVWF  03
0DCE:  MOVF   01,W
0DD0:  ADDLW  1B
0DD2:  MOVWF  FE9
0DD4:  MOVLW  00
0DD6:  ADDWFC 03,W
0DD8:  MOVWF  FEA
0DDA:  MOVFF  FEC,03
0DDE:  MOVF   FED,F
0DE0:  MOVFF  FEF,01
0DE4:  MOVFF  03,02
0DE8:  MOVLB  0
0DEA:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_reconnect_delay;	
0DEC:  MOVLB  1
0DEE:  MOVF   x3C,W
0DF0:  MULLW  24
0DF2:  MOVF   FF3,W
0DF4:  CLRF   x3E
0DF6:  MOVWF  x3D
0DF8:  MOVLW  1A
0DFA:  ADDWF  x3D,W
0DFC:  MOVWF  01
0DFE:  MOVLW  00
0E00:  ADDWFC x3E,W
0E02:  MOVWF  03
0E04:  MOVF   01,W
0E06:  ADDLW  1B
0E08:  MOVWF  FE9
0E0A:  MOVLW  00
0E0C:  ADDWFC 03,W
0E0E:  MOVWF  FEA
0E10:  MOVFF  FEC,03
0E14:  MOVF   FED,F
0E16:  MOVFF  FEF,01
0E1A:  MOVFF  03,02
0E1E:  MOVLB  0
0E20:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_FUT_DISCONNECT_VALUE:
.................... 		case I2C_REG_CH0_FUT_DISCONNECT_DELAY:
.................... 		case I2C_REG_CH0_FUT_RECONNECT_VALUE:
.................... 		case I2C_REG_CH0_FUT_RECONNECT_DELAY:
.................... 			return (int16) 0xffff; /* not yet implemented */
0E22:  MOVLW  FF
0E24:  MOVWF  01
0E26:  MOVWF  02
0E28:  BRA    0E78
.................... 		
.................... 		/* configuration */
.................... 		case I2C_REG_CONFIG_HARDWARE_MODEL: 
.................... 			return (int16) 'D';
0E2A:  MOVLW  44
0E2C:  MOVWF  01
0E2E:  MOVLW  00
0E30:  MOVWF  02
0E32:  BRA    0E78
.................... 		case I2C_REG_CONFIG_HARDWARE_VERSION: 
.................... 			return (int16) '2';
0E34:  MOVLW  32
0E36:  MOVWF  01
0E38:  MOVLW  00
0E3A:  MOVWF  02
0E3C:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_MODEL: 
.................... 			return (int16) 'L';
0E3E:  MOVLW  4C
0E40:  MOVWF  01
0E42:  MOVLW  00
0E44:  MOVWF  02
0E46:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_VERSION: 
.................... 			return (int16) '0';
0E48:  MOVLW  30
0E4A:  MOVWF  01
0E4C:  MOVLW  00
0E4E:  MOVWF  02
0E50:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_YEAR:
.................... 			return (int16) current.compile_year;
0E52:  MOVFF  CB,01
0E56:  CLRF   02
0E58:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_MONTH:
.................... 			return (int16) current.compile_month;
0E5A:  MOVFF  CC,01
0E5E:  CLRF   02
0E60:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_DAY:
.................... 			return (int16) current.compile_day;
0E62:  MOVFF  CD,01
0E66:  CLRF   02
0E68:  BRA    0E78
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			/* 1 if factory unlocked */ 
.................... 			return (int16) current.factory_unlocked; 	
0E6A:  MOVFF  CA,01
0E6E:  CLRF   02
0E70:  BRA    0E78
.................... 
.................... 		/* we should have range checked, and never gotten here ... or read unimplemented (future) register */
.................... 		default: return (int16) 0xffff;
0E72:  MOVLW  FF
0E74:  MOVWF  01
0E76:  MOVWF  02
.................... 	}
0E78:  GOTO   0F36 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "interrupt_dcswc_module_latching_contactor.c"
.................... #int_timer2
.................... void isr_timer2() {
.................... 	timers.now_millisecond=1;
*
00D4:  BSF    xCF.2
.................... }
.................... 
.................... 
.................... 
.................... /* I2C slave interrupt */
00D6:  BCF    F9E.1
00D8:  GOTO   006C
.................... #byte SSPSTAT=GETENV("SFR:SSPSTAT")
.................... #INT_SSP
.................... void ssp_interrupt () {
.................... 	static int8 sstate;
.................... 	int8 state;
.................... 	int8 incoming;
.................... 	static int16 lastValue;
.................... 	static int8 lastMSB;
.................... 
.................... 	static int8 address; 
.................... 
.................... 	/* 
.................... 	our implementation of i2c_isr_state() that won't overflow and switch states
.................... 	but it will quit counting at 127 bytes. 
.................... 	If more bytes are needed, external counting variables can be used or the size of state can be made larger
.................... 	*/
.................... 
.................... 
.................... 	if ( ! bit_test(SSPSTAT,5) ) {
*
0E92:  BTFSC  FC7.5
0E94:  BRA    0EA2
.................... 		/* address */
.................... 		sstate=0;
0E96:  MOVLB  1
0E98:  CLRF   x06
.................... 
.................... 		if ( bit_test(SSPSTAT,2) ) {
0E9A:  BTFSS  FC7.2
0E9C:  BRA    0EA0
.................... 			/* set high bit if read */
.................... 			bit_set(sstate,7);
0E9E:  BSF    x06.7
.................... 		}
.................... 	} else {
0EA0:  MOVLB  0
.................... 		/* data */
.................... 	}
.................... 
.................... 	/* state variable used below is not incremented */
.................... 	state=sstate;
0EA2:  MOVFF  106,138
.................... 
.................... 	/* increment the state counter for next pass through unless it will overflow us into another state */
.................... 	if ( sstate != 0x7f && sstate != 0xff) {
0EA6:  MOVLB  1
0EA8:  MOVF   x06,W
0EAA:  SUBLW  7F
0EAC:  BZ    0EB6
0EAE:  INCFSZ x06,W
0EB0:  BRA    0EB4
0EB2:  BRA    0EB6
.................... 		sstate++;
0EB4:  INCF   x06,F
.................... 	}
.................... 
.................... 	
.................... 	/* i2c_isr_state() return an 8 bit int
.................... 		0 - Address match received with R/W bit clear, perform i2c_read( ) to read the I2C address.
.................... 		1-0x7F - Master has written data; i2c_read() will immediately return the data
.................... 		0x80 - Address match received with R/W bit set; perform i2c_read( ) to read the I2C address,
.................... 		and use i2c_write( ) to pre-load the transmit buffer for the next transaction (next I2C read
.................... 		performed by master will read this byte).
.................... 		0x81-0xFF - Transmission completed and acknowledged; respond with i2c_write() to pre-load
.................... 		the transmit buffer for the next transition (the next I2C read performed by master will read this
.................... 		byte).
.................... 		Function:
.................... 		Returns the state of I2C communications in I2C slave mode after an SSP interrupt. The return
.................... 		value increments with each byte received or sent.
.................... 		If 0x00 or 0x80 is returned, an i2C_read( ) needs to be performed to read the I2C address that
.................... 		was sent (it will match the address configured by #USE I2C so this value can be ignored)
.................... 	*/
.................... 
.................... 	if ( state <= 0x80 ) {                      
0EB6:  MOVF   x38,W
0EB8:  SUBLW  80
0EBA:  BNC   0F1E
.................... 		/* I2C master is sending us data */
.................... 		if ( 0x80 == state ) {
0EBC:  MOVF   x38,W
0EBE:  SUBLW  80
0EC0:  BNZ   0EC8
.................... 			/* i2c_read(2) casues the function to read the SSPBUF without releasing the clock */
.................... 			incoming = i2c_read(STREAM_SLAVE,2);
0EC2:  MOVFF  FC9,139
.................... 		} else {
0EC6:  BRA    0ED4
.................... 			incoming = i2c_read(STREAM_SLAVE);
0EC8:  BCF    FC6.6
0ECA:  BTFSS  FC7.0
0ECC:  BRA    0ECA
0ECE:  MOVF   FC9,W
0ED0:  BSF    FC6.4
0ED2:  MOVWF  x39
.................... 		}
.................... 
.................... 		if ( 1 == state ) {             
0ED4:  DECFSZ x38,W
0ED6:  BRA    0EE0
.................... 			address = incoming<<1;
0ED8:  BCF    FD8.0
0EDA:  RLCF   x39,W
0EDC:  MOVWF  x0A
.................... 		} else if ( state >= 2 && 0x80 != state ) {
0EDE:  BRA    0F1E
0EE0:  MOVF   x38,W
0EE2:  SUBLW  01
0EE4:  BC    0F1E
0EE6:  MOVF   x38,W
0EE8:  SUBLW  80
0EEA:  BZ    0F1E
.................... 			/* received byte is data */
.................... 		
.................... 			/* save MSB and we'll process it on next */
.................... 			if ( 2 == state ) {
0EEC:  MOVF   x38,W
0EEE:  SUBLW  02
0EF0:  BNZ   0EF8
.................... 				lastMSB=incoming;
0EF2:  MOVFF  139,109
.................... 			} else if ( 3 == state ) {
0EF6:  BRA    0F1E
0EF8:  MOVF   x38,W
0EFA:  SUBLW  03
0EFC:  BNZ   0F1E
.................... 				/* 16 bit value made of previous byte and this byte */
.................... 				write_i2c(address>>1,make16(lastMSB,incoming));
0EFE:  BCF    FD8.0
0F00:  RRCF   x0A,W
0F02:  MOVWF  x3A
0F04:  MOVFF  109,13C
0F08:  MOVFF  139,13B
0F0C:  MOVWF  x3D
0F0E:  MOVFF  109,13F
0F12:  MOVFF  139,13E
0F16:  MOVLB  0
0F18:  GOTO   00DC
0F1C:  MOVLB  1
.................... 
.................... 				/* this write only works for a single register per I2C transaction */
.................... 				/* this is not a BUG, but it would need to be implemented if this functionality is needed */
.................... 			}
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	if ( state >= 0x80 ) {
0F1E:  MOVF   x38,W
0F20:  SUBLW  7F
0F22:  BC    0F5C
.................... 		/* I2C master is requesting data from us */
.................... 
.................... 		if ( ! bit_test(address,0) ) {
0F24:  BTFSC  x0A.0
0F26:  BRA    0F4C
.................... 			/* read 16 bit register (register address half of I2C address) on even address */
.................... 			lastValue=map_i2c(address>>1);
0F28:  BCF    FD8.0
0F2A:  RRCF   x0A,W
0F2C:  MOVWF  x3A
0F2E:  MOVWF  x3B
0F30:  MOVLB  0
0F32:  GOTO   0614
0F36:  MOVFF  02,108
0F3A:  MOVFF  01,107
.................... 
.................... 			/* send the MSB */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,1));
0F3E:  MOVFF  108,13A
0F42:  MOVFF  108,13B
0F46:  RCALL  0E7C
.................... 		} else {
0F48:  BRA    0F58
0F4A:  MOVLB  1
.................... 			/* send LSB of 16 bit register on odd address */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,0));
0F4C:  MOVFF  107,13A
0F50:  MOVFF  107,13B
0F54:  MOVLB  0
0F56:  RCALL  0E7C
.................... 		}
.................... 		address++;
0F58:  MOVLB  1
0F5A:  INCF   x0A,F
.................... 	}
.................... }
.................... 
.................... 
.................... 
.................... 
0F5C:  BCF    F9E.3
0F5E:  MOVLB  0
0F60:  GOTO   006C
.................... #include "debug_dcswc_module_latching_contactor.c"
.................... void debug_dump(void) {
.................... 	int8 i;
.................... 	
.................... 	restart_wdt();
*
2A04:  CLRWDT
.................... 	fprintf(STREAM_FTDI,"# '%s'\r\n",__DATE__);
2A06:  MOVLW  64
2A08:  MOVWF  FF6
2A0A:  MOVLW  0F
2A0C:  MOVWF  FF7
2A0E:  MOVLW  03
2A10:  MOVLB  1
2A12:  MOVWF  x19
2A14:  MOVLB  0
2A16:  CALL   1982
2A1A:  MOVLW  CA
2A1C:  MOVWF  FF6
2A1E:  MOVLW  00
2A20:  MOVWF  FF7
2A22:  CALL   19AC
2A26:  MOVLW  69
2A28:  MOVWF  FF6
2A2A:  MOVLW  0F
2A2C:  MOVWF  FF7
2A2E:  MOVLW  03
2A30:  MOVLB  1
2A32:  MOVWF  x19
2A34:  MOVLB  0
2A36:  CALL   1982
.................... 	fprintf(STREAM_FTDI,"#  compile_year=%u\r\n",current.compile_year);
2A3A:  MOVLW  6E
2A3C:  MOVWF  FF6
2A3E:  MOVLW  0F
2A40:  MOVWF  FF7
2A42:  MOVLW  10
2A44:  MOVLB  1
2A46:  MOVWF  x19
2A48:  MOVLB  0
2A4A:  CALL   1982
2A4E:  MOVFF  CB,116
2A52:  MOVLW  1B
2A54:  MOVLB  1
2A56:  MOVWF  x17
2A58:  MOVLB  0
2A5A:  RCALL  288C
2A5C:  MOVLW  0D
2A5E:  BTFSS  F9E.4
2A60:  BRA    2A5E
2A62:  MOVWF  FAD
2A64:  MOVLW  0A
2A66:  BTFSS  F9E.4
2A68:  BRA    2A66
2A6A:  MOVWF  FAD
.................... 	fprintf(STREAM_FTDI,"# compile_month=%u\r\n",current.compile_month);
2A6C:  MOVLW  84
2A6E:  MOVWF  FF6
2A70:  MOVLW  0F
2A72:  MOVWF  FF7
2A74:  MOVLW  10
2A76:  MOVLB  1
2A78:  MOVWF  x19
2A7A:  MOVLB  0
2A7C:  CALL   1982
2A80:  MOVFF  CC,116
2A84:  MOVLW  1B
2A86:  MOVLB  1
2A88:  MOVWF  x17
2A8A:  MOVLB  0
2A8C:  RCALL  288C
2A8E:  MOVLW  0D
2A90:  BTFSS  F9E.4
2A92:  BRA    2A90
2A94:  MOVWF  FAD
2A96:  MOVLW  0A
2A98:  BTFSS  F9E.4
2A9A:  BRA    2A98
2A9C:  MOVWF  FAD
.................... 	fprintf(STREAM_FTDI,"#   compile_day=%u\r\n",current.compile_day);
2A9E:  MOVLW  9A
2AA0:  MOVWF  FF6
2AA2:  MOVLW  0F
2AA4:  MOVWF  FF7
2AA6:  MOVLW  10
2AA8:  MOVLB  1
2AAA:  MOVWF  x19
2AAC:  MOVLB  0
2AAE:  CALL   1982
2AB2:  MOVFF  CD,116
2AB6:  MOVLW  1B
2AB8:  MOVLB  1
2ABA:  MOVWF  x17
2ABC:  MOVLB  0
2ABE:  RCALL  288C
2AC0:  MOVLW  0D
2AC2:  BTFSS  F9E.4
2AC4:  BRA    2AC2
2AC6:  MOVWF  FAD
2AC8:  MOVLW  0A
2ACA:  BTFSS  F9E.4
2ACC:  BRA    2ACA
2ACE:  MOVWF  FAD
2AD0:  CLRF   19
2AD2:  BTFSC  FF2.7
2AD4:  BSF    19.7
2AD6:  BCF    FF2.7
.................... 	fprintf(STREAM_FTDI,"#       vin adc=%lu\r\n",adc_get(0));
2AD8:  MOVLB  1
2ADA:  CLRF   x3D
2ADC:  MOVLB  0
2ADE:  CALL   0594
2AE2:  BTFSC  19.7
2AE4:  BSF    FF2.7
2AE6:  MOVFF  02,117
2AEA:  MOVFF  01,116
2AEE:  MOVLW  B0
2AF0:  MOVWF  FF6
2AF2:  MOVLW  0F
2AF4:  MOVWF  FF7
2AF6:  MOVLW  10
2AF8:  MOVLB  1
2AFA:  MOVWF  x19
2AFC:  MOVLB  0
2AFE:  CALL   1982
2B02:  MOVLW  10
2B04:  MOVWF  FE9
2B06:  MOVFF  117,119
2B0A:  MOVFF  116,118
2B0E:  RCALL  290A
2B10:  MOVLW  0D
2B12:  BTFSS  F9E.4
2B14:  BRA    2B12
2B16:  MOVWF  FAD
2B18:  MOVLW  0A
2B1A:  BTFSS  F9E.4
2B1C:  BRA    2B1A
2B1E:  MOVWF  FAD
2B20:  CLRF   19
2B22:  BTFSC  FF2.7
2B24:  BSF    19.7
2B26:  BCF    FF2.7
.................... 	fprintf(STREAM_FTDI,"#      temp adc=%lu\r\n",adc_get(1));
2B28:  MOVLW  01
2B2A:  MOVLB  1
2B2C:  MOVWF  x3D
2B2E:  MOVLB  0
2B30:  CALL   0594
2B34:  BTFSC  19.7
2B36:  BSF    FF2.7
2B38:  MOVFF  02,117
2B3C:  MOVFF  01,116
2B40:  MOVLW  C6
2B42:  MOVWF  FF6
2B44:  MOVLW  0F
2B46:  MOVWF  FF7
2B48:  MOVLW  10
2B4A:  MOVLB  1
2B4C:  MOVWF  x19
2B4E:  MOVLB  0
2B50:  CALL   1982
2B54:  MOVLW  10
2B56:  MOVWF  FE9
2B58:  MOVFF  117,119
2B5C:  MOVFF  116,118
2B60:  RCALL  290A
2B62:  MOVLW  0D
2B64:  BTFSS  F9E.4
2B66:  BRA    2B64
2B68:  MOVWF  FAD
2B6A:  MOVLW  0A
2B6C:  BTFSS  F9E.4
2B6E:  BRA    2B6C
2B70:  MOVWF  FAD
.................... //	fprintf(STREAM_FTDI,"# read_dip_sw()=%u\r\n",read_dip_switch());
.................... //	fprintf(STREAM_FTDI,"#    dip sw adc=%lu\r\n",adc_get(2));
.................... 
.................... 	for ( i=0 ; i<2 ; i++ ) {
2B72:  MOVLB  1
2B74:  CLRF   x15
2B76:  MOVF   x15,W
2B78:  SUBLW  01
2B7A:  BTFSS  FD8.0
2B7C:  GOTO   370E
.................... 		restart_wdt();
2B80:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# config.ch[%u]\r\n",i);
2B82:  MOVLW  DC
2B84:  MOVWF  FF6
2B86:  MOVLW  0F
2B88:  MOVWF  FF7
2B8A:  MOVLW  0C
2B8C:  MOVWF  x19
2B8E:  MOVLB  0
2B90:  CALL   1982
2B94:  MOVFF  115,116
2B98:  MOVLW  1B
2B9A:  MOVLB  1
2B9C:  MOVWF  x17
2B9E:  MOVLB  0
2BA0:  RCALL  288C
2BA2:  MOVLW  EA
2BA4:  MOVWF  FF6
2BA6:  MOVLW  0F
2BA8:  MOVWF  FF7
2BAA:  MOVLW  03
2BAC:  MOVLB  1
2BAE:  MOVWF  x19
2BB0:  MOVLB  0
2BB2:  CALL   1982
.................... 		fprintf(STREAM_FTDI,"# command_off_hold_time=%lu\r\n",config.ch[i].command_off_hold_time);
2BB6:  MOVLB  1
2BB8:  MOVF   x15,W
2BBA:  MULLW  24
2BBC:  MOVF   FF3,W
2BBE:  CLRF   x17
2BC0:  MOVWF  x16
2BC2:  MOVLW  02
2BC4:  ADDWF  x16,W
2BC6:  MOVWF  01
2BC8:  MOVLW  00
2BCA:  ADDWFC x17,W
2BCC:  MOVWF  03
2BCE:  MOVF   01,W
2BD0:  ADDLW  1B
2BD2:  MOVWF  FE9
2BD4:  MOVLW  00
2BD6:  ADDWFC 03,W
2BD8:  MOVWF  FEA
2BDA:  MOVFF  FEC,117
2BDE:  MOVF   FED,F
2BE0:  MOVFF  FEF,116
2BE4:  MOVLW  EE
2BE6:  MOVWF  FF6
2BE8:  MOVLW  0F
2BEA:  MOVWF  FF7
2BEC:  MOVLW  18
2BEE:  MOVWF  x19
2BF0:  MOVLB  0
2BF2:  CALL   1982
2BF6:  MOVLW  10
2BF8:  MOVWF  FE9
2BFA:  MOVFF  117,119
2BFE:  MOVFF  116,118
2C02:  RCALL  290A
2C04:  MOVLW  0D
2C06:  BTFSS  F9E.4
2C08:  BRA    2C06
2C0A:  MOVWF  FAD
2C0C:  MOVLW  0A
2C0E:  BTFSS  F9E.4
2C10:  BRA    2C0E
2C12:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    lvd_disconnect_adc=%lu\r\n",config.ch[i].lvd_disconnect_adc);
2C14:  MOVLB  1
2C16:  MOVF   x15,W
2C18:  MULLW  24
2C1A:  MOVF   FF3,W
2C1C:  CLRF   x17
2C1E:  MOVWF  x16
2C20:  MOVLW  04
2C22:  ADDWF  x16,W
2C24:  MOVWF  01
2C26:  MOVLW  00
2C28:  ADDWFC x17,W
2C2A:  MOVWF  03
2C2C:  MOVF   01,W
2C2E:  ADDLW  1B
2C30:  MOVWF  FE9
2C32:  MOVLW  00
2C34:  ADDWFC 03,W
2C36:  MOVWF  FEA
2C38:  MOVFF  FEC,117
2C3C:  MOVF   FED,F
2C3E:  MOVFF  FEF,116
2C42:  MOVLW  0C
2C44:  MOVWF  FF6
2C46:  MOVLW  10
2C48:  MOVWF  FF7
2C4A:  MOVLW  18
2C4C:  MOVWF  x19
2C4E:  MOVLB  0
2C50:  CALL   1982
2C54:  MOVLW  10
2C56:  MOVWF  FE9
2C58:  MOVFF  117,119
2C5C:  MOVFF  116,118
2C60:  RCALL  290A
2C62:  MOVLW  0D
2C64:  BTFSS  F9E.4
2C66:  BRA    2C64
2C68:  MOVWF  FAD
2C6A:  MOVLW  0A
2C6C:  BTFSS  F9E.4
2C6E:  BRA    2C6C
2C70:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  lvd_disconnect_delay=%lu\r\n",config.ch[i].lvd_disconnect_delay);
2C72:  MOVLB  1
2C74:  MOVF   x15,W
2C76:  MULLW  24
2C78:  MOVF   FF3,W
2C7A:  CLRF   x17
2C7C:  MOVWF  x16
2C7E:  MOVLW  06
2C80:  ADDWF  x16,W
2C82:  MOVWF  01
2C84:  MOVLW  00
2C86:  ADDWFC x17,W
2C88:  MOVWF  03
2C8A:  MOVF   01,W
2C8C:  ADDLW  1B
2C8E:  MOVWF  FE9
2C90:  MOVLW  00
2C92:  ADDWFC 03,W
2C94:  MOVWF  FEA
2C96:  MOVFF  FEC,117
2C9A:  MOVF   FED,F
2C9C:  MOVFF  FEF,116
2CA0:  MOVLW  2A
2CA2:  MOVWF  FF6
2CA4:  MOVLW  10
2CA6:  MOVWF  FF7
2CA8:  MOVLW  18
2CAA:  MOVWF  x19
2CAC:  MOVLB  0
2CAE:  CALL   1982
2CB2:  MOVLW  10
2CB4:  MOVWF  FE9
2CB6:  MOVFF  117,119
2CBA:  MOVFF  116,118
2CBE:  RCALL  290A
2CC0:  MOVLW  0D
2CC2:  BTFSS  F9E.4
2CC4:  BRA    2CC2
2CC6:  MOVWF  FAD
2CC8:  MOVLW  0A
2CCA:  BTFSS  F9E.4
2CCC:  BRA    2CCA
2CCE:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     lvd_reconnect_adc=%lu\r\n",config.ch[i].lvd_reconnect_adc);
2CD0:  MOVLB  1
2CD2:  MOVF   x15,W
2CD4:  MULLW  24
2CD6:  MOVF   FF3,W
2CD8:  CLRF   x17
2CDA:  MOVWF  x16
2CDC:  MOVLW  08
2CDE:  ADDWF  x16,W
2CE0:  MOVWF  01
2CE2:  MOVLW  00
2CE4:  ADDWFC x17,W
2CE6:  MOVWF  03
2CE8:  MOVF   01,W
2CEA:  ADDLW  1B
2CEC:  MOVWF  FE9
2CEE:  MOVLW  00
2CF0:  ADDWFC 03,W
2CF2:  MOVWF  FEA
2CF4:  MOVFF  FEC,117
2CF8:  MOVF   FED,F
2CFA:  MOVFF  FEF,116
2CFE:  MOVLW  48
2D00:  MOVWF  FF6
2D02:  MOVLW  10
2D04:  MOVWF  FF7
2D06:  MOVLW  18
2D08:  MOVWF  x19
2D0A:  MOVLB  0
2D0C:  CALL   1982
2D10:  MOVLW  10
2D12:  MOVWF  FE9
2D14:  MOVFF  117,119
2D18:  MOVFF  116,118
2D1C:  RCALL  290A
2D1E:  MOVLW  0D
2D20:  BTFSS  F9E.4
2D22:  BRA    2D20
2D24:  MOVWF  FAD
2D26:  MOVLW  0A
2D28:  BTFSS  F9E.4
2D2A:  BRA    2D28
2D2C:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   lvd_reconnect_delay=%lu\r\n",config.ch[i].lvd_reconnect_delay);
2D2E:  MOVLB  1
2D30:  MOVF   x15,W
2D32:  MULLW  24
2D34:  MOVF   FF3,W
2D36:  CLRF   x17
2D38:  MOVWF  x16
2D3A:  MOVLW  0A
2D3C:  ADDWF  x16,W
2D3E:  MOVWF  01
2D40:  MOVLW  00
2D42:  ADDWFC x17,W
2D44:  MOVWF  03
2D46:  MOVF   01,W
2D48:  ADDLW  1B
2D4A:  MOVWF  FE9
2D4C:  MOVLW  00
2D4E:  ADDWFC 03,W
2D50:  MOVWF  FEA
2D52:  MOVFF  FEC,117
2D56:  MOVF   FED,F
2D58:  MOVFF  FEF,116
2D5C:  MOVLW  66
2D5E:  MOVWF  FF6
2D60:  MOVLW  10
2D62:  MOVWF  FF7
2D64:  MOVLW  18
2D66:  MOVWF  x19
2D68:  MOVLB  0
2D6A:  CALL   1982
2D6E:  MOVLW  10
2D70:  MOVWF  FE9
2D72:  MOVFF  117,119
2D76:  MOVFF  116,118
2D7A:  RCALL  290A
2D7C:  MOVLW  0D
2D7E:  BTFSS  F9E.4
2D80:  BRA    2D7E
2D82:  MOVWF  FAD
2D84:  MOVLW  0A
2D86:  BTFSS  F9E.4
2D88:  BRA    2D86
2D8A:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    hvd_disconnect_adc=%lu\r\n",config.ch[i].hvd_disconnect_adc);
2D8C:  MOVLB  1
2D8E:  MOVF   x15,W
2D90:  MULLW  24
2D92:  MOVF   FF3,W
2D94:  CLRF   x17
2D96:  MOVWF  x16
2D98:  MOVLW  0C
2D9A:  ADDWF  x16,W
2D9C:  MOVWF  01
2D9E:  MOVLW  00
2DA0:  ADDWFC x17,W
2DA2:  MOVWF  03
2DA4:  MOVF   01,W
2DA6:  ADDLW  1B
2DA8:  MOVWF  FE9
2DAA:  MOVLW  00
2DAC:  ADDWFC 03,W
2DAE:  MOVWF  FEA
2DB0:  MOVFF  FEC,117
2DB4:  MOVF   FED,F
2DB6:  MOVFF  FEF,116
2DBA:  MOVLW  84
2DBC:  MOVWF  FF6
2DBE:  MOVLW  10
2DC0:  MOVWF  FF7
2DC2:  MOVLW  18
2DC4:  MOVWF  x19
2DC6:  MOVLB  0
2DC8:  CALL   1982
2DCC:  MOVLW  10
2DCE:  MOVWF  FE9
2DD0:  MOVFF  117,119
2DD4:  MOVFF  116,118
2DD8:  RCALL  290A
2DDA:  MOVLW  0D
2DDC:  BTFSS  F9E.4
2DDE:  BRA    2DDC
2DE0:  MOVWF  FAD
2DE2:  MOVLW  0A
2DE4:  BTFSS  F9E.4
2DE6:  BRA    2DE4
2DE8:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  hvd_disconnect_delay=%lu\r\n",config.ch[i].hvd_disconnect_delay);
2DEA:  MOVLB  1
2DEC:  MOVF   x15,W
2DEE:  MULLW  24
2DF0:  MOVF   FF3,W
2DF2:  CLRF   x17
2DF4:  MOVWF  x16
2DF6:  MOVLW  0E
2DF8:  ADDWF  x16,W
2DFA:  MOVWF  01
2DFC:  MOVLW  00
2DFE:  ADDWFC x17,W
2E00:  MOVWF  03
2E02:  MOVF   01,W
2E04:  ADDLW  1B
2E06:  MOVWF  FE9
2E08:  MOVLW  00
2E0A:  ADDWFC 03,W
2E0C:  MOVWF  FEA
2E0E:  MOVFF  FEC,117
2E12:  MOVF   FED,F
2E14:  MOVFF  FEF,116
2E18:  MOVLW  A2
2E1A:  MOVWF  FF6
2E1C:  MOVLW  10
2E1E:  MOVWF  FF7
2E20:  MOVLW  18
2E22:  MOVWF  x19
2E24:  MOVLB  0
2E26:  CALL   1982
2E2A:  MOVLW  10
2E2C:  MOVWF  FE9
2E2E:  MOVFF  117,119
2E32:  MOVFF  116,118
2E36:  RCALL  290A
2E38:  MOVLW  0D
2E3A:  BTFSS  F9E.4
2E3C:  BRA    2E3A
2E3E:  MOVWF  FAD
2E40:  MOVLW  0A
2E42:  BTFSS  F9E.4
2E44:  BRA    2E42
2E46:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     hvd_reconnect_adc=%lu\r\n",config.ch[i].hvd_reconnect_adc);
2E48:  MOVLB  1
2E4A:  MOVF   x15,W
2E4C:  MULLW  24
2E4E:  MOVF   FF3,W
2E50:  CLRF   x17
2E52:  MOVWF  x16
2E54:  MOVLW  10
2E56:  ADDWF  x16,W
2E58:  MOVWF  01
2E5A:  MOVLW  00
2E5C:  ADDWFC x17,W
2E5E:  MOVWF  03
2E60:  MOVF   01,W
2E62:  ADDLW  1B
2E64:  MOVWF  FE9
2E66:  MOVLW  00
2E68:  ADDWFC 03,W
2E6A:  MOVWF  FEA
2E6C:  MOVFF  FEC,117
2E70:  MOVF   FED,F
2E72:  MOVFF  FEF,116
2E76:  MOVLW  C0
2E78:  MOVWF  FF6
2E7A:  MOVLW  10
2E7C:  MOVWF  FF7
2E7E:  MOVLW  18
2E80:  MOVWF  x19
2E82:  MOVLB  0
2E84:  CALL   1982
2E88:  MOVLW  10
2E8A:  MOVWF  FE9
2E8C:  MOVFF  117,119
2E90:  MOVFF  116,118
2E94:  RCALL  290A
2E96:  MOVLW  0D
2E98:  BTFSS  F9E.4
2E9A:  BRA    2E98
2E9C:  MOVWF  FAD
2E9E:  MOVLW  0A
2EA0:  BTFSS  F9E.4
2EA2:  BRA    2EA0
2EA4:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   hvd_reconnect_delay=%lu\r\n",config.ch[i].hvd_reconnect_delay);
2EA6:  MOVLB  1
2EA8:  MOVF   x15,W
2EAA:  MULLW  24
2EAC:  MOVF   FF3,W
2EAE:  CLRF   x17
2EB0:  MOVWF  x16
2EB2:  MOVLW  12
2EB4:  ADDWF  x16,W
2EB6:  MOVWF  01
2EB8:  MOVLW  00
2EBA:  ADDWFC x17,W
2EBC:  MOVWF  03
2EBE:  MOVF   01,W
2EC0:  ADDLW  1B
2EC2:  MOVWF  FE9
2EC4:  MOVLW  00
2EC6:  ADDWFC 03,W
2EC8:  MOVWF  FEA
2ECA:  MOVFF  FEC,117
2ECE:  MOVF   FED,F
2ED0:  MOVFF  FEF,116
2ED4:  MOVLW  DE
2ED6:  MOVWF  FF6
2ED8:  MOVLW  10
2EDA:  MOVWF  FF7
2EDC:  MOVLW  18
2EDE:  MOVWF  x19
2EE0:  MOVLB  0
2EE2:  CALL   1982
2EE6:  MOVLW  10
2EE8:  MOVWF  FE9
2EEA:  MOVFF  117,119
2EEE:  MOVFF  116,118
2EF2:  RCALL  290A
2EF4:  MOVLW  0D
2EF6:  BTFSS  F9E.4
2EF8:  BRA    2EF6
2EFA:  MOVWF  FAD
2EFC:  MOVLW  0A
2EFE:  BTFSS  F9E.4
2F00:  BRA    2EFE
2F02:  MOVWF  FAD
.................... 
.................... 		restart_wdt();
2F04:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"#    ltd_disconnect_adc=%lu\r\n",config.ch[i].ltd_disconnect_adc);
2F06:  MOVLB  1
2F08:  MOVF   x15,W
2F0A:  MULLW  24
2F0C:  MOVF   FF3,W
2F0E:  CLRF   x17
2F10:  MOVWF  x16
2F12:  MOVLW  14
2F14:  ADDWF  x16,W
2F16:  MOVWF  01
2F18:  MOVLW  00
2F1A:  ADDWFC x17,W
2F1C:  MOVWF  03
2F1E:  MOVF   01,W
2F20:  ADDLW  1B
2F22:  MOVWF  FE9
2F24:  MOVLW  00
2F26:  ADDWFC 03,W
2F28:  MOVWF  FEA
2F2A:  MOVFF  FEC,117
2F2E:  MOVF   FED,F
2F30:  MOVFF  FEF,116
2F34:  MOVLW  FC
2F36:  MOVWF  FF6
2F38:  MOVLW  10
2F3A:  MOVWF  FF7
2F3C:  MOVLW  18
2F3E:  MOVWF  x19
2F40:  MOVLB  0
2F42:  CALL   1982
2F46:  MOVLW  10
2F48:  MOVWF  FE9
2F4A:  MOVFF  117,119
2F4E:  MOVFF  116,118
2F52:  RCALL  290A
2F54:  MOVLW  0D
2F56:  BTFSS  F9E.4
2F58:  BRA    2F56
2F5A:  MOVWF  FAD
2F5C:  MOVLW  0A
2F5E:  BTFSS  F9E.4
2F60:  BRA    2F5E
2F62:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  ltd_disconnect_delay=%lu\r\n",config.ch[i].ltd_disconnect_delay);
2F64:  MOVLB  1
2F66:  MOVF   x15,W
2F68:  MULLW  24
2F6A:  MOVF   FF3,W
2F6C:  CLRF   x17
2F6E:  MOVWF  x16
2F70:  MOVLW  16
2F72:  ADDWF  x16,W
2F74:  MOVWF  01
2F76:  MOVLW  00
2F78:  ADDWFC x17,W
2F7A:  MOVWF  03
2F7C:  MOVF   01,W
2F7E:  ADDLW  1B
2F80:  MOVWF  FE9
2F82:  MOVLW  00
2F84:  ADDWFC 03,W
2F86:  MOVWF  FEA
2F88:  MOVFF  FEC,117
2F8C:  MOVF   FED,F
2F8E:  MOVFF  FEF,116
2F92:  MOVLW  1A
2F94:  MOVWF  FF6
2F96:  MOVLW  11
2F98:  MOVWF  FF7
2F9A:  MOVLW  18
2F9C:  MOVWF  x19
2F9E:  MOVLB  0
2FA0:  CALL   1982
2FA4:  MOVLW  10
2FA6:  MOVWF  FE9
2FA8:  MOVFF  117,119
2FAC:  MOVFF  116,118
2FB0:  RCALL  290A
2FB2:  MOVLW  0D
2FB4:  BTFSS  F9E.4
2FB6:  BRA    2FB4
2FB8:  MOVWF  FAD
2FBA:  MOVLW  0A
2FBC:  BTFSS  F9E.4
2FBE:  BRA    2FBC
2FC0:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     ltd_reconnect_adc=%lu\r\n",config.ch[i].ltd_reconnect_adc);
2FC2:  MOVLB  1
2FC4:  MOVF   x15,W
2FC6:  MULLW  24
2FC8:  MOVF   FF3,W
2FCA:  CLRF   x17
2FCC:  MOVWF  x16
2FCE:  MOVLW  18
2FD0:  ADDWF  x16,W
2FD2:  MOVWF  01
2FD4:  MOVLW  00
2FD6:  ADDWFC x17,W
2FD8:  MOVWF  03
2FDA:  MOVF   01,W
2FDC:  ADDLW  1B
2FDE:  MOVWF  FE9
2FE0:  MOVLW  00
2FE2:  ADDWFC 03,W
2FE4:  MOVWF  FEA
2FE6:  MOVFF  FEC,117
2FEA:  MOVF   FED,F
2FEC:  MOVFF  FEF,116
2FF0:  MOVLW  38
2FF2:  MOVWF  FF6
2FF4:  MOVLW  11
2FF6:  MOVWF  FF7
2FF8:  MOVLW  18
2FFA:  MOVWF  x19
2FFC:  MOVLB  0
2FFE:  CALL   1982
3002:  MOVLW  10
3004:  MOVWF  FE9
3006:  MOVFF  117,119
300A:  MOVFF  116,118
300E:  RCALL  290A
3010:  MOVLW  0D
3012:  BTFSS  F9E.4
3014:  BRA    3012
3016:  MOVWF  FAD
3018:  MOVLW  0A
301A:  BTFSS  F9E.4
301C:  BRA    301A
301E:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   ltd_reconnect_delay=%lu\r\n",config.ch[i].ltd_reconnect_delay);
3020:  MOVLB  1
3022:  MOVF   x15,W
3024:  MULLW  24
3026:  MOVF   FF3,W
3028:  CLRF   x17
302A:  MOVWF  x16
302C:  MOVLW  1A
302E:  ADDWF  x16,W
3030:  MOVWF  01
3032:  MOVLW  00
3034:  ADDWFC x17,W
3036:  MOVWF  03
3038:  MOVF   01,W
303A:  ADDLW  1B
303C:  MOVWF  FE9
303E:  MOVLW  00
3040:  ADDWFC 03,W
3042:  MOVWF  FEA
3044:  MOVFF  FEC,117
3048:  MOVF   FED,F
304A:  MOVFF  FEF,116
304E:  MOVLW  56
3050:  MOVWF  FF6
3052:  MOVLW  11
3054:  MOVWF  FF7
3056:  MOVLW  18
3058:  MOVWF  x19
305A:  MOVLB  0
305C:  CALL   1982
3060:  MOVLW  10
3062:  MOVWF  FE9
3064:  MOVFF  117,119
3068:  MOVFF  116,118
306C:  RCALL  290A
306E:  MOVLW  0D
3070:  BTFSS  F9E.4
3072:  BRA    3070
3074:  MOVWF  FAD
3076:  MOVLW  0A
3078:  BTFSS  F9E.4
307A:  BRA    3078
307C:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    htd_disconnect_adc=%lu\r\n",config.ch[i].htd_disconnect_adc);
307E:  MOVLB  1
3080:  MOVF   x15,W
3082:  MULLW  24
3084:  MOVF   FF3,W
3086:  CLRF   x17
3088:  MOVWF  x16
308A:  MOVLW  1C
308C:  ADDWF  x16,W
308E:  MOVWF  01
3090:  MOVLW  00
3092:  ADDWFC x17,W
3094:  MOVWF  03
3096:  MOVF   01,W
3098:  ADDLW  1B
309A:  MOVWF  FE9
309C:  MOVLW  00
309E:  ADDWFC 03,W
30A0:  MOVWF  FEA
30A2:  MOVFF  FEC,117
30A6:  MOVF   FED,F
30A8:  MOVFF  FEF,116
30AC:  MOVLW  74
30AE:  MOVWF  FF6
30B0:  MOVLW  11
30B2:  MOVWF  FF7
30B4:  MOVLW  18
30B6:  MOVWF  x19
30B8:  MOVLB  0
30BA:  CALL   1982
30BE:  MOVLW  10
30C0:  MOVWF  FE9
30C2:  MOVFF  117,119
30C6:  MOVFF  116,118
30CA:  RCALL  290A
30CC:  MOVLW  0D
30CE:  BTFSS  F9E.4
30D0:  BRA    30CE
30D2:  MOVWF  FAD
30D4:  MOVLW  0A
30D6:  BTFSS  F9E.4
30D8:  BRA    30D6
30DA:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  htd_disconnect_delay=%lu\r\n",config.ch[i].htd_disconnect_delay);
30DC:  MOVLB  1
30DE:  MOVF   x15,W
30E0:  MULLW  24
30E2:  MOVF   FF3,W
30E4:  CLRF   x17
30E6:  MOVWF  x16
30E8:  MOVLW  1E
30EA:  ADDWF  x16,W
30EC:  MOVWF  01
30EE:  MOVLW  00
30F0:  ADDWFC x17,W
30F2:  MOVWF  03
30F4:  MOVF   01,W
30F6:  ADDLW  1B
30F8:  MOVWF  FE9
30FA:  MOVLW  00
30FC:  ADDWFC 03,W
30FE:  MOVWF  FEA
3100:  MOVFF  FEC,117
3104:  MOVF   FED,F
3106:  MOVFF  FEF,116
310A:  MOVLW  92
310C:  MOVWF  FF6
310E:  MOVLW  11
3110:  MOVWF  FF7
3112:  MOVLW  18
3114:  MOVWF  x19
3116:  MOVLB  0
3118:  CALL   1982
311C:  MOVLW  10
311E:  MOVWF  FE9
3120:  MOVFF  117,119
3124:  MOVFF  116,118
3128:  CALL   290A
312C:  MOVLW  0D
312E:  BTFSS  F9E.4
3130:  BRA    312E
3132:  MOVWF  FAD
3134:  MOVLW  0A
3136:  BTFSS  F9E.4
3138:  BRA    3136
313A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     htd_reconnect_adc=%lu\r\n",config.ch[i].htd_reconnect_adc);
313C:  MOVLB  1
313E:  MOVF   x15,W
3140:  MULLW  24
3142:  MOVF   FF3,W
3144:  CLRF   x17
3146:  MOVWF  x16
3148:  MOVLW  20
314A:  ADDWF  x16,W
314C:  MOVWF  01
314E:  MOVLW  00
3150:  ADDWFC x17,W
3152:  MOVWF  03
3154:  MOVF   01,W
3156:  ADDLW  1B
3158:  MOVWF  FE9
315A:  MOVLW  00
315C:  ADDWFC 03,W
315E:  MOVWF  FEA
3160:  MOVFF  FEC,117
3164:  MOVF   FED,F
3166:  MOVFF  FEF,116
316A:  MOVLW  B0
316C:  MOVWF  FF6
316E:  MOVLW  11
3170:  MOVWF  FF7
3172:  MOVLW  18
3174:  MOVWF  x19
3176:  MOVLB  0
3178:  CALL   1982
317C:  MOVLW  10
317E:  MOVWF  FE9
3180:  MOVFF  117,119
3184:  MOVFF  116,118
3188:  CALL   290A
318C:  MOVLW  0D
318E:  BTFSS  F9E.4
3190:  BRA    318E
3192:  MOVWF  FAD
3194:  MOVLW  0A
3196:  BTFSS  F9E.4
3198:  BRA    3196
319A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   htd_reconnect_delay=%lu\r\n",config.ch[i].htd_reconnect_delay);
319C:  MOVLB  1
319E:  MOVF   x15,W
31A0:  MULLW  24
31A2:  MOVF   FF3,W
31A4:  CLRF   x17
31A6:  MOVWF  x16
31A8:  MOVLW  22
31AA:  ADDWF  x16,W
31AC:  MOVWF  01
31AE:  MOVLW  00
31B0:  ADDWFC x17,W
31B2:  MOVWF  03
31B4:  MOVF   01,W
31B6:  ADDLW  1B
31B8:  MOVWF  FE9
31BA:  MOVLW  00
31BC:  ADDWFC 03,W
31BE:  MOVWF  FEA
31C0:  MOVFF  FEC,117
31C4:  MOVF   FED,F
31C6:  MOVFF  FEF,116
31CA:  MOVLW  CE
31CC:  MOVWF  FF6
31CE:  MOVLW  11
31D0:  MOVWF  FF7
31D2:  MOVLW  18
31D4:  MOVWF  x19
31D6:  MOVLB  0
31D8:  CALL   1982
31DC:  MOVLW  10
31DE:  MOVWF  FE9
31E0:  MOVFF  117,119
31E4:  MOVFF  116,118
31E8:  CALL   290A
31EC:  MOVLW  0D
31EE:  BTFSS  F9E.4
31F0:  BRA    31EE
31F2:  MOVWF  FAD
31F4:  MOVLW  0A
31F6:  BTFSS  F9E.4
31F8:  BRA    31F6
31FA:  MOVWF  FAD
.................... 
.................... 
.................... 		restart_wdt();
31FC:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# channel[%u]\r\n",i);
31FE:  MOVLW  EC
3200:  MOVWF  FF6
3202:  MOVLW  11
3204:  MOVWF  FF7
3206:  MOVLW  0A
3208:  MOVLB  1
320A:  MOVWF  x19
320C:  MOVLB  0
320E:  CALL   1982
3212:  MOVFF  115,116
3216:  MOVLW  1B
3218:  MOVLB  1
321A:  MOVWF  x17
321C:  MOVLB  0
321E:  CALL   288C
3222:  MOVLW  F8
3224:  MOVWF  FF6
3226:  MOVLW  11
3228:  MOVWF  FF7
322A:  MOVLW  03
322C:  MOVLB  1
322E:  MOVWF  x19
3230:  MOVLB  0
3232:  CALL   1982
.................... 		fprintf(STREAM_FTDI,"#                        state=0x%02x\r\n",channel[i].state);
3236:  MOVLB  1
3238:  MOVF   x15,W
323A:  MULLW  19
323C:  MOVF   FF3,W
323E:  CLRF   x17
3240:  MOVWF  x16
3242:  MOVLW  D4
3244:  ADDWF  x16,W
3246:  MOVWF  FE9
3248:  MOVLW  00
324A:  ADDWFC x17,W
324C:  MOVWF  FEA
324E:  MOVFF  FEF,118
3252:  MOVLW  FC
3254:  MOVWF  FF6
3256:  MOVLW  11
3258:  MOVWF  FF7
325A:  MOVLW  21
325C:  MOVWF  x19
325E:  MOVLB  0
3260:  CALL   1982
3264:  MOVFF  118,119
3268:  MOVLW  57
326A:  MOVLB  1
326C:  MOVWF  x1A
326E:  MOVLB  0
3270:  GOTO   29BC
3274:  MOVLW  0D
3276:  BTFSS  F9E.4
3278:  BRA    3276
327A:  MOVWF  FAD
327C:  MOVLW  0A
327E:  BTFSS  F9E.4
3280:  BRA    327E
3282:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#           command_on_seconds=%lu\r\n",channel[i].command_on_seconds);
3284:  MOVLB  1
3286:  MOVF   x15,W
3288:  MULLW  19
328A:  MOVF   FF3,W
328C:  CLRF   x17
328E:  MOVWF  x16
3290:  MOVLW  01
3292:  ADDWF  x16,W
3294:  MOVWF  01
3296:  MOVLW  00
3298:  ADDWFC x17,W
329A:  MOVWF  03
329C:  MOVF   01,W
329E:  ADDLW  D4
32A0:  MOVWF  FE9
32A2:  MOVLW  00
32A4:  ADDWFC 03,W
32A6:  MOVWF  FEA
32A8:  MOVFF  FEC,117
32AC:  MOVF   FED,F
32AE:  MOVFF  FEF,116
32B2:  MOVLW  24
32B4:  MOVWF  FF6
32B6:  MOVLW  12
32B8:  MOVWF  FF7
32BA:  MOVLW  1F
32BC:  MOVWF  x19
32BE:  MOVLB  0
32C0:  CALL   1982
32C4:  MOVLW  10
32C6:  MOVWF  FE9
32C8:  MOVFF  117,119
32CC:  MOVFF  116,118
32D0:  CALL   290A
32D4:  MOVLW  0D
32D6:  BTFSS  F9E.4
32D8:  BRA    32D6
32DA:  MOVWF  FAD
32DC:  MOVLW  0A
32DE:  BTFSS  F9E.4
32E0:  BRA    32DE
32E2:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#      command_on_hold_seconds=%lu\r\n",channel[i].command_on_hold_seconds);
32E4:  MOVLB  1
32E6:  MOVF   x15,W
32E8:  MULLW  19
32EA:  MOVF   FF3,W
32EC:  CLRF   x17
32EE:  MOVWF  x16
32F0:  MOVLW  03
32F2:  ADDWF  x16,W
32F4:  MOVWF  01
32F6:  MOVLW  00
32F8:  ADDWFC x17,W
32FA:  MOVWF  03
32FC:  MOVF   01,W
32FE:  ADDLW  D4
3300:  MOVWF  FE9
3302:  MOVLW  00
3304:  ADDWFC 03,W
3306:  MOVWF  FEA
3308:  MOVFF  FEC,117
330C:  MOVF   FED,F
330E:  MOVFF  FEF,116
3312:  MOVLW  4A
3314:  MOVWF  FF6
3316:  MOVLW  12
3318:  MOVWF  FF7
331A:  MOVLW  1F
331C:  MOVWF  x19
331E:  MOVLB  0
3320:  CALL   1982
3324:  MOVLW  10
3326:  MOVWF  FE9
3328:  MOVFF  117,119
332C:  MOVFF  116,118
3330:  CALL   290A
3334:  MOVLW  0D
3336:  BTFSS  F9E.4
3338:  BRA    3336
333A:  MOVWF  FAD
333C:  MOVLW  0A
333E:  BTFSS  F9E.4
3340:  BRA    333E
3342:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#          command_off_seconds=%lu\r\n",channel[i].command_off_seconds);
3344:  MOVLB  1
3346:  MOVF   x15,W
3348:  MULLW  19
334A:  MOVF   FF3,W
334C:  CLRF   x17
334E:  MOVWF  x16
3350:  MOVLW  05
3352:  ADDWF  x16,W
3354:  MOVWF  01
3356:  MOVLW  00
3358:  ADDWFC x17,W
335A:  MOVWF  03
335C:  MOVF   01,W
335E:  ADDLW  D4
3360:  MOVWF  FE9
3362:  MOVLW  00
3364:  ADDWFC 03,W
3366:  MOVWF  FEA
3368:  MOVFF  FEC,117
336C:  MOVF   FED,F
336E:  MOVFF  FEF,116
3372:  MOVLW  70
3374:  MOVWF  FF6
3376:  MOVLW  12
3378:  MOVWF  FF7
337A:  MOVLW  1F
337C:  MOVWF  x19
337E:  MOVLB  0
3380:  CALL   1982
3384:  MOVLW  10
3386:  MOVWF  FE9
3388:  MOVFF  117,119
338C:  MOVFF  116,118
3390:  CALL   290A
3394:  MOVLW  0D
3396:  BTFSS  F9E.4
3398:  BRA    3396
339A:  MOVWF  FAD
339C:  MOVLW  0A
339E:  BTFSS  F9E.4
33A0:  BRA    339E
33A2:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     command_off_hold_seconds=%lu\r\n",channel[i].command_off_hold_seconds);
33A4:  MOVLB  1
33A6:  MOVF   x15,W
33A8:  MULLW  19
33AA:  MOVF   FF3,W
33AC:  CLRF   x17
33AE:  MOVWF  x16
33B0:  MOVLW  07
33B2:  ADDWF  x16,W
33B4:  MOVWF  01
33B6:  MOVLW  00
33B8:  ADDWFC x17,W
33BA:  MOVWF  03
33BC:  MOVF   01,W
33BE:  ADDLW  D4
33C0:  MOVWF  FE9
33C2:  MOVLW  00
33C4:  ADDWFC 03,W
33C6:  MOVWF  FEA
33C8:  MOVFF  FEC,117
33CC:  MOVF   FED,F
33CE:  MOVFF  FEF,116
33D2:  MOVLW  96
33D4:  MOVWF  FF6
33D6:  MOVLW  12
33D8:  MOVWF  FF7
33DA:  MOVLW  1F
33DC:  MOVWF  x19
33DE:  MOVLB  0
33E0:  CALL   1982
33E4:  MOVLW  10
33E6:  MOVWF  FE9
33E8:  MOVFF  117,119
33EC:  MOVFF  116,118
33F0:  CALL   290A
33F4:  MOVLW  0D
33F6:  BTFSS  F9E.4
33F8:  BRA    33F6
33FA:  MOVWF  FAD
33FC:  MOVLW  0A
33FE:  BTFSS  F9E.4
3400:  BRA    33FE
3402:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# lvd_disconnect_delay_seconds=%lu\r\n",channel[i].lvd_disconnect_delay_seconds);
3404:  MOVLB  1
3406:  MOVF   x15,W
3408:  MULLW  19
340A:  MOVF   FF3,W
340C:  CLRF   x17
340E:  MOVWF  x16
3410:  MOVLW  09
3412:  ADDWF  x16,W
3414:  MOVWF  01
3416:  MOVLW  00
3418:  ADDWFC x17,W
341A:  MOVWF  03
341C:  MOVF   01,W
341E:  ADDLW  D4
3420:  MOVWF  FE9
3422:  MOVLW  00
3424:  ADDWFC 03,W
3426:  MOVWF  FEA
3428:  MOVFF  FEC,117
342C:  MOVF   FED,F
342E:  MOVFF  FEF,116
3432:  MOVLW  BC
3434:  MOVWF  FF6
3436:  MOVLW  12
3438:  MOVWF  FF7
343A:  MOVLW  1F
343C:  MOVWF  x19
343E:  MOVLB  0
3440:  CALL   1982
3444:  MOVLW  10
3446:  MOVWF  FE9
3448:  MOVFF  117,119
344C:  MOVFF  116,118
3450:  CALL   290A
3454:  MOVLW  0D
3456:  BTFSS  F9E.4
3458:  BRA    3456
345A:  MOVWF  FAD
345C:  MOVLW  0A
345E:  BTFSS  F9E.4
3460:  BRA    345E
3462:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  lvd_reconnect_delay_seconds=%lu\r\n",channel[i].lvd_reconnect_delay_seconds);
3464:  MOVLB  1
3466:  MOVF   x15,W
3468:  MULLW  19
346A:  MOVF   FF3,W
346C:  CLRF   x17
346E:  MOVWF  x16
3470:  MOVLW  0B
3472:  ADDWF  x16,W
3474:  MOVWF  01
3476:  MOVLW  00
3478:  ADDWFC x17,W
347A:  MOVWF  03
347C:  MOVF   01,W
347E:  ADDLW  D4
3480:  MOVWF  FE9
3482:  MOVLW  00
3484:  ADDWFC 03,W
3486:  MOVWF  FEA
3488:  MOVFF  FEC,117
348C:  MOVF   FED,F
348E:  MOVFF  FEF,116
3492:  MOVLW  E2
3494:  MOVWF  FF6
3496:  MOVLW  12
3498:  MOVWF  FF7
349A:  MOVLW  1F
349C:  MOVWF  x19
349E:  MOVLB  0
34A0:  CALL   1982
34A4:  MOVLW  10
34A6:  MOVWF  FE9
34A8:  MOVFF  117,119
34AC:  MOVFF  116,118
34B0:  CALL   290A
34B4:  MOVLW  0D
34B6:  BTFSS  F9E.4
34B8:  BRA    34B6
34BA:  MOVWF  FAD
34BC:  MOVLW  0A
34BE:  BTFSS  F9E.4
34C0:  BRA    34BE
34C2:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# hvd_disconnect_delay_seconds=%lu\r\n",channel[i].hvd_disconnect_delay_seconds);
34C4:  MOVLB  1
34C6:  MOVF   x15,W
34C8:  MULLW  19
34CA:  MOVF   FF3,W
34CC:  CLRF   x17
34CE:  MOVWF  x16
34D0:  MOVLW  0D
34D2:  ADDWF  x16,W
34D4:  MOVWF  01
34D6:  MOVLW  00
34D8:  ADDWFC x17,W
34DA:  MOVWF  03
34DC:  MOVF   01,W
34DE:  ADDLW  D4
34E0:  MOVWF  FE9
34E2:  MOVLW  00
34E4:  ADDWFC 03,W
34E6:  MOVWF  FEA
34E8:  MOVFF  FEC,117
34EC:  MOVF   FED,F
34EE:  MOVFF  FEF,116
34F2:  MOVLW  08
34F4:  MOVWF  FF6
34F6:  MOVLW  13
34F8:  MOVWF  FF7
34FA:  MOVLW  1F
34FC:  MOVWF  x19
34FE:  MOVLB  0
3500:  CALL   1982
3504:  MOVLW  10
3506:  MOVWF  FE9
3508:  MOVFF  117,119
350C:  MOVFF  116,118
3510:  CALL   290A
3514:  MOVLW  0D
3516:  BTFSS  F9E.4
3518:  BRA    3516
351A:  MOVWF  FAD
351C:  MOVLW  0A
351E:  BTFSS  F9E.4
3520:  BRA    351E
3522:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  hvd_reconnect_delay_seconds=%lu\r\n",channel[i].hvd_reconnect_delay_seconds);
3524:  MOVLB  1
3526:  MOVF   x15,W
3528:  MULLW  19
352A:  MOVF   FF3,W
352C:  CLRF   x17
352E:  MOVWF  x16
3530:  MOVLW  0F
3532:  ADDWF  x16,W
3534:  MOVWF  01
3536:  MOVLW  00
3538:  ADDWFC x17,W
353A:  MOVWF  03
353C:  MOVF   01,W
353E:  ADDLW  D4
3540:  MOVWF  FE9
3542:  MOVLW  00
3544:  ADDWFC 03,W
3546:  MOVWF  FEA
3548:  MOVFF  FEC,117
354C:  MOVF   FED,F
354E:  MOVFF  FEF,116
3552:  MOVLW  2E
3554:  MOVWF  FF6
3556:  MOVLW  13
3558:  MOVWF  FF7
355A:  MOVLW  1F
355C:  MOVWF  x19
355E:  MOVLB  0
3560:  CALL   1982
3564:  MOVLW  10
3566:  MOVWF  FE9
3568:  MOVFF  117,119
356C:  MOVFF  116,118
3570:  CALL   290A
3574:  MOVLW  0D
3576:  BTFSS  F9E.4
3578:  BRA    3576
357A:  MOVWF  FAD
357C:  MOVLW  0A
357E:  BTFSS  F9E.4
3580:  BRA    357E
3582:  MOVWF  FAD
.................... 
.................... 		restart_wdt();
3584:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# ltd_disconnect_delay_seconds=%lu\r\n",channel[i].ltd_disconnect_delay_seconds);
3586:  MOVLB  1
3588:  MOVF   x15,W
358A:  MULLW  19
358C:  MOVF   FF3,W
358E:  CLRF   x17
3590:  MOVWF  x16
3592:  MOVLW  11
3594:  ADDWF  x16,W
3596:  MOVWF  01
3598:  MOVLW  00
359A:  ADDWFC x17,W
359C:  MOVWF  03
359E:  MOVF   01,W
35A0:  ADDLW  D4
35A2:  MOVWF  FE9
35A4:  MOVLW  00
35A6:  ADDWFC 03,W
35A8:  MOVWF  FEA
35AA:  MOVFF  FEC,117
35AE:  MOVF   FED,F
35B0:  MOVFF  FEF,116
35B4:  MOVLW  54
35B6:  MOVWF  FF6
35B8:  MOVLW  13
35BA:  MOVWF  FF7
35BC:  MOVLW  1F
35BE:  MOVWF  x19
35C0:  MOVLB  0
35C2:  CALL   1982
35C6:  MOVLW  10
35C8:  MOVWF  FE9
35CA:  MOVFF  117,119
35CE:  MOVFF  116,118
35D2:  CALL   290A
35D6:  MOVLW  0D
35D8:  BTFSS  F9E.4
35DA:  BRA    35D8
35DC:  MOVWF  FAD
35DE:  MOVLW  0A
35E0:  BTFSS  F9E.4
35E2:  BRA    35E0
35E4:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  ltd_reconnect_delay_seconds=%lu\r\n",channel[i].ltd_reconnect_delay_seconds);
35E6:  MOVLB  1
35E8:  MOVF   x15,W
35EA:  MULLW  19
35EC:  MOVF   FF3,W
35EE:  CLRF   x17
35F0:  MOVWF  x16
35F2:  MOVLW  13
35F4:  ADDWF  x16,W
35F6:  MOVWF  01
35F8:  MOVLW  00
35FA:  ADDWFC x17,W
35FC:  MOVWF  03
35FE:  MOVF   01,W
3600:  ADDLW  D4
3602:  MOVWF  FE9
3604:  MOVLW  00
3606:  ADDWFC 03,W
3608:  MOVWF  FEA
360A:  MOVFF  FEC,117
360E:  MOVF   FED,F
3610:  MOVFF  FEF,116
3614:  MOVLW  7A
3616:  MOVWF  FF6
3618:  MOVLW  13
361A:  MOVWF  FF7
361C:  MOVLW  1F
361E:  MOVWF  x19
3620:  MOVLB  0
3622:  CALL   1982
3626:  MOVLW  10
3628:  MOVWF  FE9
362A:  MOVFF  117,119
362E:  MOVFF  116,118
3632:  CALL   290A
3636:  MOVLW  0D
3638:  BTFSS  F9E.4
363A:  BRA    3638
363C:  MOVWF  FAD
363E:  MOVLW  0A
3640:  BTFSS  F9E.4
3642:  BRA    3640
3644:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# htd_disconnect_delay_seconds=%lu\r\n",channel[i].htd_disconnect_delay_seconds);
3646:  MOVLB  1
3648:  MOVF   x15,W
364A:  MULLW  19
364C:  MOVF   FF3,W
364E:  CLRF   x17
3650:  MOVWF  x16
3652:  MOVLW  15
3654:  ADDWF  x16,W
3656:  MOVWF  01
3658:  MOVLW  00
365A:  ADDWFC x17,W
365C:  MOVWF  03
365E:  MOVF   01,W
3660:  ADDLW  D4
3662:  MOVWF  FE9
3664:  MOVLW  00
3666:  ADDWFC 03,W
3668:  MOVWF  FEA
366A:  MOVFF  FEC,117
366E:  MOVF   FED,F
3670:  MOVFF  FEF,116
3674:  MOVLW  A0
3676:  MOVWF  FF6
3678:  MOVLW  13
367A:  MOVWF  FF7
367C:  MOVLW  1F
367E:  MOVWF  x19
3680:  MOVLB  0
3682:  CALL   1982
3686:  MOVLW  10
3688:  MOVWF  FE9
368A:  MOVFF  117,119
368E:  MOVFF  116,118
3692:  CALL   290A
3696:  MOVLW  0D
3698:  BTFSS  F9E.4
369A:  BRA    3698
369C:  MOVWF  FAD
369E:  MOVLW  0A
36A0:  BTFSS  F9E.4
36A2:  BRA    36A0
36A4:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  htd_reconnect_delay_seconds=%lu\r\n",channel[i].htd_reconnect_delay_seconds);
36A6:  MOVLB  1
36A8:  MOVF   x15,W
36AA:  MULLW  19
36AC:  MOVF   FF3,W
36AE:  CLRF   x17
36B0:  MOVWF  x16
36B2:  MOVLW  17
36B4:  ADDWF  x16,W
36B6:  MOVWF  01
36B8:  MOVLW  00
36BA:  ADDWFC x17,W
36BC:  MOVWF  03
36BE:  MOVF   01,W
36C0:  ADDLW  D4
36C2:  MOVWF  FE9
36C4:  MOVLW  00
36C6:  ADDWFC 03,W
36C8:  MOVWF  FEA
36CA:  MOVFF  FEC,117
36CE:  MOVF   FED,F
36D0:  MOVFF  FEF,116
36D4:  MOVLW  C6
36D6:  MOVWF  FF6
36D8:  MOVLW  13
36DA:  MOVWF  FF7
36DC:  MOVLW  1F
36DE:  MOVWF  x19
36E0:  MOVLB  0
36E2:  CALL   1982
36E6:  MOVLW  10
36E8:  MOVWF  FE9
36EA:  MOVFF  117,119
36EE:  MOVFF  116,118
36F2:  CALL   290A
36F6:  MOVLW  0D
36F8:  BTFSS  F9E.4
36FA:  BRA    36F8
36FC:  MOVWF  FAD
36FE:  MOVLW  0A
3700:  BTFSS  F9E.4
3702:  BRA    3700
3704:  MOVWF  FAD
3706:  MOVLB  1
3708:  INCF   x15,F
370A:  GOTO   2B76
.................... 
.................... 	}
370E:  MOVLB  0
3710:  GOTO   38FA (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... 
.................... void contactor_on(int8 c) {
.................... 	/* only turn on contactor if it isn't on or needs a refresh */
.................... 	if ( 1 == timers.contactor[c] )
*
26CA:  MOVFF  117,118
26CE:  MOVLB  1
26D0:  CLRF   x1A
26D2:  MOVLW  CF
26D4:  MOVWF  x19
26D6:  MOVLB  0
26D8:  RCALL  25FE
26DA:  BTFSS  01.0
26DC:  BRA    26E0
.................... 		return;
26DE:  BRA    271C
.................... 
.................... 	timers.contactor_powersave[c]=CONTACTOR_POWER_SAVE_MS;
26E0:  CLRF   03
26E2:  MOVLB  1
26E4:  MOVF   x17,W
26E6:  ADDLW  D2
26E8:  MOVWF  FE9
26EA:  MOVLW  00
26EC:  ADDWFC 03,W
26EE:  MOVWF  FEA
26F0:  MOVLW  C8
26F2:  MOVWF  FEF
.................... 
.................... 	if ( 0==c ) {
26F4:  MOVF   x17,F
26F6:  BNZ   2702
.................... 		/* contactor A pins */
.................... 		output_high(BRIDGE_A_A);
26F8:  BCF    F94.3
26FA:  BSF    F8B.3
.................... 		output_low(BRIDGE_A_B);
26FC:  BCF    F94.4
26FE:  BCF    F8B.4
.................... 	} else {
2700:  BRA    270A
.................... 		/* contactor B pins */
.................... 		output_high(BRIDGE_B_A);
2702:  BCF    F94.5
2704:  BSF    F8B.5
.................... 		output_low(BRIDGE_B_B);
2706:  BCF    F94.6
2708:  BCF    F8B.6
.................... 	}
.................... 
.................... 	timers.contactor[c]=1;
270A:  MOVFF  117,118
270E:  MOVLW  01
2710:  MOVWF  x19
2712:  CLRF   x1B
2714:  MOVLW  CF
2716:  MOVWF  x1A
2718:  MOVLB  0
271A:  RCALL  2634
271C:  GOTO   277C (RETURN)
.................... }
.................... 
.................... void contactor_off(int8 c) {
.................... 	/* only turn off contactor if it isn't on or needs a refresh */
.................... 	if ( 0 == timers.contactor[c] )
*
2676:  MOVFF  117,118
267A:  MOVLB  1
267C:  CLRF   x1A
267E:  MOVLW  CF
2680:  MOVWF  x19
2682:  MOVLB  0
2684:  RCALL  25FE
2686:  BTFSC  01.0
2688:  BRA    268C
.................... 		return;
268A:  BRA    26C6
.................... 
.................... 	timers.contactor_powersave[c]=CONTACTOR_POWER_SAVE_MS;
268C:  CLRF   03
268E:  MOVLB  1
2690:  MOVF   x17,W
2692:  ADDLW  D2
2694:  MOVWF  FE9
2696:  MOVLW  00
2698:  ADDWFC 03,W
269A:  MOVWF  FEA
269C:  MOVLW  C8
269E:  MOVWF  FEF
.................... 
.................... 	if ( 0==c ) {
26A0:  MOVF   x17,F
26A2:  BNZ   26AE
.................... 		output_low(BRIDGE_A_A);
26A4:  BCF    F94.3
26A6:  BCF    F8B.3
.................... 		output_high(BRIDGE_A_B);
26A8:  BCF    F94.4
26AA:  BSF    F8B.4
.................... 	} else {
26AC:  BRA    26B6
.................... 		output_low(BRIDGE_B_A);
26AE:  BCF    F94.5
26B0:  BCF    F8B.5
.................... 		output_high(BRIDGE_B_B);
26B2:  BCF    F94.6
26B4:  BSF    F8B.6
.................... 	}
.................... 
.................... 	timers.contactor[c]=0;
26B6:  MOVFF  117,118
26BA:  CLRF   x19
26BC:  CLRF   x1B
26BE:  MOVLW  CF
26C0:  MOVWF  x1A
26C2:  MOVLB  0
26C4:  RCALL  2634
26C6:  GOTO   2770 (RETURN)
.................... }
.................... 
.................... void contactor_set(int8 c) {
*
2720:  MOVLB  1
2722:  BSF    x16.0
.................... 	int1 state=1;
.................... 
.................... 	/* if nothing is set in channel[c].state, contactor is on */
.................... 	state=1; 
2724:  BSF    x16.0
.................... 
.................... 	if ( channel[c].state & CH_STATE_MASK_ON ) {
2726:  MOVF   x15,W
2728:  MULLW  19
272A:  MOVF   FF3,W
272C:  CLRF   x18
272E:  MOVWF  x17
2730:  MOVLW  D4
2732:  ADDWF  x17,W
2734:  MOVWF  FE9
2736:  MOVLW  00
2738:  ADDWFC x18,W
273A:  MOVWF  FEA
273C:  MOVF   FEF,W
273E:  ANDLW  03
2740:  BZ    2746
.................... 		/* if override button (switch) is set or we are commanded on, then we will be on */
.................... 		state=1;
2742:  BSF    x16.0
.................... 	} else if ( channel[c].state & CH_STATE_MASK_OFF ) {
2744:  BRA    2764
2746:  MOVF   x15,W
2748:  MULLW  19
274A:  MOVF   FF3,W
274C:  CLRF   x18
274E:  MOVWF  x17
2750:  MOVLW  D4
2752:  ADDWF  x17,W
2754:  MOVWF  FE9
2756:  MOVLW  00
2758:  ADDWFC x18,W
275A:  MOVWF  FEA
275C:  MOVF   FEF,W
275E:  ANDLW  7C
2760:  BZ    2764
.................... 		/* if one of the disconnect bits is set, we will be off */
.................... 		state=0;
2762:  BCF    x16.0
.................... 	}
.................... 
.................... 	if ( 0==state ) {
2764:  BTFSC  x16.0
2766:  BRA    2774
.................... 		contactor_off(c);
2768:  MOVFF  115,117
276C:  MOVLB  0
276E:  BRA    2676
.................... 	} else {
2770:  BRA    277C
2772:  MOVLB  1
.................... 		contactor_on(c);
2774:  MOVFF  115,117
2778:  MOVLB  0
277A:  BRA    26CA
.................... 	}
277C:  RETURN 0
.................... 
.................... }
.................... 
.................... void contactor_logic(int8 c) {
.................... 	int16 adc;
.................... 
.................... 	/* override button / switch */
.................... 	if ( (0==c && 0==input(SW_OVERRIDE_A)) || (1==c && 0==input(SW_OVERRIDE_B)) ) {
*
1A6C:  MOVLB  1
1A6E:  MOVF   x15,F
1A70:  BNZ   1A78
1A72:  BSF    F92.5
1A74:  BTFSS  F80.5
1A76:  BRA    1A82
1A78:  DECFSZ x15,W
1A7A:  BRA    1A9E
1A7C:  BSF    F92.4
1A7E:  BTFSC  F80.4
1A80:  BRA    1A9E
.................... 		bit_set(channel[c].state,CH_STATE_BIT_OVERRIDE);
1A82:  MOVF   x15,W
1A84:  MULLW  19
1A86:  MOVF   FF3,W
1A88:  CLRF   x19
1A8A:  MOVWF  x18
1A8C:  MOVLW  D4
1A8E:  ADDWF  x18,W
1A90:  MOVWF  01
1A92:  MOVLW  00
1A94:  ADDWFC x19,W
1A96:  MOVFF  01,FE9
1A9A:  MOVWF  FEA
1A9C:  BSF    FEF.0
.................... 	}
.................... 
.................... 	/* command on. 65535 disables */
.................... 	if ( 65535 != channel[c].command_on_seconds ) {
1A9E:  MOVF   x15,W
1AA0:  MULLW  19
1AA2:  MOVF   FF3,W
1AA4:  CLRF   x19
1AA6:  MOVWF  x18
1AA8:  MOVLW  01
1AAA:  ADDWF  x18,W
1AAC:  MOVWF  01
1AAE:  MOVLW  00
1AB0:  ADDWFC x19,W
1AB2:  MOVWF  03
1AB4:  MOVF   01,W
1AB6:  ADDLW  D4
1AB8:  MOVWF  FE9
1ABA:  MOVLW  00
1ABC:  ADDWFC 03,W
1ABE:  MOVWF  FEA
1AC0:  MOVFF  FEC,03
1AC4:  MOVF   FED,F
1AC6:  MOVF   FEF,W
1AC8:  SUBLW  FF
1ACA:  BNZ   1AD2
1ACC:  INCFSZ 03,W
1ACE:  BRA    1AD2
1AD0:  BRA    1C68
.................... 		if ( channel[c].command_on_seconds > 0 ) {
1AD2:  MOVF   x15,W
1AD4:  MULLW  19
1AD6:  MOVF   FF3,W
1AD8:  CLRF   x19
1ADA:  MOVWF  x18
1ADC:  MOVLW  01
1ADE:  ADDWF  x18,W
1AE0:  MOVWF  01
1AE2:  MOVLW  00
1AE4:  ADDWFC x19,W
1AE6:  MOVWF  03
1AE8:  MOVF   01,W
1AEA:  ADDLW  D4
1AEC:  MOVWF  FE9
1AEE:  MOVLW  00
1AF0:  ADDWFC 03,W
1AF2:  MOVWF  FEA
1AF4:  MOVFF  FEC,119
1AF8:  MOVF   FED,F
1AFA:  MOVFF  FEF,118
1AFE:  MOVF   x18,F
1B00:  BNZ   1B06
1B02:  MOVF   x19,F
1B04:  BZ    1B34
.................... 			/* waiting to power on */
.................... 			channel[c].command_on_seconds--;
1B06:  MOVF   x15,W
1B08:  MULLW  19
1B0A:  MOVF   FF3,W
1B0C:  CLRF   x19
1B0E:  MOVWF  x18
1B10:  MOVLW  01
1B12:  ADDWF  x18,W
1B14:  MOVWF  01
1B16:  MOVLW  00
1B18:  ADDWFC x19,W
1B1A:  MOVWF  03
1B1C:  MOVF   01,W
1B1E:  ADDLW  D4
1B20:  MOVWF  FE9
1B22:  MOVLW  00
1B24:  ADDWFC 03,W
1B26:  MOVWF  FEA
1B28:  MOVLW  FF
1B2A:  ADDWF  FEF,F
1B2C:  BC    1B32
1B2E:  MOVF   FEE,F
1B30:  DECF   FED,F
.................... 		} else {
1B32:  BRA    1C68
.................... 			/* timer at zero, ready to power on or already powered on */
.................... 			if ( ! bit_test(channel[c].state,CH_STATE_BIT_CMD_ON) ) {
1B34:  MOVF   x15,W
1B36:  MULLW  19
1B38:  MOVF   FF3,W
1B3A:  CLRF   x19
1B3C:  MOVWF  x18
1B3E:  MOVLW  D4
1B40:  ADDWF  x18,W
1B42:  MOVWF  FE9
1B44:  MOVLW  00
1B46:  ADDWFC x19,W
1B48:  MOVWF  FEA
1B4A:  MOVFF  FEF,11A
1B4E:  BTFSC  x1A.1
1B50:  BRA    1BC6
.................... 				/* not currently set, so we set it and start the countdown */
.................... 				bit_set(channel[c].state,CH_STATE_BIT_CMD_ON);
1B52:  MOVF   x15,W
1B54:  MULLW  19
1B56:  MOVF   FF3,W
1B58:  CLRF   x19
1B5A:  MOVWF  x18
1B5C:  MOVLW  D4
1B5E:  ADDWF  x18,W
1B60:  MOVWF  01
1B62:  MOVLW  00
1B64:  ADDWFC x19,W
1B66:  MOVFF  01,FE9
1B6A:  MOVWF  FEA
1B6C:  BSF    FEF.1
.................... 				channel[c].command_on_hold_seconds=config.ch[c].command_on_hold_time;
1B6E:  MOVF   x15,W
1B70:  MULLW  19
1B72:  MOVF   FF3,W
1B74:  CLRF   x19
1B76:  MOVWF  x18
1B78:  MOVLW  03
1B7A:  ADDWF  x18,W
1B7C:  MOVWF  01
1B7E:  MOVLW  00
1B80:  ADDWFC x19,W
1B82:  MOVWF  03
1B84:  MOVF   01,W
1B86:  ADDLW  D4
1B88:  MOVWF  01
1B8A:  MOVLW  00
1B8C:  ADDWFC 03,F
1B8E:  MOVFF  03,119
1B92:  MOVF   x15,W
1B94:  MULLW  24
1B96:  MOVF   FF3,W
1B98:  CLRF   x1B
1B9A:  MOVWF  x1A
1B9C:  MOVLW  1B
1B9E:  ADDWF  x1A,W
1BA0:  MOVWF  FE9
1BA2:  MOVLW  00
1BA4:  ADDWFC x1B,W
1BA6:  MOVWF  FEA
1BA8:  MOVFF  FEC,03
1BAC:  MOVF   FED,F
1BAE:  MOVFF  FEF,11C
1BB2:  MOVFF  119,FEA
1BB6:  MOVFF  01,FE9
1BBA:  MOVFF  03,FEC
1BBE:  MOVF   FED,F
1BC0:  MOVFF  11C,FEF
.................... 			} else {
1BC4:  BRA    1C68
.................... 				/* set, so we clear it once countdown has elapsed */
.................... 				if ( 0==channel[c].command_on_hold_seconds ) {
1BC6:  MOVF   x15,W
1BC8:  MULLW  19
1BCA:  MOVF   FF3,W
1BCC:  CLRF   x19
1BCE:  MOVWF  x18
1BD0:  MOVLW  03
1BD2:  ADDWF  x18,W
1BD4:  MOVWF  01
1BD6:  MOVLW  00
1BD8:  ADDWFC x19,W
1BDA:  MOVWF  03
1BDC:  MOVF   01,W
1BDE:  ADDLW  D4
1BE0:  MOVWF  FE9
1BE2:  MOVLW  00
1BE4:  ADDWFC 03,W
1BE6:  MOVWF  FEA
1BE8:  MOVFF  FEC,03
1BEC:  MOVF   FED,F
1BEE:  MOVF   FEF,W
1BF0:  BNZ   1C3C
1BF2:  MOVF   03,F
1BF4:  BNZ   1C3C
.................... 					/* countdown elapsed, clear the flag and reset the timer */
.................... 					bit_clear(channel[c].state,CH_STATE_BIT_CMD_ON);
1BF6:  MOVF   x15,W
1BF8:  MULLW  19
1BFA:  MOVF   FF3,W
1BFC:  CLRF   x19
1BFE:  MOVWF  x18
1C00:  MOVLW  D4
1C02:  ADDWF  x18,W
1C04:  MOVWF  01
1C06:  MOVLW  00
1C08:  ADDWFC x19,W
1C0A:  MOVFF  01,FE9
1C0E:  MOVWF  FEA
1C10:  BCF    FEF.1
.................... 					channel[c].command_on_seconds=65535;
1C12:  MOVF   x15,W
1C14:  MULLW  19
1C16:  MOVF   FF3,W
1C18:  CLRF   x19
1C1A:  MOVWF  x18
1C1C:  MOVLW  01
1C1E:  ADDWF  x18,W
1C20:  MOVWF  01
1C22:  MOVLW  00
1C24:  ADDWFC x19,W
1C26:  MOVWF  03
1C28:  MOVF   01,W
1C2A:  ADDLW  D4
1C2C:  MOVWF  FE9
1C2E:  MOVLW  00
1C30:  ADDWFC 03,W
1C32:  MOVWF  FEA
1C34:  SETF   FEC
1C36:  MOVF   FED,F
1C38:  SETF   FEF
.................... 				} else {
1C3A:  BRA    1C68
.................... 					channel[c].command_on_hold_seconds--;
1C3C:  MOVF   x15,W
1C3E:  MULLW  19
1C40:  MOVF   FF3,W
1C42:  CLRF   x19
1C44:  MOVWF  x18
1C46:  MOVLW  03
1C48:  ADDWF  x18,W
1C4A:  MOVWF  01
1C4C:  MOVLW  00
1C4E:  ADDWFC x19,W
1C50:  MOVWF  03
1C52:  MOVF   01,W
1C54:  ADDLW  D4
1C56:  MOVWF  FE9
1C58:  MOVLW  00
1C5A:  ADDWFC 03,W
1C5C:  MOVWF  FEA
1C5E:  MOVLW  FF
1C60:  ADDWF  FEF,F
1C62:  BC    1C68
1C64:  MOVF   FEE,F
1C66:  DECF   FED,F
.................... 				}
.................... 			}		
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	/* command off. 65535 disables */
.................... 	if ( 65535 != channel[c].command_off_seconds ) {
1C68:  MOVF   x15,W
1C6A:  MULLW  19
1C6C:  MOVF   FF3,W
1C6E:  CLRF   x19
1C70:  MOVWF  x18
1C72:  MOVLW  05
1C74:  ADDWF  x18,W
1C76:  MOVWF  01
1C78:  MOVLW  00
1C7A:  ADDWFC x19,W
1C7C:  MOVWF  03
1C7E:  MOVF   01,W
1C80:  ADDLW  D4
1C82:  MOVWF  FE9
1C84:  MOVLW  00
1C86:  ADDWFC 03,W
1C88:  MOVWF  FEA
1C8A:  MOVFF  FEC,03
1C8E:  MOVF   FED,F
1C90:  MOVF   FEF,W
1C92:  SUBLW  FF
1C94:  BNZ   1C9C
1C96:  INCFSZ 03,W
1C98:  BRA    1C9C
1C9A:  BRA    1E42
.................... 		if ( channel[c].command_off_seconds > 0 ) {
1C9C:  MOVF   x15,W
1C9E:  MULLW  19
1CA0:  MOVF   FF3,W
1CA2:  CLRF   x19
1CA4:  MOVWF  x18
1CA6:  MOVLW  05
1CA8:  ADDWF  x18,W
1CAA:  MOVWF  01
1CAC:  MOVLW  00
1CAE:  ADDWFC x19,W
1CB0:  MOVWF  03
1CB2:  MOVF   01,W
1CB4:  ADDLW  D4
1CB6:  MOVWF  FE9
1CB8:  MOVLW  00
1CBA:  ADDWFC 03,W
1CBC:  MOVWF  FEA
1CBE:  MOVFF  FEC,119
1CC2:  MOVF   FED,F
1CC4:  MOVFF  FEF,118
1CC8:  MOVF   x18,F
1CCA:  BNZ   1CD0
1CCC:  MOVF   x19,F
1CCE:  BZ    1CFE
.................... 			/* waiting to power off */
.................... 			channel[c].command_off_seconds--;
1CD0:  MOVF   x15,W
1CD2:  MULLW  19
1CD4:  MOVF   FF3,W
1CD6:  CLRF   x19
1CD8:  MOVWF  x18
1CDA:  MOVLW  05
1CDC:  ADDWF  x18,W
1CDE:  MOVWF  01
1CE0:  MOVLW  00
1CE2:  ADDWFC x19,W
1CE4:  MOVWF  03
1CE6:  MOVF   01,W
1CE8:  ADDLW  D4
1CEA:  MOVWF  FE9
1CEC:  MOVLW  00
1CEE:  ADDWFC 03,W
1CF0:  MOVWF  FEA
1CF2:  MOVLW  FF
1CF4:  ADDWF  FEF,F
1CF6:  BC    1CFC
1CF8:  MOVF   FEE,F
1CFA:  DECF   FED,F
.................... 		} else {
1CFC:  BRA    1E42
.................... 			/* timer at zero, ready to power off or already powered off */
.................... 			if ( ! bit_test(channel[c].state,CH_STATE_BIT_CMD_OFF) ) {
1CFE:  MOVF   x15,W
1D00:  MULLW  19
1D02:  MOVF   FF3,W
1D04:  CLRF   x19
1D06:  MOVWF  x18
1D08:  MOVLW  D4
1D0A:  ADDWF  x18,W
1D0C:  MOVWF  FE9
1D0E:  MOVLW  00
1D10:  ADDWFC x19,W
1D12:  MOVWF  FEA
1D14:  MOVFF  FEF,11A
1D18:  BTFSC  x1A.2
1D1A:  BRA    1DA0
.................... 				/* not currently set, so we set it and start the countdown */
.................... 				bit_set(channel[c].state,CH_STATE_BIT_CMD_OFF);
1D1C:  MOVF   x15,W
1D1E:  MULLW  19
1D20:  MOVF   FF3,W
1D22:  CLRF   x19
1D24:  MOVWF  x18
1D26:  MOVLW  D4
1D28:  ADDWF  x18,W
1D2A:  MOVWF  01
1D2C:  MOVLW  00
1D2E:  ADDWFC x19,W
1D30:  MOVFF  01,FE9
1D34:  MOVWF  FEA
1D36:  BSF    FEF.2
.................... 				channel[c].command_off_hold_seconds=config.ch[c].command_off_hold_time;
1D38:  MOVF   x15,W
1D3A:  MULLW  19
1D3C:  MOVF   FF3,W
1D3E:  CLRF   x19
1D40:  MOVWF  x18
1D42:  MOVLW  07
1D44:  ADDWF  x18,W
1D46:  MOVWF  01
1D48:  MOVLW  00
1D4A:  ADDWFC x19,W
1D4C:  MOVWF  03
1D4E:  MOVF   01,W
1D50:  ADDLW  D4
1D52:  MOVWF  01
1D54:  MOVLW  00
1D56:  ADDWFC 03,F
1D58:  MOVFF  01,118
1D5C:  MOVFF  03,119
1D60:  MOVF   x15,W
1D62:  MULLW  24
1D64:  MOVF   FF3,W
1D66:  CLRF   x1B
1D68:  MOVWF  x1A
1D6A:  MOVLW  02
1D6C:  ADDWF  x1A,W
1D6E:  MOVWF  01
1D70:  MOVLW  00
1D72:  ADDWFC x1B,W
1D74:  MOVWF  03
1D76:  MOVF   01,W
1D78:  ADDLW  1B
1D7A:  MOVWF  FE9
1D7C:  MOVLW  00
1D7E:  ADDWFC 03,W
1D80:  MOVWF  FEA
1D82:  MOVFF  FEC,03
1D86:  MOVF   FED,F
1D88:  MOVFF  FEF,11A
1D8C:  MOVFF  119,FEA
1D90:  MOVFF  118,FE9
1D94:  MOVFF  03,FEC
1D98:  MOVF   FED,F
1D9A:  MOVFF  11A,FEF
.................... 			} else {
1D9E:  BRA    1E42
.................... 				/* set, so we clear it once countdown has elapsed */
.................... 				if ( 0==channel[c].command_off_hold_seconds ) {
1DA0:  MOVF   x15,W
1DA2:  MULLW  19
1DA4:  MOVF   FF3,W
1DA6:  CLRF   x19
1DA8:  MOVWF  x18
1DAA:  MOVLW  07
1DAC:  ADDWF  x18,W
1DAE:  MOVWF  01
1DB0:  MOVLW  00
1DB2:  ADDWFC x19,W
1DB4:  MOVWF  03
1DB6:  MOVF   01,W
1DB8:  ADDLW  D4
1DBA:  MOVWF  FE9
1DBC:  MOVLW  00
1DBE:  ADDWFC 03,W
1DC0:  MOVWF  FEA
1DC2:  MOVFF  FEC,03
1DC6:  MOVF   FED,F
1DC8:  MOVF   FEF,W
1DCA:  BNZ   1E16
1DCC:  MOVF   03,F
1DCE:  BNZ   1E16
.................... 					/* countdown elapsed, clear the flag and reset the timer */
.................... 					bit_clear(channel[c].state,CH_STATE_BIT_CMD_OFF);
1DD0:  MOVF   x15,W
1DD2:  MULLW  19
1DD4:  MOVF   FF3,W
1DD6:  CLRF   x19
1DD8:  MOVWF  x18
1DDA:  MOVLW  D4
1DDC:  ADDWF  x18,W
1DDE:  MOVWF  01
1DE0:  MOVLW  00
1DE2:  ADDWFC x19,W
1DE4:  MOVFF  01,FE9
1DE8:  MOVWF  FEA
1DEA:  BCF    FEF.2
.................... 					channel[c].command_off_seconds=65535;
1DEC:  MOVF   x15,W
1DEE:  MULLW  19
1DF0:  MOVF   FF3,W
1DF2:  CLRF   x19
1DF4:  MOVWF  x18
1DF6:  MOVLW  05
1DF8:  ADDWF  x18,W
1DFA:  MOVWF  01
1DFC:  MOVLW  00
1DFE:  ADDWFC x19,W
1E00:  MOVWF  03
1E02:  MOVF   01,W
1E04:  ADDLW  D4
1E06:  MOVWF  FE9
1E08:  MOVLW  00
1E0A:  ADDWFC 03,W
1E0C:  MOVWF  FEA
1E0E:  SETF   FEC
1E10:  MOVF   FED,F
1E12:  SETF   FEF
.................... 				} else {
1E14:  BRA    1E42
.................... 					channel[c].command_off_hold_seconds--;
1E16:  MOVF   x15,W
1E18:  MULLW  19
1E1A:  MOVF   FF3,W
1E1C:  CLRF   x19
1E1E:  MOVWF  x18
1E20:  MOVLW  07
1E22:  ADDWF  x18,W
1E24:  MOVWF  01
1E26:  MOVLW  00
1E28:  ADDWFC x19,W
1E2A:  MOVWF  03
1E2C:  MOVF   01,W
1E2E:  ADDLW  D4
1E30:  MOVWF  FE9
1E32:  MOVLW  00
1E34:  ADDWFC 03,W
1E36:  MOVWF  FEA
1E38:  MOVLW  FF
1E3A:  ADDWF  FEF,F
1E3C:  BC    1E42
1E3E:  MOVF   FEE,F
1E40:  DECF   FED,F
.................... 				}
.................... 			}		
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	/* LVD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].lvd_disconnect_delay ) {
1E42:  MOVF   x15,W
1E44:  MULLW  24
1E46:  MOVF   FF3,W
1E48:  CLRF   x19
1E4A:  MOVWF  x18
1E4C:  MOVLW  06
1E4E:  ADDWF  x18,W
1E50:  MOVWF  01
1E52:  MOVLW  00
1E54:  ADDWFC x19,W
1E56:  MOVWF  03
1E58:  MOVF   01,W
1E5A:  ADDLW  1B
1E5C:  MOVWF  FE9
1E5E:  MOVLW  00
1E60:  ADDWFC 03,W
1E62:  MOVWF  FEA
1E64:  MOVFF  FEC,03
1E68:  MOVF   FED,F
1E6A:  MOVF   FEF,W
1E6C:  SUBLW  FF
1E6E:  BNZ   1E76
1E70:  INCFSZ 03,W
1E72:  BRA    1E76
1E74:  BRA    20D4
1E76:  CLRF   19
1E78:  BTFSC  FF2.7
1E7A:  BSF    19.7
1E7C:  BCF    FF2.7
.................... 		adc=adc_get(0);
1E7E:  CLRF   x3D
1E80:  MOVLB  0
1E82:  CALL   0594
1E86:  BTFSC  19.7
1E88:  BSF    FF2.7
1E8A:  MOVFF  02,117
1E8E:  MOVFF  01,116
.................... 
.................... 		if ( adc > config.ch[c].lvd_reconnect_adc ) {
1E92:  MOVLB  1
1E94:  MOVF   x15,W
1E96:  MULLW  24
1E98:  MOVF   FF3,W
1E9A:  CLRF   x19
1E9C:  MOVWF  x18
1E9E:  MOVLW  08
1EA0:  ADDWF  x18,W
1EA2:  MOVWF  01
1EA4:  MOVLW  00
1EA6:  ADDWFC x19,W
1EA8:  MOVWF  03
1EAA:  MOVF   01,W
1EAC:  ADDLW  1B
1EAE:  MOVWF  FE9
1EB0:  MOVLW  00
1EB2:  ADDWFC 03,W
1EB4:  MOVWF  FEA
1EB6:  MOVFF  FEC,03
1EBA:  MOVF   FED,F
1EBC:  MOVFF  FEF,01
1EC0:  MOVF   03,W
1EC2:  SUBWF  x17,W
1EC4:  BNC   1F4E
1EC6:  BNZ   1ECE
1EC8:  MOVF   x16,W
1ECA:  SUBWF  01,W
1ECC:  BC    1F4E
.................... 			if ( channel[c].lvd_reconnect_delay_seconds > 0 ) {
1ECE:  MOVF   x15,W
1ED0:  MULLW  19
1ED2:  MOVF   FF3,W
1ED4:  CLRF   x19
1ED6:  MOVWF  x18
1ED8:  MOVLW  0B
1EDA:  ADDWF  x18,W
1EDC:  MOVWF  01
1EDE:  MOVLW  00
1EE0:  ADDWFC x19,W
1EE2:  MOVWF  03
1EE4:  MOVF   01,W
1EE6:  ADDLW  D4
1EE8:  MOVWF  FE9
1EEA:  MOVLW  00
1EEC:  ADDWFC 03,W
1EEE:  MOVWF  FEA
1EF0:  MOVFF  FEC,119
1EF4:  MOVF   FED,F
1EF6:  MOVFF  FEF,118
1EFA:  MOVF   x18,F
1EFC:  BNZ   1F02
1EFE:  MOVF   x19,F
1F00:  BZ    1F30
.................... 				channel[c].lvd_reconnect_delay_seconds--;
1F02:  MOVF   x15,W
1F04:  MULLW  19
1F06:  MOVF   FF3,W
1F08:  CLRF   x19
1F0A:  MOVWF  x18
1F0C:  MOVLW  0B
1F0E:  ADDWF  x18,W
1F10:  MOVWF  01
1F12:  MOVLW  00
1F14:  ADDWFC x19,W
1F16:  MOVWF  03
1F18:  MOVF   01,W
1F1A:  ADDLW  D4
1F1C:  MOVWF  FE9
1F1E:  MOVLW  00
1F20:  ADDWFC 03,W
1F22:  MOVWF  FEA
1F24:  MOVLW  FF
1F26:  ADDWF  FEF,F
1F28:  BC    1F2E
1F2A:  MOVF   FEE,F
1F2C:  DECF   FED,F
.................... 			} else {
1F2E:  BRA    1F4C
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_LVD);
1F30:  MOVF   x15,W
1F32:  MULLW  19
1F34:  MOVF   FF3,W
1F36:  CLRF   x19
1F38:  MOVWF  x18
1F3A:  MOVLW  D4
1F3C:  ADDWF  x18,W
1F3E:  MOVWF  01
1F40:  MOVLW  00
1F42:  ADDWFC x19,W
1F44:  MOVFF  01,FE9
1F48:  MOVWF  FEA
1F4A:  BCF    FEF.3
.................... 			}
.................... 		} else {
1F4C:  BRA    1FB4
.................... 			channel[c].lvd_reconnect_delay_seconds=config.ch[c].lvd_reconnect_delay;
1F4E:  MOVF   x15,W
1F50:  MULLW  19
1F52:  MOVF   FF3,W
1F54:  CLRF   x19
1F56:  MOVWF  x18
1F58:  MOVLW  0B
1F5A:  ADDWF  x18,W
1F5C:  MOVWF  01
1F5E:  MOVLW  00
1F60:  ADDWFC x19,W
1F62:  MOVWF  03
1F64:  MOVF   01,W
1F66:  ADDLW  D4
1F68:  MOVWF  01
1F6A:  MOVLW  00
1F6C:  ADDWFC 03,F
1F6E:  MOVFF  01,118
1F72:  MOVFF  03,119
1F76:  MOVF   x15,W
1F78:  MULLW  24
1F7A:  MOVF   FF3,W
1F7C:  CLRF   x1B
1F7E:  MOVWF  x1A
1F80:  MOVLW  0A
1F82:  ADDWF  x1A,W
1F84:  MOVWF  01
1F86:  MOVLW  00
1F88:  ADDWFC x1B,W
1F8A:  MOVWF  03
1F8C:  MOVF   01,W
1F8E:  ADDLW  1B
1F90:  MOVWF  FE9
1F92:  MOVLW  00
1F94:  ADDWFC 03,W
1F96:  MOVWF  FEA
1F98:  MOVFF  FEC,03
1F9C:  MOVF   FED,F
1F9E:  MOVFF  FEF,11A
1FA2:  MOVFF  119,FEA
1FA6:  MOVFF  118,FE9
1FAA:  MOVFF  03,FEC
1FAE:  MOVF   FED,F
1FB0:  MOVFF  11A,FEF
.................... 		}
.................... 
.................... 		if ( adc < config.ch[c].lvd_disconnect_adc ) {
1FB4:  MOVF   x15,W
1FB6:  MULLW  24
1FB8:  MOVF   FF3,W
1FBA:  CLRF   x19
1FBC:  MOVWF  x18
1FBE:  MOVLW  04
1FC0:  ADDWF  x18,W
1FC2:  MOVWF  01
1FC4:  MOVLW  00
1FC6:  ADDWFC x19,W
1FC8:  MOVWF  03
1FCA:  MOVF   01,W
1FCC:  ADDLW  1B
1FCE:  MOVWF  FE9
1FD0:  MOVLW  00
1FD2:  ADDWFC 03,W
1FD4:  MOVWF  FEA
1FD6:  MOVFF  FEC,03
1FDA:  MOVF   FED,F
1FDC:  MOVFF  FEF,01
1FE0:  MOVF   x17,W
1FE2:  SUBWF  03,W
1FE4:  BNC   206E
1FE6:  BNZ   1FEE
1FE8:  MOVF   01,W
1FEA:  SUBWF  x16,W
1FEC:  BC    206E
.................... 			if ( channel[c].lvd_disconnect_delay_seconds > 0 ) {
1FEE:  MOVF   x15,W
1FF0:  MULLW  19
1FF2:  MOVF   FF3,W
1FF4:  CLRF   x19
1FF6:  MOVWF  x18
1FF8:  MOVLW  09
1FFA:  ADDWF  x18,W
1FFC:  MOVWF  01
1FFE:  MOVLW  00
2000:  ADDWFC x19,W
2002:  MOVWF  03
2004:  MOVF   01,W
2006:  ADDLW  D4
2008:  MOVWF  FE9
200A:  MOVLW  00
200C:  ADDWFC 03,W
200E:  MOVWF  FEA
2010:  MOVFF  FEC,119
2014:  MOVF   FED,F
2016:  MOVFF  FEF,118
201A:  MOVF   x18,F
201C:  BNZ   2022
201E:  MOVF   x19,F
2020:  BZ    2050
.................... 				channel[c].lvd_disconnect_delay_seconds--;
2022:  MOVF   x15,W
2024:  MULLW  19
2026:  MOVF   FF3,W
2028:  CLRF   x19
202A:  MOVWF  x18
202C:  MOVLW  09
202E:  ADDWF  x18,W
2030:  MOVWF  01
2032:  MOVLW  00
2034:  ADDWFC x19,W
2036:  MOVWF  03
2038:  MOVF   01,W
203A:  ADDLW  D4
203C:  MOVWF  FE9
203E:  MOVLW  00
2040:  ADDWFC 03,W
2042:  MOVWF  FEA
2044:  MOVLW  FF
2046:  ADDWF  FEF,F
2048:  BC    204E
204A:  MOVF   FEE,F
204C:  DECF   FED,F
.................... 			} else {
204E:  BRA    206C
.................... 				bit_set(channel[c].state,CH_STATE_BIT_LVD);
2050:  MOVF   x15,W
2052:  MULLW  19
2054:  MOVF   FF3,W
2056:  CLRF   x19
2058:  MOVWF  x18
205A:  MOVLW  D4
205C:  ADDWF  x18,W
205E:  MOVWF  01
2060:  MOVLW  00
2062:  ADDWFC x19,W
2064:  MOVFF  01,FE9
2068:  MOVWF  FEA
206A:  BSF    FEF.3
.................... 			}
.................... 		} else {
206C:  BRA    20D4
.................... 			channel[c].lvd_disconnect_delay_seconds=config.ch[c].lvd_disconnect_delay;
206E:  MOVF   x15,W
2070:  MULLW  19
2072:  MOVF   FF3,W
2074:  CLRF   x19
2076:  MOVWF  x18
2078:  MOVLW  09
207A:  ADDWF  x18,W
207C:  MOVWF  01
207E:  MOVLW  00
2080:  ADDWFC x19,W
2082:  MOVWF  03
2084:  MOVF   01,W
2086:  ADDLW  D4
2088:  MOVWF  01
208A:  MOVLW  00
208C:  ADDWFC 03,F
208E:  MOVFF  01,118
2092:  MOVFF  03,119
2096:  MOVF   x15,W
2098:  MULLW  24
209A:  MOVF   FF3,W
209C:  CLRF   x1B
209E:  MOVWF  x1A
20A0:  MOVLW  06
20A2:  ADDWF  x1A,W
20A4:  MOVWF  01
20A6:  MOVLW  00
20A8:  ADDWFC x1B,W
20AA:  MOVWF  03
20AC:  MOVF   01,W
20AE:  ADDLW  1B
20B0:  MOVWF  FE9
20B2:  MOVLW  00
20B4:  ADDWFC 03,W
20B6:  MOVWF  FEA
20B8:  MOVFF  FEC,03
20BC:  MOVF   FED,F
20BE:  MOVFF  FEF,11A
20C2:  MOVFF  119,FEA
20C6:  MOVFF  118,FE9
20CA:  MOVFF  03,FEC
20CE:  MOVF   FED,F
20D0:  MOVFF  11A,FEF
.................... 		}
.................... 	}
.................... 
.................... 	/* HVD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].hvd_disconnect_delay ) {
20D4:  MOVF   x15,W
20D6:  MULLW  24
20D8:  MOVF   FF3,W
20DA:  CLRF   x19
20DC:  MOVWF  x18
20DE:  MOVLW  0E
20E0:  ADDWF  x18,W
20E2:  MOVWF  01
20E4:  MOVLW  00
20E6:  ADDWFC x19,W
20E8:  MOVWF  03
20EA:  MOVF   01,W
20EC:  ADDLW  1B
20EE:  MOVWF  FE9
20F0:  MOVLW  00
20F2:  ADDWFC 03,W
20F4:  MOVWF  FEA
20F6:  MOVFF  FEC,03
20FA:  MOVF   FED,F
20FC:  MOVF   FEF,W
20FE:  SUBLW  FF
2100:  BNZ   2108
2102:  INCFSZ 03,W
2104:  BRA    2108
2106:  BRA    2366
2108:  CLRF   19
210A:  BTFSC  FF2.7
210C:  BSF    19.7
210E:  BCF    FF2.7
.................... 		adc=adc_get(0);
2110:  CLRF   x3D
2112:  MOVLB  0
2114:  CALL   0594
2118:  BTFSC  19.7
211A:  BSF    FF2.7
211C:  MOVFF  02,117
2120:  MOVFF  01,116
.................... 
.................... 		if ( adc < config.ch[c].hvd_reconnect_adc ) {
2124:  MOVLB  1
2126:  MOVF   x15,W
2128:  MULLW  24
212A:  MOVF   FF3,W
212C:  CLRF   x19
212E:  MOVWF  x18
2130:  MOVLW  10
2132:  ADDWF  x18,W
2134:  MOVWF  01
2136:  MOVLW  00
2138:  ADDWFC x19,W
213A:  MOVWF  03
213C:  MOVF   01,W
213E:  ADDLW  1B
2140:  MOVWF  FE9
2142:  MOVLW  00
2144:  ADDWFC 03,W
2146:  MOVWF  FEA
2148:  MOVFF  FEC,03
214C:  MOVF   FED,F
214E:  MOVFF  FEF,01
2152:  MOVF   x17,W
2154:  SUBWF  03,W
2156:  BNC   21E0
2158:  BNZ   2160
215A:  MOVF   01,W
215C:  SUBWF  x16,W
215E:  BC    21E0
.................... 			if ( channel[c].hvd_reconnect_delay_seconds > 0 ) {
2160:  MOVF   x15,W
2162:  MULLW  19
2164:  MOVF   FF3,W
2166:  CLRF   x19
2168:  MOVWF  x18
216A:  MOVLW  0F
216C:  ADDWF  x18,W
216E:  MOVWF  01
2170:  MOVLW  00
2172:  ADDWFC x19,W
2174:  MOVWF  03
2176:  MOVF   01,W
2178:  ADDLW  D4
217A:  MOVWF  FE9
217C:  MOVLW  00
217E:  ADDWFC 03,W
2180:  MOVWF  FEA
2182:  MOVFF  FEC,119
2186:  MOVF   FED,F
2188:  MOVFF  FEF,118
218C:  MOVF   x18,F
218E:  BNZ   2194
2190:  MOVF   x19,F
2192:  BZ    21C2
.................... 				channel[c].hvd_reconnect_delay_seconds--;
2194:  MOVF   x15,W
2196:  MULLW  19
2198:  MOVF   FF3,W
219A:  CLRF   x19
219C:  MOVWF  x18
219E:  MOVLW  0F
21A0:  ADDWF  x18,W
21A2:  MOVWF  01
21A4:  MOVLW  00
21A6:  ADDWFC x19,W
21A8:  MOVWF  03
21AA:  MOVF   01,W
21AC:  ADDLW  D4
21AE:  MOVWF  FE9
21B0:  MOVLW  00
21B2:  ADDWFC 03,W
21B4:  MOVWF  FEA
21B6:  MOVLW  FF
21B8:  ADDWF  FEF,F
21BA:  BC    21C0
21BC:  MOVF   FEE,F
21BE:  DECF   FED,F
.................... 			} else {
21C0:  BRA    21DE
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_HVD);
21C2:  MOVF   x15,W
21C4:  MULLW  19
21C6:  MOVF   FF3,W
21C8:  CLRF   x19
21CA:  MOVWF  x18
21CC:  MOVLW  D4
21CE:  ADDWF  x18,W
21D0:  MOVWF  01
21D2:  MOVLW  00
21D4:  ADDWFC x19,W
21D6:  MOVFF  01,FE9
21DA:  MOVWF  FEA
21DC:  BCF    FEF.4
.................... 			}
.................... 		} else {
21DE:  BRA    2246
.................... 			channel[c].hvd_reconnect_delay_seconds=config.ch[c].hvd_reconnect_delay;
21E0:  MOVF   x15,W
21E2:  MULLW  19
21E4:  MOVF   FF3,W
21E6:  CLRF   x19
21E8:  MOVWF  x18
21EA:  MOVLW  0F
21EC:  ADDWF  x18,W
21EE:  MOVWF  01
21F0:  MOVLW  00
21F2:  ADDWFC x19,W
21F4:  MOVWF  03
21F6:  MOVF   01,W
21F8:  ADDLW  D4
21FA:  MOVWF  01
21FC:  MOVLW  00
21FE:  ADDWFC 03,F
2200:  MOVFF  01,118
2204:  MOVFF  03,119
2208:  MOVF   x15,W
220A:  MULLW  24
220C:  MOVF   FF3,W
220E:  CLRF   x1B
2210:  MOVWF  x1A
2212:  MOVLW  12
2214:  ADDWF  x1A,W
2216:  MOVWF  01
2218:  MOVLW  00
221A:  ADDWFC x1B,W
221C:  MOVWF  03
221E:  MOVF   01,W
2220:  ADDLW  1B
2222:  MOVWF  FE9
2224:  MOVLW  00
2226:  ADDWFC 03,W
2228:  MOVWF  FEA
222A:  MOVFF  FEC,03
222E:  MOVF   FED,F
2230:  MOVFF  FEF,11A
2234:  MOVFF  119,FEA
2238:  MOVFF  118,FE9
223C:  MOVFF  03,FEC
2240:  MOVF   FED,F
2242:  MOVFF  11A,FEF
.................... 		}
.................... 
.................... 		if ( adc > config.ch[c].hvd_disconnect_adc ) {
2246:  MOVF   x15,W
2248:  MULLW  24
224A:  MOVF   FF3,W
224C:  CLRF   x19
224E:  MOVWF  x18
2250:  MOVLW  0C
2252:  ADDWF  x18,W
2254:  MOVWF  01
2256:  MOVLW  00
2258:  ADDWFC x19,W
225A:  MOVWF  03
225C:  MOVF   01,W
225E:  ADDLW  1B
2260:  MOVWF  FE9
2262:  MOVLW  00
2264:  ADDWFC 03,W
2266:  MOVWF  FEA
2268:  MOVFF  FEC,03
226C:  MOVF   FED,F
226E:  MOVFF  FEF,01
2272:  MOVF   03,W
2274:  SUBWF  x17,W
2276:  BNC   2300
2278:  BNZ   2280
227A:  MOVF   x16,W
227C:  SUBWF  01,W
227E:  BC    2300
.................... 			if ( channel[c].hvd_disconnect_delay_seconds > 0 ) {
2280:  MOVF   x15,W
2282:  MULLW  19
2284:  MOVF   FF3,W
2286:  CLRF   x19
2288:  MOVWF  x18
228A:  MOVLW  0D
228C:  ADDWF  x18,W
228E:  MOVWF  01
2290:  MOVLW  00
2292:  ADDWFC x19,W
2294:  MOVWF  03
2296:  MOVF   01,W
2298:  ADDLW  D4
229A:  MOVWF  FE9
229C:  MOVLW  00
229E:  ADDWFC 03,W
22A0:  MOVWF  FEA
22A2:  MOVFF  FEC,119
22A6:  MOVF   FED,F
22A8:  MOVFF  FEF,118
22AC:  MOVF   x18,F
22AE:  BNZ   22B4
22B0:  MOVF   x19,F
22B2:  BZ    22E2
.................... 				channel[c].hvd_disconnect_delay_seconds--;
22B4:  MOVF   x15,W
22B6:  MULLW  19
22B8:  MOVF   FF3,W
22BA:  CLRF   x19
22BC:  MOVWF  x18
22BE:  MOVLW  0D
22C0:  ADDWF  x18,W
22C2:  MOVWF  01
22C4:  MOVLW  00
22C6:  ADDWFC x19,W
22C8:  MOVWF  03
22CA:  MOVF   01,W
22CC:  ADDLW  D4
22CE:  MOVWF  FE9
22D0:  MOVLW  00
22D2:  ADDWFC 03,W
22D4:  MOVWF  FEA
22D6:  MOVLW  FF
22D8:  ADDWF  FEF,F
22DA:  BC    22E0
22DC:  MOVF   FEE,F
22DE:  DECF   FED,F
.................... 			} else {
22E0:  BRA    22FE
.................... 				bit_set(channel[c].state,CH_STATE_BIT_HVD);
22E2:  MOVF   x15,W
22E4:  MULLW  19
22E6:  MOVF   FF3,W
22E8:  CLRF   x19
22EA:  MOVWF  x18
22EC:  MOVLW  D4
22EE:  ADDWF  x18,W
22F0:  MOVWF  01
22F2:  MOVLW  00
22F4:  ADDWFC x19,W
22F6:  MOVFF  01,FE9
22FA:  MOVWF  FEA
22FC:  BSF    FEF.4
.................... 			}
.................... 		} else {
22FE:  BRA    2366
.................... 			channel[c].hvd_disconnect_delay_seconds=config.ch[c].hvd_disconnect_delay;
2300:  MOVF   x15,W
2302:  MULLW  19
2304:  MOVF   FF3,W
2306:  CLRF   x19
2308:  MOVWF  x18
230A:  MOVLW  0D
230C:  ADDWF  x18,W
230E:  MOVWF  01
2310:  MOVLW  00
2312:  ADDWFC x19,W
2314:  MOVWF  03
2316:  MOVF   01,W
2318:  ADDLW  D4
231A:  MOVWF  01
231C:  MOVLW  00
231E:  ADDWFC 03,F
2320:  MOVFF  01,118
2324:  MOVFF  03,119
2328:  MOVF   x15,W
232A:  MULLW  24
232C:  MOVF   FF3,W
232E:  CLRF   x1B
2330:  MOVWF  x1A
2332:  MOVLW  0E
2334:  ADDWF  x1A,W
2336:  MOVWF  01
2338:  MOVLW  00
233A:  ADDWFC x1B,W
233C:  MOVWF  03
233E:  MOVF   01,W
2340:  ADDLW  1B
2342:  MOVWF  FE9
2344:  MOVLW  00
2346:  ADDWFC 03,W
2348:  MOVWF  FEA
234A:  MOVFF  FEC,03
234E:  MOVF   FED,F
2350:  MOVFF  FEF,11A
2354:  MOVFF  119,FEA
2358:  MOVFF  118,FE9
235C:  MOVFF  03,FEC
2360:  MOVF   FED,F
2362:  MOVFF  11A,FEF
.................... 		}
.................... 	}
.................... 
.................... 	/* LTD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].ltd_disconnect_delay ) {
2366:  MOVF   x15,W
2368:  MULLW  24
236A:  MOVF   FF3,W
236C:  CLRF   x19
236E:  MOVWF  x18
2370:  MOVLW  16
2372:  ADDWF  x18,W
2374:  MOVWF  01
2376:  MOVLW  00
2378:  ADDWFC x19,W
237A:  MOVWF  03
237C:  MOVF   01,W
237E:  ADDLW  1B
2380:  MOVWF  FE9
2382:  MOVLW  00
2384:  ADDWFC 03,W
2386:  MOVWF  FEA
2388:  MOVFF  FEC,03
238C:  MOVF   FED,F
238E:  MOVF   FEF,W
2390:  SUBLW  FF
2392:  BNZ   239A
2394:  INCFSZ 03,W
2396:  BRA    239A
2398:  BRA    25FA
239A:  CLRF   19
239C:  BTFSC  FF2.7
239E:  BSF    19.7
23A0:  BCF    FF2.7
.................... 		adc=adc_get(1);
23A2:  MOVLW  01
23A4:  MOVWF  x3D
23A6:  MOVLB  0
23A8:  CALL   0594
23AC:  BTFSC  19.7
23AE:  BSF    FF2.7
23B0:  MOVFF  02,117
23B4:  MOVFF  01,116
.................... 
.................... 		if ( adc < config.ch[c].ltd_reconnect_adc ) {
23B8:  MOVLB  1
23BA:  MOVF   x15,W
23BC:  MULLW  24
23BE:  MOVF   FF3,W
23C0:  CLRF   x19
23C2:  MOVWF  x18
23C4:  MOVLW  18
23C6:  ADDWF  x18,W
23C8:  MOVWF  01
23CA:  MOVLW  00
23CC:  ADDWFC x19,W
23CE:  MOVWF  03
23D0:  MOVF   01,W
23D2:  ADDLW  1B
23D4:  MOVWF  FE9
23D6:  MOVLW  00
23D8:  ADDWFC 03,W
23DA:  MOVWF  FEA
23DC:  MOVFF  FEC,03
23E0:  MOVF   FED,F
23E2:  MOVFF  FEF,01
23E6:  MOVF   x17,W
23E8:  SUBWF  03,W
23EA:  BNC   2474
23EC:  BNZ   23F4
23EE:  MOVF   01,W
23F0:  SUBWF  x16,W
23F2:  BC    2474
.................... 			if ( channel[c].ltd_reconnect_delay_seconds > 0 ) {
23F4:  MOVF   x15,W
23F6:  MULLW  19
23F8:  MOVF   FF3,W
23FA:  CLRF   x19
23FC:  MOVWF  x18
23FE:  MOVLW  13
2400:  ADDWF  x18,W
2402:  MOVWF  01
2404:  MOVLW  00
2406:  ADDWFC x19,W
2408:  MOVWF  03
240A:  MOVF   01,W
240C:  ADDLW  D4
240E:  MOVWF  FE9
2410:  MOVLW  00
2412:  ADDWFC 03,W
2414:  MOVWF  FEA
2416:  MOVFF  FEC,119
241A:  MOVF   FED,F
241C:  MOVFF  FEF,118
2420:  MOVF   x18,F
2422:  BNZ   2428
2424:  MOVF   x19,F
2426:  BZ    2456
.................... 				channel[c].ltd_reconnect_delay_seconds--;
2428:  MOVF   x15,W
242A:  MULLW  19
242C:  MOVF   FF3,W
242E:  CLRF   x19
2430:  MOVWF  x18
2432:  MOVLW  13
2434:  ADDWF  x18,W
2436:  MOVWF  01
2438:  MOVLW  00
243A:  ADDWFC x19,W
243C:  MOVWF  03
243E:  MOVF   01,W
2440:  ADDLW  D4
2442:  MOVWF  FE9
2444:  MOVLW  00
2446:  ADDWFC 03,W
2448:  MOVWF  FEA
244A:  MOVLW  FF
244C:  ADDWF  FEF,F
244E:  BC    2454
2450:  MOVF   FEE,F
2452:  DECF   FED,F
.................... 			} else {
2454:  BRA    2472
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_LTD);
2456:  MOVF   x15,W
2458:  MULLW  19
245A:  MOVF   FF3,W
245C:  CLRF   x19
245E:  MOVWF  x18
2460:  MOVLW  D4
2462:  ADDWF  x18,W
2464:  MOVWF  01
2466:  MOVLW  00
2468:  ADDWFC x19,W
246A:  MOVFF  01,FE9
246E:  MOVWF  FEA
2470:  BCF    FEF.5
.................... 			}
.................... 		} else {
2472:  BRA    24DA
.................... 			channel[c].ltd_reconnect_delay_seconds=config.ch[c].ltd_reconnect_delay;
2474:  MOVF   x15,W
2476:  MULLW  19
2478:  MOVF   FF3,W
247A:  CLRF   x19
247C:  MOVWF  x18
247E:  MOVLW  13
2480:  ADDWF  x18,W
2482:  MOVWF  01
2484:  MOVLW  00
2486:  ADDWFC x19,W
2488:  MOVWF  03
248A:  MOVF   01,W
248C:  ADDLW  D4
248E:  MOVWF  01
2490:  MOVLW  00
2492:  ADDWFC 03,F
2494:  MOVFF  01,118
2498:  MOVFF  03,119
249C:  MOVF   x15,W
249E:  MULLW  24
24A0:  MOVF   FF3,W
24A2:  CLRF   x1B
24A4:  MOVWF  x1A
24A6:  MOVLW  1A
24A8:  ADDWF  x1A,W
24AA:  MOVWF  01
24AC:  MOVLW  00
24AE:  ADDWFC x1B,W
24B0:  MOVWF  03
24B2:  MOVF   01,W
24B4:  ADDLW  1B
24B6:  MOVWF  FE9
24B8:  MOVLW  00
24BA:  ADDWFC 03,W
24BC:  MOVWF  FEA
24BE:  MOVFF  FEC,03
24C2:  MOVF   FED,F
24C4:  MOVFF  FEF,11A
24C8:  MOVFF  119,FEA
24CC:  MOVFF  118,FE9
24D0:  MOVFF  03,FEC
24D4:  MOVF   FED,F
24D6:  MOVFF  11A,FEF
.................... 		}
.................... 
.................... 		if ( adc > config.ch[c].ltd_disconnect_adc ) {
24DA:  MOVF   x15,W
24DC:  MULLW  24
24DE:  MOVF   FF3,W
24E0:  CLRF   x19
24E2:  MOVWF  x18
24E4:  MOVLW  14
24E6:  ADDWF  x18,W
24E8:  MOVWF  01
24EA:  MOVLW  00
24EC:  ADDWFC x19,W
24EE:  MOVWF  03
24F0:  MOVF   01,W
24F2:  ADDLW  1B
24F4:  MOVWF  FE9
24F6:  MOVLW  00
24F8:  ADDWFC 03,W
24FA:  MOVWF  FEA
24FC:  MOVFF  FEC,03
2500:  MOVF   FED,F
2502:  MOVFF  FEF,01
2506:  MOVF   03,W
2508:  SUBWF  x17,W
250A:  BNC   2594
250C:  BNZ   2514
250E:  MOVF   x16,W
2510:  SUBWF  01,W
2512:  BC    2594
.................... 			if ( channel[c].ltd_disconnect_delay_seconds > 0 ) {
2514:  MOVF   x15,W
2516:  MULLW  19
2518:  MOVF   FF3,W
251A:  CLRF   x19
251C:  MOVWF  x18
251E:  MOVLW  11
2520:  ADDWF  x18,W
2522:  MOVWF  01
2524:  MOVLW  00
2526:  ADDWFC x19,W
2528:  MOVWF  03
252A:  MOVF   01,W
252C:  ADDLW  D4
252E:  MOVWF  FE9
2530:  MOVLW  00
2532:  ADDWFC 03,W
2534:  MOVWF  FEA
2536:  MOVFF  FEC,119
253A:  MOVF   FED,F
253C:  MOVFF  FEF,118
2540:  MOVF   x18,F
2542:  BNZ   2548
2544:  MOVF   x19,F
2546:  BZ    2576
.................... 				channel[c].ltd_disconnect_delay_seconds--;
2548:  MOVF   x15,W
254A:  MULLW  19
254C:  MOVF   FF3,W
254E:  CLRF   x19
2550:  MOVWF  x18
2552:  MOVLW  11
2554:  ADDWF  x18,W
2556:  MOVWF  01
2558:  MOVLW  00
255A:  ADDWFC x19,W
255C:  MOVWF  03
255E:  MOVF   01,W
2560:  ADDLW  D4
2562:  MOVWF  FE9
2564:  MOVLW  00
2566:  ADDWFC 03,W
2568:  MOVWF  FEA
256A:  MOVLW  FF
256C:  ADDWF  FEF,F
256E:  BC    2574
2570:  MOVF   FEE,F
2572:  DECF   FED,F
.................... 			} else {
2574:  BRA    2592
.................... 				bit_set(channel[c].state,CH_STATE_BIT_LTD);
2576:  MOVF   x15,W
2578:  MULLW  19
257A:  MOVF   FF3,W
257C:  CLRF   x19
257E:  MOVWF  x18
2580:  MOVLW  D4
2582:  ADDWF  x18,W
2584:  MOVWF  01
2586:  MOVLW  00
2588:  ADDWFC x19,W
258A:  MOVFF  01,FE9
258E:  MOVWF  FEA
2590:  BSF    FEF.5
.................... 			}
.................... 		} else {
2592:  BRA    25FA
.................... 			channel[c].ltd_disconnect_delay_seconds=config.ch[c].ltd_disconnect_delay;
2594:  MOVF   x15,W
2596:  MULLW  19
2598:  MOVF   FF3,W
259A:  CLRF   x19
259C:  MOVWF  x18
259E:  MOVLW  11
25A0:  ADDWF  x18,W
25A2:  MOVWF  01
25A4:  MOVLW  00
25A6:  ADDWFC x19,W
25A8:  MOVWF  03
25AA:  MOVF   01,W
25AC:  ADDLW  D4
25AE:  MOVWF  01
25B0:  MOVLW  00
25B2:  ADDWFC 03,F
25B4:  MOVFF  01,118
25B8:  MOVFF  03,119
25BC:  MOVF   x15,W
25BE:  MULLW  24
25C0:  MOVF   FF3,W
25C2:  CLRF   x1B
25C4:  MOVWF  x1A
25C6:  MOVLW  16
25C8:  ADDWF  x1A,W
25CA:  MOVWF  01
25CC:  MOVLW  00
25CE:  ADDWFC x1B,W
25D0:  MOVWF  03
25D2:  MOVF   01,W
25D4:  ADDLW  1B
25D6:  MOVWF  FE9
25D8:  MOVLW  00
25DA:  ADDWFC 03,W
25DC:  MOVWF  FEA
25DE:  MOVFF  FEC,03
25E2:  MOVF   FED,F
25E4:  MOVFF  FEF,11A
25E8:  MOVFF  119,FEA
25EC:  MOVFF  118,FE9
25F0:  MOVFF  03,FEC
25F4:  MOVF   FED,F
25F6:  MOVFF  11A,FEF
.................... 		}
.................... 	}
25FA:  MOVLB  0
25FC:  RETURN 0
.................... 
.................... 
.................... 	/* TODO: implement High Temperature Disconnect (HTD) */
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void periodic_millisecond(void) {
.................... 	static int8 uptimeticks=0;
.................... 	static int16 adcTicks=0;
.................... 	static int16 ticks=0;
.................... 
.................... 
.................... 	timers.now_millisecond=0;
*
277E:  BCF    xCF.2
.................... 
.................... 	/* LED control */
.................... 	if ( 0==timers.led_on_a ) {
2780:  MOVF   xD0,F
2782:  BNZ   278A
.................... 		output_low(LED_A);
2784:  BCF    F94.1
2786:  BCF    F8B.1
.................... 	} else {
2788:  BRA    2790
.................... 		output_high(LED_A);
278A:  BCF    F94.1
278C:  BSF    F8B.1
.................... 		timers.led_on_a--;
278E:  DECF   xD0,F
.................... 	}
.................... 	if ( 0==timers.led_on_b ) {
2790:  MOVF   xD1,F
2792:  BNZ   279A
.................... 		output_low(LED_B);
2794:  BCF    F94.2
2796:  BCF    F8B.2
.................... 	} else {
2798:  BRA    27A0
.................... 		output_high(LED_B);
279A:  BCF    F94.2
279C:  BSF    F8B.2
.................... 		timers.led_on_b--;
279E:  DECF   xD1,F
.................... 	}
.................... 
.................... 	/* some other random stuff that we don't need to do every cycle in main */
.................... 	if ( current.interval_milliseconds < 65535 ) {
27A0:  INCFSZ xC8,W
27A2:  BRA    27AA
27A4:  INCFSZ xC9,W
27A6:  BRA    27AA
27A8:  BRA    27B0
.................... 		current.interval_milliseconds++;
27AA:  INCF   xC8,F
27AC:  BTFSC  FD8.2
27AE:  INCF   xC9,F
.................... 	}
.................... 
.................... 	/* contactor timeout */
.................... 	if ( 0 == timers.contactor_powersave[0] ) {
27B0:  MOVF   xD2,F
27B2:  BNZ   27BE
.................... 		output_low(BRIDGE_A_A);
27B4:  BCF    F94.3
27B6:  BCF    F8B.3
.................... 		output_low(BRIDGE_A_B);
27B8:  BCF    F94.4
27BA:  BCF    F8B.4
.................... 	} else {
27BC:  BRA    27C0
.................... 		timers.contactor_powersave[0]--;
27BE:  DECF   xD2,F
.................... 	}
.................... 	if ( 0 == timers.contactor_powersave[1] ) {
27C0:  MOVF   xD3,F
27C2:  BNZ   27CE
.................... 		output_low(BRIDGE_B_A);
27C4:  BCF    F94.5
27C6:  BCF    F8B.5
.................... 		output_low(BRIDGE_B_B);
27C8:  BCF    F94.6
27CA:  BCF    F8B.6
.................... 	} else {
27CC:  BRA    27D0
.................... 		timers.contactor_powersave[1]--;
27CE:  DECF   xD3,F
.................... 	}
.................... 
.................... 
.................... 
.................... 
.................... 	/* seconds */
.................... 	ticks++;
27D0:  MOVLB  1
27D2:  INCF   x10,F
27D4:  BTFSC  FD8.2
27D6:  INCF   x11,F
.................... 	if ( 1000 == ticks ) {
27D8:  MOVF   x10,W
27DA:  SUBLW  E8
27DC:  BNZ   282E
27DE:  MOVF   x11,W
27E0:  SUBLW  03
27E2:  BNZ   282E
.................... 		ticks=0;
27E4:  CLRF   x11
27E6:  CLRF   x10
.................... 
.................... 		/* set channe[n].state based on logic */
.................... 		contactor_logic(0);
27E8:  CLRF   x15
27EA:  MOVLB  0
27EC:  CALL   1A6C
.................... 		contactor_logic(1);
27F0:  MOVLW  01
27F2:  MOVLB  1
27F4:  MOVWF  x15
27F6:  MOVLB  0
27F8:  CALL   1A6C
.................... 
.................... 		/* set contactor outputs based on their state bit field */
.................... 		contactor_set(0);
27FC:  MOVLB  1
27FE:  CLRF   x15
2800:  MOVLB  0
2802:  RCALL  2720
.................... 		contactor_set(1);		
2804:  MOVLW  01
2806:  MOVLB  1
2808:  MOVWF  x15
280A:  MOVLB  0
280C:  RCALL  2720
.................... 
.................... 		/* uptime counter */
.................... 		uptimeTicks++;
280E:  MOVLB  1
2810:  INCF   x0D,F
.................... 		if ( 60 == uptimeTicks ) {
2812:  MOVF   x0D,W
2814:  SUBLW  3C
2816:  BNZ   282E
.................... 			uptimeTicks=0;
2818:  CLRF   x0D
.................... 			if ( current.uptime_minutes < 65535 ) 
281A:  MOVLB  0
281C:  INCFSZ xC6,W
281E:  BRA    2826
2820:  INCFSZ xC7,W
2822:  BRA    2826
2824:  BRA    282C
.................... 				current.uptime_minutes++;
2826:  INCF   xC6,F
2828:  BTFSC  FD8.2
282A:  INCF   xC7,F
282C:  MOVLB  1
.................... 		}
.................... 	}
.................... 
.................... 	/* ADC sample counter */
.................... 	if ( timers.now_adc_reset_count ) {
282E:  MOVLB  0
2830:  BTFSS  xCF.1
2832:  BRA    283E
.................... 		timers.now_adc_reset_count=0;
2834:  BCF    xCF.1
.................... 		adcTicks=0;
2836:  MOVLB  1
2838:  CLRF   x0F
283A:  CLRF   x0E
283C:  MOVLB  0
.................... 	}
.................... 
.................... 	/* ADC sampling trigger */
.................... 	adcTicks++;
283E:  MOVLB  1
2840:  INCF   x0E,F
2842:  BTFSC  FD8.2
2844:  INCF   x0F,F
.................... 	if ( ADC_SAMPLE_TICKS == adcTicks ) {
2846:  MOVF   x0E,W
2848:  SUBLW  14
284A:  BNZ   285A
284C:  MOVF   x0F,F
284E:  BNZ   285A
.................... 		adcTicks=0;
2850:  CLRF   x0F
2852:  CLRF   x0E
.................... 		timers.now_adc_sample=1;
2854:  MOVLB  0
2856:  BSF    xCF.0
2858:  MOVLB  1
.................... 	}
285A:  MOVLB  0
285C:  GOTO   38F0 (RETURN)
.................... 
.................... }
.................... 
.................... void init(void) {
.................... 	int8 buff[32];
.................... 	setup_oscillator(OSC_16MHZ);
*
1534:  MOVLW  70
1536:  MOVWF  FD3
1538:  BCF    F9B.6
153A:  BCF    F9B.7
.................... 
.................... 	setup_adc(ADC_CLOCK_DIV_16);
153C:  MOVF   FC0,W
153E:  ANDLW  C0
1540:  IORLW  05
1542:  MOVWF  FC0
1544:  BSF    FC0.7
1546:  BSF    FC2.0
.................... 	/* NTC thermistor on sAN2, input voltage divider on sAN4, DIP switch analog on sAN9
.................... 	voltage spans between 0 and Vdd */
.................... 	setup_adc_ports(sAN2 | sAN4 | sAN9,VSS_VDD);
1548:  MOVLW  14
154A:  MOVWF  F7E
154C:  BCF    FC1.0
154E:  BCF    FC1.1
1550:  BCF    FC1.2
1552:  BCF    FC1.3
1554:  MOVLW  02
1556:  MOVWF  F7F
.................... 
.................... 	setup_wdt(WDT_512MS);
1558:  BSF    FD1.0
.................... 
.................... 	set_tris_a(0b00111111);
155A:  MOVLW  3F
155C:  MOVWF  F92
.................... 	set_tris_b(0b01110000);
155E:  MOVLW  70
1560:  MOVWF  F93
.................... 	set_tris_c(0b10000001);
1562:  MOVLW  81
1564:  MOVWF  F94
.................... //               76543210
.................... 
.................... 	port_a_pullups(0b00110000);
1566:  MOVLW  30
1568:  MOVWF  F77
156A:  BCF    FF1.7
.................... 	port_b_pullups(0b00000000);
156C:  CLRF   F78
.................... //                   76543210
.................... 
.................... 	/* data structure initialization */
.................... 	/* all initialized to 0 on declaration. Just do this if need non-zero */
.................... 	channel[0].command_off_seconds=65535;
156E:  SETF   xDA
1570:  SETF   xD9
.................... 	channel[1].command_off_seconds=65535;
1572:  SETF   xF3
1574:  SETF   xF2
.................... 	channel[0].command_on_seconds =65535;
1576:  SETF   xD6
1578:  SETF   xD5
.................... 	channel[1].command_on_seconds =65535;
157A:  SETF   xEF
157C:  SETF   xEE
.................... 
.................... 
.................... 	/* get our compiled date from constant */
.................... 	strcpy(buff,__DATE__);
157E:  MOVLW  01
1580:  MOVWF  FEA
1582:  MOVLW  15
1584:  MOVWF  FE9
1586:  MOVLW  00
1588:  CALL   00BA
158C:  TBLRD*-
158E:  TBLRD*+
1590:  MOVF   FF5,W
1592:  MOVWF  FEE
1594:  IORLW  00
1596:  BNZ   158E
.................... 	current.compile_day =(buff[0]-'0')*10;
1598:  MOVLW  30
159A:  MOVLB  1
159C:  SUBWF  x15,W
159E:  MULLW  0A
15A0:  MOVFF  FF3,CD
15A4:  MOVLB  0
.................... 	current.compile_day+=(buff[1]-'0');
15A6:  MOVLW  30
15A8:  MOVLB  1
15AA:  SUBWF  x16,W
15AC:  MOVLB  0
15AE:  ADDWF  xCD,F
.................... 	/* determine month ... how annoying */
.................... 	if ( 'J'==buff[3] ) {
15B0:  MOVLB  1
15B2:  MOVF   x18,W
15B4:  SUBLW  4A
15B6:  BNZ   15E2
.................... 		if ( 'A'==buff[4] )
15B8:  MOVF   x19,W
15BA:  SUBLW  41
15BC:  BNZ   15C8
.................... 			current.compile_month=1;
15BE:  MOVLW  01
15C0:  MOVLB  0
15C2:  MOVWF  xCC
15C4:  BRA    15DE
15C6:  MOVLB  1
.................... 		else if ( 'N'==buff[5] )
15C8:  MOVF   x1A,W
15CA:  SUBLW  4E
15CC:  BNZ   15D8
.................... 			current.compile_month=6;
15CE:  MOVLW  06
15D0:  MOVLB  0
15D2:  MOVWF  xCC
15D4:  BRA    15DE
15D6:  MOVLB  1
.................... 		else
.................... 			current.compile_month=7;
15D8:  MOVLW  07
15DA:  MOVLB  0
15DC:  MOVWF  xCC
.................... 	} else if ( 'A'==buff[3] ) {
15DE:  BRA    1676
15E0:  MOVLB  1
15E2:  MOVF   x18,W
15E4:  SUBLW  41
15E6:  BNZ   1602
.................... 		if ( 'P'==buff[4] )
15E8:  MOVF   x19,W
15EA:  SUBLW  50
15EC:  BNZ   15F8
.................... 			current.compile_month=4;
15EE:  MOVLW  04
15F0:  MOVLB  0
15F2:  MOVWF  xCC
15F4:  BRA    15FE
15F6:  MOVLB  1
.................... 		else
.................... 			current.compile_month=8;
15F8:  MOVLW  08
15FA:  MOVLB  0
15FC:  MOVWF  xCC
.................... 	} else if ( 'M'==buff[3] ) {
15FE:  BRA    1676
1600:  MOVLB  1
1602:  MOVF   x18,W
1604:  SUBLW  4D
1606:  BNZ   1622
.................... 		if ( 'R'==buff[5] )
1608:  MOVF   x1A,W
160A:  SUBLW  52
160C:  BNZ   1618
.................... 			current.compile_month=3;
160E:  MOVLW  03
1610:  MOVLB  0
1612:  MOVWF  xCC
1614:  BRA    161E
1616:  MOVLB  1
.................... 		else
.................... 			current.compile_month=5;
1618:  MOVLW  05
161A:  MOVLB  0
161C:  MOVWF  xCC
.................... 	} else if ( 'F'==buff[3] ) {
161E:  BRA    1676
1620:  MOVLB  1
1622:  MOVF   x18,W
1624:  SUBLW  46
1626:  BNZ   1632
.................... 		current.compile_month=2;
1628:  MOVLW  02
162A:  MOVLB  0
162C:  MOVWF  xCC
.................... 	} else if ( 'S'==buff[3] ) {
162E:  BRA    1676
1630:  MOVLB  1
1632:  MOVF   x18,W
1634:  SUBLW  53
1636:  BNZ   1642
.................... 		current.compile_month=9;
1638:  MOVLW  09
163A:  MOVLB  0
163C:  MOVWF  xCC
.................... 	} else if ( 'O'==buff[3] ) {
163E:  BRA    1676
1640:  MOVLB  1
1642:  MOVF   x18,W
1644:  SUBLW  4F
1646:  BNZ   1652
.................... 		current.compile_month=10;
1648:  MOVLW  0A
164A:  MOVLB  0
164C:  MOVWF  xCC
.................... 	} else if ( 'N'==buff[3] ) {
164E:  BRA    1676
1650:  MOVLB  1
1652:  MOVF   x18,W
1654:  SUBLW  4E
1656:  BNZ   1662
.................... 		current.compile_month=11;
1658:  MOVLW  0B
165A:  MOVLB  0
165C:  MOVWF  xCC
.................... 	} else if ( 'D'==buff[3] ) {
165E:  BRA    1676
1660:  MOVLB  1
1662:  MOVF   x18,W
1664:  SUBLW  44
1666:  BNZ   1672
.................... 		current.compile_month=12;
1668:  MOVLW  0C
166A:  MOVLB  0
166C:  MOVWF  xCC
.................... 	} else {
166E:  BRA    1676
1670:  MOVLB  1
.................... 		/* error parsing, shouldn't happen */
.................... 		current.compile_month=255;
1672:  MOVLB  0
1674:  SETF   xCC
.................... 	}
.................... 	current.compile_year =(buff[7]-'0')*10;
1676:  MOVLW  30
1678:  MOVLB  1
167A:  SUBWF  x1C,W
167C:  MULLW  0A
167E:  MOVFF  FF3,CB
1682:  MOVLB  0
.................... 	current.compile_year+=(buff[8]-'0');
1684:  MOVLW  30
1686:  MOVLB  1
1688:  SUBWF  x1D,W
168A:  MOVLB  0
168C:  ADDWF  xCB,F
.................... 
.................... 
.................... 	/* one periodic interrupt @ 1mS. Generated from system 16 MHz clock */
.................... 	/* prescale=16, match=249, postscale=1. Match is 249 because when match occurs, one cycle is lost */
.................... 	setup_timer_2(T2_DIV_BY_16,249,1);
168E:  MOVLW  00
1690:  IORLW  06
1692:  MOVWF  FCA
1694:  MOVLW  F9
1696:  MOVWF  FCB
.................... 
.................... 	enable_interrupts(INT_TIMER2);
1698:  BSF    F9D.1
.................... 
.................... 	/* set I2C slave address, which is always an even number */
.................... 	i2c_slaveaddr(STREAM_SLAVE,0x3e + (read_dip_switch()<<1) );
169A:  BRA    14C2
169C:  BCF    FD8.0
169E:  RLCF   01,W
16A0:  ADDLW  3E
16A2:  MOVLB  1
16A4:  MOVWF  FC8
16A6:  MOVLB  0
16A8:  GOTO   37A6 (RETURN)
.................... }
.................... 
.................... 
.................... void main(void) {
*
3714:  CLRF   FF8
3716:  BCF    FD0.7
3718:  BSF    07.7
371A:  BSF    F93.6
371C:  BSF    F93.4
371E:  CLRF   FC8
3720:  MOVLW  36
3722:  MOVWF  FC6
3724:  BSF    FC5.0
3726:  BSF    FC5.7
3728:  CLRF   1A
372A:  BSF    FB8.3
372C:  MOVLW  A0
372E:  MOVWF  FAF
3730:  MOVLW  01
3732:  MOVWF  FB0
3734:  MOVLW  A6
3736:  MOVWF  FAC
3738:  MOVLW  90
373A:  MOVWF  FAB
373C:  MOVLB  1
373E:  CLRF   x0C
3740:  CLRF   x0B
3742:  MOVLW  00
3744:  MOVWF  F7E
3746:  BCF    FC1.0
3748:  BCF    FC1.1
374A:  BCF    FC1.2
374C:  BCF    FC1.3
374E:  MOVWF  F7F
3750:  CLRF   F6C
3752:  CLRF   F6B
3754:  CLRF   F6D
3756:  BRA    3762
3758:  DATA F0,40
375A:  DATA 1B,00
375C:  DATA 05,41
375E:  DATA 0D,00
3760:  DATA 00,00
3762:  MOVLW  00
3764:  MOVWF  FF8
3766:  MOVLW  37
3768:  MOVWF  FF7
376A:  MOVLW  58
376C:  MOVWF  FF6
376E:  TBLRD*+
3770:  MOVF   FF5,W
3772:  MOVWF  00
3774:  XORLW  00
3776:  BZ    379E
3778:  TBLRD*+
377A:  MOVF   FF5,W
377C:  MOVWF  01
377E:  BTFSC  FE8.7
3780:  BRA    378C
3782:  ANDLW  3F
3784:  MOVWF  FEA
3786:  TBLRD*+
3788:  MOVFF  FF5,FE9
378C:  BTFSC  01.6
378E:  TBLRD*+
3790:  BTFSS  01.6
3792:  TBLRD*+
3794:  MOVFF  FF5,FEE
3798:  DCFSNZ 00,F
379A:  BRA    376E
379C:  BRA    3790
379E:  CLRF   FF8
.................... 	int8 i;
.................... 	int8 last_a, last_b;
.................... 
.................... 	init();
37A0:  MOVLB  0
37A2:  GOTO   1534
.................... 
.................... 
.................... 	/* read parameters from EEPROM and write defaults if CRC doesn't match */
.................... 	read_param_file();
37A6:  GOTO   193C
.................... 
.................... 
.................... 	/* flash on startup */
.................... 	for ( i=0 ; i<5 ; i++ ) {
37AA:  MOVLB  1
37AC:  CLRF   x12
37AE:  MOVF   x12,W
37B0:  SUBLW  04
37B2:  BNC   37DA
.................... 		restart_wdt();
37B4:  CLRWDT
.................... 		output_high(LED_A);
37B6:  BCF    F94.1
37B8:  BSF    F8B.1
.................... 		delay_ms(200);
37BA:  MOVLW  C8
37BC:  MOVWF  x37
37BE:  MOVLB  0
37C0:  CALL   1498
.................... 		output_low(LED_A);
37C4:  BCF    F94.1
37C6:  BCF    F8B.1
.................... 		delay_ms(200);
37C8:  MOVLW  C8
37CA:  MOVLB  1
37CC:  MOVWF  x37
37CE:  MOVLB  0
37D0:  CALL   1498
37D4:  MOVLB  1
37D6:  INCF   x12,F
37D8:  BRA    37AE
.................... 	}
.................... 
.................... 	fprintf(STREAM_FTDI,"# dcswc_module_latching_contactor %s\r\n# ",__DATE__);
37DA:  MOVLW  EC
37DC:  MOVWF  FF6
37DE:  MOVLW  13
37E0:  MOVWF  FF7
37E2:  MOVLW  22
37E4:  MOVWF  x19
37E6:  MOVLB  0
37E8:  CALL   1982
37EC:  MOVLW  16
37EE:  MOVWF  FF6
37F0:  MOVLW  14
37F2:  MOVWF  FF7
37F4:  CALL   19AC
37F8:  MOVLW  10
37FA:  MOVWF  FF6
37FC:  MOVLW  14
37FE:  MOVWF  FF7
3800:  MOVLW  04
3802:  MOVLB  1
3804:  MOVWF  x19
3806:  MOVLB  0
3808:  CALL   1982
.................... 	switch ( restart_cause ) {
380C:  MOVLW  07
380E:  SUBWF  00,W
3810:  BZ    3836
3812:  MOVLW  0B
3814:  SUBWF  00,W
3816:  BZ    3844
3818:  MOVLW  0F
381A:  SUBWF  00,W
381C:  BZ    3852
381E:  MOVLW  0C
3820:  SUBWF  00,W
3822:  BZ    3860
3824:  MOVLW  0E
3826:  SUBWF  00,W
3828:  BZ    386E
382A:  MOVLW  03
382C:  SUBWF  00,W
382E:  BZ    387C
3830:  MOVF   00,F
3832:  BZ    388A
3834:  BRA    3898
.................... 		case WDT_TIMEOUT:       fprintf(STREAM_FTDI,"WDT TIMEOUT"); break;
3836:  MOVLW  20
3838:  MOVWF  FF6
383A:  MOVLW  14
383C:  MOVWF  FF7
383E:  CALL   19AC
3842:  BRA    38A4
.................... 		case MCLR_FROM_SLEEP:   fprintf(STREAM_FTDI,"MCLR FROM SLEEP"); break;
3844:  MOVLW  2C
3846:  MOVWF  FF6
3848:  MOVLW  14
384A:  MOVWF  FF7
384C:  CALL   19AC
3850:  BRA    38A4
.................... 		case MCLR_FROM_RUN:     fprintf(STREAM_FTDI,"MCLR FROM RUN"); break;
3852:  MOVLW  3C
3854:  MOVWF  FF6
3856:  MOVLW  14
3858:  MOVWF  FF7
385A:  CALL   19AC
385E:  BRA    38A4
.................... 		case NORMAL_POWER_UP:   fprintf(STREAM_FTDI,"NORMAL POWER UP"); break;
3860:  MOVLW  4A
3862:  MOVWF  FF6
3864:  MOVLW  14
3866:  MOVWF  FF7
3868:  CALL   19AC
386C:  BRA    38A4
.................... 		case BROWNOUT_RESTART:  fprintf(STREAM_FTDI,"BROWNOUT RESTART"); break;
386E:  MOVLW  5A
3870:  MOVWF  FF6
3872:  MOVLW  14
3874:  MOVWF  FF7
3876:  CALL   19AC
387A:  BRA    38A4
.................... 		case WDT_FROM_SLEEP:    fprintf(STREAM_FTDI,"WDT FROM SLEEP"); break;
387C:  MOVLW  6C
387E:  MOVWF  FF6
3880:  MOVLW  14
3882:  MOVWF  FF7
3884:  CALL   19AC
3888:  BRA    38A4
.................... 		case RESET_INSTRUCTION: fprintf(STREAM_FTDI,"RESET INSTRUCTION"); break;
388A:  MOVLW  7C
388C:  MOVWF  FF6
388E:  MOVLW  14
3890:  MOVWF  FF7
3892:  CALL   19AC
3896:  BRA    38A4
.................... 		default:                fprintf(STREAM_FTDI,"UNKNOWN!");
3898:  MOVLW  8E
389A:  MOVWF  FF6
389C:  MOVLW  14
389E:  MOVWF  FF7
38A0:  CALL   19AC
.................... 	}
.................... 	fprintf(STREAM_FTDI,"\r\n");
38A4:  MOVLW  0D
38A6:  BTFSS  F9E.4
38A8:  BRA    38A6
38AA:  MOVWF  FAD
38AC:  MOVLW  0A
38AE:  BTFSS  F9E.4
38B0:  BRA    38AE
38B2:  MOVWF  FAD
.................... 
.................... 	timers.led_on_a=500;
38B4:  MOVLW  F4
38B6:  MOVWF  xD0
.................... 
.................... 	enable_interrupts(GLOBAL);
38B8:  MOVLW  C0
38BA:  IORWF  FF2,F
.................... 
.................... 	/* Prime ADC filter */
.................... 	for ( i=0 ; i<30 ; i++ ) {
38BC:  MOVLB  1
38BE:  CLRF   x12
38C0:  MOVF   x12,W
38C2:  SUBLW  1D
38C4:  BNC   38D2
.................... 		adc_update();
38C6:  MOVLB  0
38C8:  CALL   19CE
38CC:  MOVLB  1
38CE:  INCF   x12,F
38D0:  BRA    38C0
.................... 	}
.................... 
.................... 	last_a = ! input(SW_OVERRIDE_A);
38D2:  BSF    F92.5
38D4:  CLRF   x13
38D6:  BTFSS  F80.5
38D8:  INCF   x13,F
.................... 	last_b = ! input(SW_OVERRIDE_B);
38DA:  BSF    F92.4
38DC:  CLRF   x14
38DE:  BTFSS  F80.4
38E0:  INCF   x14,F
.................... 
.................... 
.................... 	/* enable I2C slave interrupt */
.................... 	enable_interrupts(INT_SSP);
38E2:  BSF    F9D.3
.................... 
.................... 	for ( ; ; ) {
.................... 		restart_wdt();
38E4:  CLRWDT
.................... 
.................... 		if ( timers.now_millisecond ) {
38E6:  MOVLB  0
38E8:  BTFSS  xCF.2
38EA:  BRA    38F0
.................... 			periodic_millisecond();
38EC:  GOTO   277E
.................... 		}
.................... 
.................... 		if ( timers.now_debug_dump ) {
38F0:  BTFSS  xCF.5
38F2:  BRA    38FA
.................... 			timers.now_debug_dump=0;
38F4:  BCF    xCF.5
.................... 
.................... 			debug_dump();
38F6:  GOTO   2A04
.................... 		}
.................... 
.................... #if 0
.................... 		if ( input(SW_OVERRIDE_A) != last_a ) {
.................... 			last_a=input(SW_OVERRIDE_A);
.................... 
.................... 			if ( last_a ) {
.................... 				timers.led_on_a=500;
.................... 				contactor_on_a();
.................... 			} else {
.................... 				timers.led_on_a=0;
.................... 				contactor_off_a();
.................... 			}
.................... 		}
.................... 
.................... 
.................... 		if ( input(SW_OVERRIDE_B) != last_b ) {
.................... 			last_B=input(SW_OVERRIDE_B);
.................... 
.................... 			if ( last_b ) {
.................... 				timers.led_on_b=500;
.................... 				contactor_on_b();
.................... 			} else {
.................... 				timers.led_on_b=0;
.................... 				contactor_off_b();
.................... 			}
.................... 		}
.................... #endif
.................... 
.................... 
.................... 		if ( timers.now_adc_sample ) {
38FA:  BTFSS  xCF.0
38FC:  BRA    3904
.................... 			timers.now_adc_sample=0;
38FE:  BCF    xCF.0
.................... 			adc_update();
3900:  CALL   19CE
.................... 		}
.................... 
.................... 		if ( timers.now_write_config ) {
3904:  BTFSS  xCF.3
3906:  BRA    390E
.................... 			timers.now_write_config=0;
3908:  BCF    xCF.3
.................... 			write_param_file();
390A:  CALL   17CC
.................... 		}
.................... 		if ( timers.now_reset_config ) {
390E:  BTFSS  xCF.4
3910:  BRA    3918
.................... 			timers.now_reset_config=0;
3912:  BCF    xCF.4
.................... 			write_default_param_file();
3914:  CALL   1818
.................... 		}
3918:  MOVLB  1
391A:  BRA    38E4
.................... 
.................... 
.................... 	}
.................... 
.................... 
.................... }
391C:  BRA    391C

Configuration Fuses:
   Word  1: 2800   INTRC_IO NOPLLEN PCLKEN NOFCMEN NOIESO
   Word  2: 0E19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: 0000   NOHFOFST NOMCLR
   Word  4: 0009   STVREN NOLVP BBSIZ2K NOXINST DEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 40 00                                        ..@.
