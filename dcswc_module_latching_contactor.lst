CCS PCH C Compiler, Version 5.090, 49113               05-Feb-22 19:14

               Filename:   C:\Users\James Jarvis\Desktop\planetPrecision\dcswc_module_latching_contactor\dcswc_module_latching_contactor.lst

               ROM used:   15104 bytes (97%)
                           Largest free fragment is 444
               RAM used:   279 (54%) at main() level
                           307 (60%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 30

0000:  GOTO   38F0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00D4
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0E92
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "dcswc_module_latching_contactor.h"
.................... #include <18F14K22.h>
.................... //////////// Standard Header file for the PIC18F14K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F14K22
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 35,2D
00CC:  DATA 46,65
00CE:  DATA 62,2D
00D0:  DATA 32,32
00D2:  DATA 00,00
*
0F64:  DATA 23,20
0F66:  DATA 27,25
0F68:  DATA 73,27
0F6A:  DATA 0D,0A
0F6C:  DATA 00,00
0F6E:  DATA 23,20
0F70:  DATA 20,63
0F72:  DATA 6F,6D
0F74:  DATA 70,69
0F76:  DATA 6C,65
0F78:  DATA 5F,79
0F7A:  DATA 65,61
0F7C:  DATA 72,3D
0F7E:  DATA 25,75
0F80:  DATA 0D,0A
0F82:  DATA 00,00
0F84:  DATA 23,20
0F86:  DATA 63,6F
0F88:  DATA 6D,70
0F8A:  DATA 69,6C
0F8C:  DATA 65,5F
0F8E:  DATA 6D,6F
0F90:  DATA 6E,74
0F92:  DATA 68,3D
0F94:  DATA 25,75
0F96:  DATA 0D,0A
0F98:  DATA 00,00
0F9A:  DATA 23,20
0F9C:  DATA 20,20
0F9E:  DATA 63,6F
0FA0:  DATA 6D,70
0FA2:  DATA 69,6C
0FA4:  DATA 65,5F
0FA6:  DATA 64,61
0FA8:  DATA 79,3D
0FAA:  DATA 25,75
0FAC:  DATA 0D,0A
0FAE:  DATA 00,00
0FB0:  DATA 23,20
0FB2:  DATA 20,20
0FB4:  DATA 20,20
0FB6:  DATA 20,20
0FB8:  DATA 76,69
0FBA:  DATA 6E,20
0FBC:  DATA 61,64
0FBE:  DATA 63,3D
0FC0:  DATA 25,6C
0FC2:  DATA 75,0D
0FC4:  DATA 0A,00
0FC6:  DATA 23,20
0FC8:  DATA 20,20
0FCA:  DATA 20,20
0FCC:  DATA 20,74
0FCE:  DATA 65,6D
0FD0:  DATA 70,20
0FD2:  DATA 61,64
0FD4:  DATA 63,3D
0FD6:  DATA 25,6C
0FD8:  DATA 75,0D
0FDA:  DATA 0A,00
0FDC:  DATA 23,2D
0FDE:  DATA 2D,2D
0FE0:  DATA 2D,2D
0FE2:  DATA 2D,2D
0FE4:  DATA 0D,0A
0FE6:  DATA 00,00
0FE8:  DATA 23,20
0FEA:  DATA 63,6F
0FEC:  DATA 6E,66
0FEE:  DATA 69,67
0FF0:  DATA 2E,63
0FF2:  DATA 68,5B
0FF4:  DATA 25,75
0FF6:  DATA 5D,0D
0FF8:  DATA 0A,00
0FFA:  DATA 23,20
0FFC:  DATA 63,6F
0FFE:  DATA 6D,6D
1000:  DATA 61,6E
1002:  DATA 64,5F
1004:  DATA 6F,66
1006:  DATA 66,5F
1008:  DATA 68,6F
100A:  DATA 6C,64
100C:  DATA 5F,74
100E:  DATA 69,6D
1010:  DATA 65,3D
1012:  DATA 25,6C
1014:  DATA 75,0D
1016:  DATA 0A,00
1018:  DATA 23,20
101A:  DATA 20,20
101C:  DATA 20,6C
101E:  DATA 76,64
1020:  DATA 5F,64
1022:  DATA 69,73
1024:  DATA 63,6F
1026:  DATA 6E,6E
1028:  DATA 65,63
102A:  DATA 74,5F
102C:  DATA 61,64
102E:  DATA 63,3D
1030:  DATA 25,6C
1032:  DATA 75,0D
1034:  DATA 0A,00
1036:  DATA 23,20
1038:  DATA 20,6C
103A:  DATA 76,64
103C:  DATA 5F,64
103E:  DATA 69,73
1040:  DATA 63,6F
1042:  DATA 6E,6E
1044:  DATA 65,63
1046:  DATA 74,5F
1048:  DATA 64,65
104A:  DATA 6C,61
104C:  DATA 79,3D
104E:  DATA 25,6C
1050:  DATA 75,0D
1052:  DATA 0A,00
1054:  DATA 23,20
1056:  DATA 20,20
1058:  DATA 20,20
105A:  DATA 6C,76
105C:  DATA 64,5F
105E:  DATA 72,65
1060:  DATA 63,6F
1062:  DATA 6E,6E
1064:  DATA 65,63
1066:  DATA 74,5F
1068:  DATA 61,64
106A:  DATA 63,3D
106C:  DATA 25,6C
106E:  DATA 75,0D
1070:  DATA 0A,00
1072:  DATA 23,20
1074:  DATA 20,20
1076:  DATA 6C,76
1078:  DATA 64,5F
107A:  DATA 72,65
107C:  DATA 63,6F
107E:  DATA 6E,6E
1080:  DATA 65,63
1082:  DATA 74,5F
1084:  DATA 64,65
1086:  DATA 6C,61
1088:  DATA 79,3D
108A:  DATA 25,6C
108C:  DATA 75,0D
108E:  DATA 0A,00
1090:  DATA 23,20
1092:  DATA 20,20
1094:  DATA 20,68
1096:  DATA 76,64
1098:  DATA 5F,64
109A:  DATA 69,73
109C:  DATA 63,6F
109E:  DATA 6E,6E
10A0:  DATA 65,63
10A2:  DATA 74,5F
10A4:  DATA 61,64
10A6:  DATA 63,3D
10A8:  DATA 25,6C
10AA:  DATA 75,0D
10AC:  DATA 0A,00
10AE:  DATA 23,20
10B0:  DATA 20,68
10B2:  DATA 76,64
10B4:  DATA 5F,64
10B6:  DATA 69,73
10B8:  DATA 63,6F
10BA:  DATA 6E,6E
10BC:  DATA 65,63
10BE:  DATA 74,5F
10C0:  DATA 64,65
10C2:  DATA 6C,61
10C4:  DATA 79,3D
10C6:  DATA 25,6C
10C8:  DATA 75,0D
10CA:  DATA 0A,00
10CC:  DATA 23,20
10CE:  DATA 20,20
10D0:  DATA 20,20
10D2:  DATA 68,76
10D4:  DATA 64,5F
10D6:  DATA 72,65
10D8:  DATA 63,6F
10DA:  DATA 6E,6E
10DC:  DATA 65,63
10DE:  DATA 74,5F
10E0:  DATA 61,64
10E2:  DATA 63,3D
10E4:  DATA 25,6C
10E6:  DATA 75,0D
10E8:  DATA 0A,00
10EA:  DATA 23,20
10EC:  DATA 20,20
10EE:  DATA 68,76
10F0:  DATA 64,5F
10F2:  DATA 72,65
10F4:  DATA 63,6F
10F6:  DATA 6E,6E
10F8:  DATA 65,63
10FA:  DATA 74,5F
10FC:  DATA 64,65
10FE:  DATA 6C,61
1100:  DATA 79,3D
1102:  DATA 25,6C
1104:  DATA 75,0D
1106:  DATA 0A,00
1108:  DATA 23,20
110A:  DATA 20,20
110C:  DATA 20,6C
110E:  DATA 74,64
1110:  DATA 5F,64
1112:  DATA 69,73
1114:  DATA 63,6F
1116:  DATA 6E,6E
1118:  DATA 65,63
111A:  DATA 74,5F
111C:  DATA 61,64
111E:  DATA 63,3D
1120:  DATA 25,6C
1122:  DATA 75,0D
1124:  DATA 0A,00
1126:  DATA 23,20
1128:  DATA 20,6C
112A:  DATA 74,64
112C:  DATA 5F,64
112E:  DATA 69,73
1130:  DATA 63,6F
1132:  DATA 6E,6E
1134:  DATA 65,63
1136:  DATA 74,5F
1138:  DATA 64,65
113A:  DATA 6C,61
113C:  DATA 79,3D
113E:  DATA 25,6C
1140:  DATA 75,0D
1142:  DATA 0A,00
1144:  DATA 23,20
1146:  DATA 20,20
1148:  DATA 20,20
114A:  DATA 6C,74
114C:  DATA 64,5F
114E:  DATA 72,65
1150:  DATA 63,6F
1152:  DATA 6E,6E
1154:  DATA 65,63
1156:  DATA 74,5F
1158:  DATA 61,64
115A:  DATA 63,3D
115C:  DATA 25,6C
115E:  DATA 75,0D
1160:  DATA 0A,00
1162:  DATA 23,20
1164:  DATA 20,20
1166:  DATA 6C,74
1168:  DATA 64,5F
116A:  DATA 72,65
116C:  DATA 63,6F
116E:  DATA 6E,6E
1170:  DATA 65,63
1172:  DATA 74,5F
1174:  DATA 64,65
1176:  DATA 6C,61
1178:  DATA 79,3D
117A:  DATA 25,6C
117C:  DATA 75,0D
117E:  DATA 0A,00
1180:  DATA 23,20
1182:  DATA 20,20
1184:  DATA 20,68
1186:  DATA 74,64
1188:  DATA 5F,64
118A:  DATA 69,73
118C:  DATA 63,6F
118E:  DATA 6E,6E
1190:  DATA 65,63
1192:  DATA 74,5F
1194:  DATA 61,64
1196:  DATA 63,3D
1198:  DATA 25,6C
119A:  DATA 75,0D
119C:  DATA 0A,00
119E:  DATA 23,20
11A0:  DATA 20,68
11A2:  DATA 74,64
11A4:  DATA 5F,64
11A6:  DATA 69,73
11A8:  DATA 63,6F
11AA:  DATA 6E,6E
11AC:  DATA 65,63
11AE:  DATA 74,5F
11B0:  DATA 64,65
11B2:  DATA 6C,61
11B4:  DATA 79,3D
11B6:  DATA 25,6C
11B8:  DATA 75,0D
11BA:  DATA 0A,00
11BC:  DATA 23,20
11BE:  DATA 20,20
11C0:  DATA 20,20
11C2:  DATA 68,74
11C4:  DATA 64,5F
11C6:  DATA 72,65
11C8:  DATA 63,6F
11CA:  DATA 6E,6E
11CC:  DATA 65,63
11CE:  DATA 74,5F
11D0:  DATA 61,64
11D2:  DATA 63,3D
11D4:  DATA 25,6C
11D6:  DATA 75,0D
11D8:  DATA 0A,00
11DA:  DATA 23,20
11DC:  DATA 20,20
11DE:  DATA 68,74
11E0:  DATA 64,5F
11E2:  DATA 72,65
11E4:  DATA 63,6F
11E6:  DATA 6E,6E
11E8:  DATA 65,63
11EA:  DATA 74,5F
11EC:  DATA 64,65
11EE:  DATA 6C,61
11F0:  DATA 79,3D
11F2:  DATA 25,6C
11F4:  DATA 75,0D
11F6:  DATA 0A,00
11F8:  DATA 23,0D
11FA:  DATA 0A,00
11FC:  DATA 23,20
11FE:  DATA 63,68
1200:  DATA 61,6E
1202:  DATA 6E,65
1204:  DATA 6C,5B
1206:  DATA 25,75
1208:  DATA 5D,0D
120A:  DATA 0A,00
120C:  DATA 23,20
120E:  DATA 20,20
1210:  DATA 20,20
1212:  DATA 20,20
1214:  DATA 20,20
1216:  DATA 20,20
1218:  DATA 20,20
121A:  DATA 20,20
121C:  DATA 20,20
121E:  DATA 20,20
1220:  DATA 20,20
1222:  DATA 20,20
1224:  DATA 20,73
1226:  DATA 74,61
1228:  DATA 74,65
122A:  DATA 3D,30
122C:  DATA 78,25
122E:  DATA 30,32
1230:  DATA 78,0D
1232:  DATA 0A,00
1234:  DATA 23,20
1236:  DATA 20,20
1238:  DATA 20,20
123A:  DATA 20,20
123C:  DATA 20,20
123E:  DATA 20,20
1240:  DATA 63,6F
1242:  DATA 6D,6D
1244:  DATA 61,6E
1246:  DATA 64,5F
1248:  DATA 6F,6E
124A:  DATA 5F,73
124C:  DATA 65,63
124E:  DATA 6F,6E
1250:  DATA 64,73
1252:  DATA 3D,25
1254:  DATA 6C,75
1256:  DATA 0D,0A
1258:  DATA 00,00
125A:  DATA 23,20
125C:  DATA 20,20
125E:  DATA 20,20
1260:  DATA 20,63
1262:  DATA 6F,6D
1264:  DATA 6D,61
1266:  DATA 6E,64
1268:  DATA 5F,6F
126A:  DATA 6E,5F
126C:  DATA 68,6F
126E:  DATA 6C,64
1270:  DATA 5F,73
1272:  DATA 65,63
1274:  DATA 6F,6E
1276:  DATA 64,73
1278:  DATA 3D,25
127A:  DATA 6C,75
127C:  DATA 0D,0A
127E:  DATA 00,00
1280:  DATA 23,20
1282:  DATA 20,20
1284:  DATA 20,20
1286:  DATA 20,20
1288:  DATA 20,20
128A:  DATA 20,63
128C:  DATA 6F,6D
128E:  DATA 6D,61
1290:  DATA 6E,64
1292:  DATA 5F,6F
1294:  DATA 66,66
1296:  DATA 5F,73
1298:  DATA 65,63
129A:  DATA 6F,6E
129C:  DATA 64,73
129E:  DATA 3D,25
12A0:  DATA 6C,75
12A2:  DATA 0D,0A
12A4:  DATA 00,00
12A6:  DATA 23,20
12A8:  DATA 20,20
12AA:  DATA 20,20
12AC:  DATA 63,6F
12AE:  DATA 6D,6D
12B0:  DATA 61,6E
12B2:  DATA 64,5F
12B4:  DATA 6F,66
12B6:  DATA 66,5F
12B8:  DATA 68,6F
12BA:  DATA 6C,64
12BC:  DATA 5F,73
12BE:  DATA 65,63
12C0:  DATA 6F,6E
12C2:  DATA 64,73
12C4:  DATA 3D,25
12C6:  DATA 6C,75
12C8:  DATA 0D,0A
12CA:  DATA 00,00
12CC:  DATA 23,20
12CE:  DATA 6C,76
12D0:  DATA 64,5F
12D2:  DATA 64,69
12D4:  DATA 73,63
12D6:  DATA 6F,6E
12D8:  DATA 6E,65
12DA:  DATA 63,74
12DC:  DATA 5F,64
12DE:  DATA 65,6C
12E0:  DATA 61,79
12E2:  DATA 5F,73
12E4:  DATA 65,63
12E6:  DATA 6F,6E
12E8:  DATA 64,73
12EA:  DATA 3D,25
12EC:  DATA 6C,75
12EE:  DATA 0D,0A
12F0:  DATA 00,00
12F2:  DATA 23,20
12F4:  DATA 20,6C
12F6:  DATA 76,64
12F8:  DATA 5F,72
12FA:  DATA 65,63
12FC:  DATA 6F,6E
12FE:  DATA 6E,65
1300:  DATA 63,74
1302:  DATA 5F,64
1304:  DATA 65,6C
1306:  DATA 61,79
1308:  DATA 5F,73
130A:  DATA 65,63
130C:  DATA 6F,6E
130E:  DATA 64,73
1310:  DATA 3D,25
1312:  DATA 6C,75
1314:  DATA 0D,0A
1316:  DATA 00,00
1318:  DATA 23,20
131A:  DATA 68,76
131C:  DATA 64,5F
131E:  DATA 64,69
1320:  DATA 73,63
1322:  DATA 6F,6E
1324:  DATA 6E,65
1326:  DATA 63,74
1328:  DATA 5F,64
132A:  DATA 65,6C
132C:  DATA 61,79
132E:  DATA 5F,73
1330:  DATA 65,63
1332:  DATA 6F,6E
1334:  DATA 64,73
1336:  DATA 3D,25
1338:  DATA 6C,75
133A:  DATA 0D,0A
133C:  DATA 00,00
133E:  DATA 23,20
1340:  DATA 20,68
1342:  DATA 76,64
1344:  DATA 5F,72
1346:  DATA 65,63
1348:  DATA 6F,6E
134A:  DATA 6E,65
134C:  DATA 63,74
134E:  DATA 5F,64
1350:  DATA 65,6C
1352:  DATA 61,79
1354:  DATA 5F,73
1356:  DATA 65,63
1358:  DATA 6F,6E
135A:  DATA 64,73
135C:  DATA 3D,25
135E:  DATA 6C,75
1360:  DATA 0D,0A
1362:  DATA 00,00
1364:  DATA 23,20
1366:  DATA 6C,74
1368:  DATA 64,5F
136A:  DATA 64,69
136C:  DATA 73,63
136E:  DATA 6F,6E
1370:  DATA 6E,65
1372:  DATA 63,74
1374:  DATA 5F,64
1376:  DATA 65,6C
1378:  DATA 61,79
137A:  DATA 5F,73
137C:  DATA 65,63
137E:  DATA 6F,6E
1380:  DATA 64,73
1382:  DATA 3D,25
1384:  DATA 6C,75
1386:  DATA 0D,0A
1388:  DATA 00,00
138A:  DATA 23,20
138C:  DATA 20,6C
138E:  DATA 74,64
1390:  DATA 5F,72
1392:  DATA 65,63
1394:  DATA 6F,6E
1396:  DATA 6E,65
1398:  DATA 63,74
139A:  DATA 5F,64
139C:  DATA 65,6C
139E:  DATA 61,79
13A0:  DATA 5F,73
13A2:  DATA 65,63
13A4:  DATA 6F,6E
13A6:  DATA 64,73
13A8:  DATA 3D,25
13AA:  DATA 6C,75
13AC:  DATA 0D,0A
13AE:  DATA 00,00
13B0:  DATA 23,20
13B2:  DATA 68,74
13B4:  DATA 64,5F
13B6:  DATA 64,69
13B8:  DATA 73,63
13BA:  DATA 6F,6E
13BC:  DATA 6E,65
13BE:  DATA 63,74
13C0:  DATA 5F,64
13C2:  DATA 65,6C
13C4:  DATA 61,79
13C6:  DATA 5F,73
13C8:  DATA 65,63
13CA:  DATA 6F,6E
13CC:  DATA 64,73
13CE:  DATA 3D,25
13D0:  DATA 6C,75
13D2:  DATA 0D,0A
13D4:  DATA 00,00
13D6:  DATA 23,20
13D8:  DATA 20,68
13DA:  DATA 74,64
13DC:  DATA 5F,72
13DE:  DATA 65,63
13E0:  DATA 6F,6E
13E2:  DATA 6E,65
13E4:  DATA 63,74
13E6:  DATA 5F,64
13E8:  DATA 65,6C
13EA:  DATA 61,79
13EC:  DATA 5F,73
13EE:  DATA 65,63
13F0:  DATA 6F,6E
13F2:  DATA 64,73
13F4:  DATA 3D,25
13F6:  DATA 6C,75
13F8:  DATA 0D,0A
13FA:  DATA 00,00
13FC:  DATA 23,20
13FE:  DATA 64,63
1400:  DATA 73,77
1402:  DATA 63,5F
1404:  DATA 6D,6F
1406:  DATA 64,75
1408:  DATA 6C,65
140A:  DATA 5F,6C
140C:  DATA 61,74
140E:  DATA 63,68
1410:  DATA 69,6E
1412:  DATA 67,5F
1414:  DATA 63,6F
1416:  DATA 6E,74
1418:  DATA 61,63
141A:  DATA 74,6F
141C:  DATA 72,20
141E:  DATA 25,73
1420:  DATA 0D,0A
1422:  DATA 23,20
1424:  DATA 00,00
1426:  DATA 35,2D
1428:  DATA 46,65
142A:  DATA 62,2D
142C:  DATA 32,32
142E:  DATA 00,00
1430:  DATA 57,44
1432:  DATA 54,20
1434:  DATA 54,49
1436:  DATA 4D,45
1438:  DATA 4F,55
143A:  DATA 54,00
143C:  DATA 4D,43
143E:  DATA 4C,52
1440:  DATA 20,46
1442:  DATA 52,4F
1444:  DATA 4D,20
1446:  DATA 53,4C
1448:  DATA 45,45
144A:  DATA 50,00
144C:  DATA 4D,43
144E:  DATA 4C,52
1450:  DATA 20,46
1452:  DATA 52,4F
1454:  DATA 4D,20
1456:  DATA 52,55
1458:  DATA 4E,00
145A:  DATA 4E,4F
145C:  DATA 52,4D
145E:  DATA 41,4C
1460:  DATA 20,50
1462:  DATA 4F,57
1464:  DATA 45,52
1466:  DATA 20,55
1468:  DATA 50,00
146A:  DATA 42,52
146C:  DATA 4F,57
146E:  DATA 4E,4F
1470:  DATA 55,54
1472:  DATA 20,52
1474:  DATA 45,53
1476:  DATA 54,41
1478:  DATA 52,54
147A:  DATA 00,00
147C:  DATA 57,44
147E:  DATA 54,20
1480:  DATA 46,52
1482:  DATA 4F,4D
1484:  DATA 20,53
1486:  DATA 4C,45
1488:  DATA 45,50
148A:  DATA 00,00
148C:  DATA 52,45
148E:  DATA 53,45
1490:  DATA 54,20
1492:  DATA 49,4E
1494:  DATA 53,54
1496:  DATA 52,55
1498:  DATA 43,54
149A:  DATA 49,4F
149C:  DATA 4E,00
149E:  DATA 55,4E
14A0:  DATA 4B,4E
14A2:  DATA 4F,57
14A4:  DATA 4E,21
14A6:  DATA 00,00
*
1B7E:  TBLRD*+
1B80:  MOVFF  FF6,11C
1B84:  MOVFF  FF7,11D
1B88:  MOVF   FF5,W
1B8A:  BTFSS  F9E.4
1B8C:  BRA    1B8A
1B8E:  MOVWF  FAD
1B90:  MOVFF  11C,FF6
1B94:  MOVFF  11D,FF7
1B98:  MOVLB  1
1B9A:  DECFSZ x1B,F
1B9C:  BRA    1BA0
1B9E:  BRA    1BA4
1BA0:  MOVLB  0
1BA2:  BRA    1B7E
1BA4:  MOVLB  0
1BA6:  RETURN 0
1BA8:  TBLRD*+
1BAA:  MOVF   FF5,F
1BAC:  BZ    1BC8
1BAE:  MOVFF  FF6,118
1BB2:  MOVFF  FF7,119
1BB6:  MOVF   FF5,W
1BB8:  BTFSS  F9E.4
1BBA:  BRA    1BB8
1BBC:  MOVWF  FAD
1BBE:  MOVFF  118,FF6
1BC2:  MOVFF  119,FF7
1BC6:  BRA    1BA8
1BC8:  RETURN 0
*
2A20:  MOVLB  1
2A22:  MOVF   x1B,W
2A24:  CLRF   01
2A26:  SUBWF  x1A,W
2A28:  BC    2A30
2A2A:  MOVFF  11A,00
2A2E:  BRA    2A48
2A30:  CLRF   00
2A32:  MOVLW  08
2A34:  MOVWF  x1C
2A36:  RLCF   x1A,F
2A38:  RLCF   00,F
2A3A:  MOVF   x1B,W
2A3C:  SUBWF  00,W
2A3E:  BTFSC  FD8.0
2A40:  MOVWF  00
2A42:  RLCF   01,F
2A44:  DECFSZ x1C,F
2A46:  BRA    2A36
2A48:  MOVLB  0
2A4A:  RETURN 0
2A4C:  MOVF   01,W
2A4E:  MOVFF  118,11A
2A52:  MOVLW  64
2A54:  MOVLB  1
2A56:  MOVWF  x1B
2A58:  MOVLB  0
2A5A:  RCALL  2A20
2A5C:  MOVFF  00,118
2A60:  MOVF   01,W
2A62:  MOVLW  30
2A64:  BNZ   2A76
2A66:  MOVLB  1
2A68:  BTFSS  x19.1
2A6A:  BRA    2A88
2A6C:  BTFSC  x19.3
2A6E:  BRA    2A88
2A70:  BTFSC  x19.4
2A72:  MOVLW  20
2A74:  BRA    2A7E
2A76:  MOVLB  1
2A78:  BCF    x19.3
2A7A:  BCF    x19.4
2A7C:  BSF    x19.0
2A7E:  ADDWF  01,F
2A80:  MOVF   01,W
2A82:  BTFSS  F9E.4
2A84:  BRA    2A82
2A86:  MOVWF  FAD
2A88:  MOVFF  118,11A
2A8C:  MOVLW  0A
2A8E:  MOVWF  x1B
2A90:  MOVLB  0
2A92:  RCALL  2A20
2A94:  MOVFF  00,118
2A98:  MOVF   01,W
2A9A:  MOVLW  30
2A9C:  BNZ   2AAE
2A9E:  MOVLB  1
2AA0:  BTFSC  x19.3
2AA2:  BRA    2ABA
2AA4:  BTFSS  x19.0
2AA6:  BRA    2ABA
2AA8:  BTFSC  x19.4
2AAA:  MOVLW  20
2AAC:  MOVLB  0
2AAE:  ADDWF  01,F
2AB0:  MOVF   01,W
2AB2:  BTFSS  F9E.4
2AB4:  BRA    2AB2
2AB6:  MOVWF  FAD
2AB8:  MOVLB  1
2ABA:  MOVLW  30
2ABC:  ADDWF  x18,F
2ABE:  MOVF   x18,W
2AC0:  BTFSS  F9E.4
2AC2:  BRA    2AC0
2AC4:  MOVWF  FAD
2AC6:  MOVLB  0
2AC8:  RETURN 0
2ACA:  MOVFF  FEA,122
2ACE:  MOVFF  FE9,121
2AD2:  MOVLB  1
2AD4:  SWAPF  x1B,W
2AD6:  IORLW  F0
2AD8:  MOVWF  x1D
2ADA:  ADDWF  x1D,F
2ADC:  ADDLW  E2
2ADE:  MOVWF  x1E
2AE0:  ADDLW  32
2AE2:  MOVWF  x20
2AE4:  MOVF   x1B,W
2AE6:  ANDLW  0F
2AE8:  ADDWF  x1E,F
2AEA:  ADDWF  x1E,F
2AEC:  ADDWF  x20,F
2AEE:  ADDLW  E9
2AF0:  MOVWF  x1F
2AF2:  ADDWF  x1F,F
2AF4:  ADDWF  x1F,F
2AF6:  SWAPF  x1A,W
2AF8:  ANDLW  0F
2AFA:  ADDWF  x1F,F
2AFC:  ADDWF  x20,F
2AFE:  RLCF   x1F,F
2B00:  RLCF   x20,F
2B02:  COMF   x20,F
2B04:  RLCF   x20,F
2B06:  MOVF   x1A,W
2B08:  ANDLW  0F
2B0A:  ADDWF  x20,F
2B0C:  RLCF   x1D,F
2B0E:  MOVLW  07
2B10:  MOVWF  x1C
2B12:  MOVLW  0A
2B14:  DECF   x1F,F
2B16:  ADDWF  x20,F
2B18:  BNC   2B14
2B1A:  DECF   x1E,F
2B1C:  ADDWF  x1F,F
2B1E:  BNC   2B1A
2B20:  DECF   x1D,F
2B22:  ADDWF  x1E,F
2B24:  BNC   2B20
2B26:  DECF   x1C,F
2B28:  ADDWF  x1D,F
2B2A:  BNC   2B26
2B2C:  MOVLW  01
2B2E:  MOVWF  FEA
2B30:  MOVLW  1C
2B32:  MOVWF  FE9
2B34:  MOVLW  07
2B36:  ANDWF  x21,W
2B38:  BCF    x21.6
2B3A:  ADDWF  FE9,F
2B3C:  MOVLW  00
2B3E:  ADDWFC FEA,F
2B40:  MOVF   FE9,W
2B42:  SUBLW  20
2B44:  BNZ   2B4C
2B46:  DECFSZ FEA,W
2B48:  BRA    2B4C
2B4A:  BSF    x21.6
2B4C:  MOVF   FEF,W
2B4E:  MOVWF  00
2B50:  BNZ   2B62
2B52:  BTFSC  x21.6
2B54:  BRA    2B62
2B56:  BTFSC  x21.4
2B58:  BRA    2B72
2B5A:  BTFSC  x21.3
2B5C:  BRA    2B62
2B5E:  MOVLW  20
2B60:  BRA    2B68
2B62:  BSF    x21.3
2B64:  BCF    x21.4
2B66:  MOVLW  30
2B68:  ADDWF  00,F
2B6A:  MOVF   00,W
2B6C:  BTFSS  F9E.4
2B6E:  BRA    2B6C
2B70:  MOVWF  FAD
2B72:  MOVF   FEE,W
2B74:  BTFSS  x21.6
2B76:  BRA    2B40
2B78:  MOVLB  0
2B7A:  RETURN 0
2B7C:  MOVLB  1
2B7E:  BTFSC  x1C.7
2B80:  BRA    2BA2
2B82:  MOVLW  0F
2B84:  MOVWF  00
2B86:  SWAPF  x1B,W
2B88:  ANDWF  00,F
2B8A:  MOVLW  0A
2B8C:  SUBWF  00,W
2B8E:  BC    2B96
2B90:  MOVLW  30
2B92:  ADDWF  00,F
2B94:  BRA    2B9A
2B96:  MOVF   x1C,W
2B98:  ADDWF  00,F
2B9A:  MOVF   00,W
2B9C:  BTFSS  F9E.4
2B9E:  BRA    2B9C
2BA0:  MOVWF  FAD
2BA2:  MOVLW  0F
2BA4:  ANDWF  x1B,F
2BA6:  MOVLW  0A
2BA8:  SUBWF  x1B,W
2BAA:  BC    2BB0
2BAC:  MOVLW  30
2BAE:  BRA    2BB4
2BB0:  BCF    x1C.7
2BB2:  MOVF   x1C,W
2BB4:  ADDWF  x1B,F
2BB6:  MOVF   x1B,W
2BB8:  BTFSS  F9E.4
2BBA:  BRA    2BB8
2BBC:  MOVWF  FAD
2BBE:  MOVLB  0
2BC0:  GOTO   3450 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #device *=16
.................... #use delay(clock=16MHz)
*
14A8:  MOVLW  01
14AA:  MOVWF  FEA
14AC:  MOVLW  24
14AE:  MOVWF  FE9
14B0:  MOVF   FEF,W
14B2:  BZ    14D0
14B4:  MOVLW  05
14B6:  MOVWF  01
14B8:  CLRF   00
14BA:  DECFSZ 00,F
14BC:  BRA    14BA
14BE:  DECFSZ 01,F
14C0:  BRA    14B8
14C2:  MOVLW  2E
14C4:  MOVWF  00
14C6:  DECFSZ 00,F
14C8:  BRA    14C6
14CA:  BRA    14CC
14CC:  DECFSZ FEF,F
14CE:  BRA    14B4
14D0:  RETURN 0
.................... 
.................... /* hardware I2C port is slave and is connected to DCSWC bus */
.................... #use i2c(stream=STREAM_SLAVE,SLAVE, I2C1, FORCE_HW)
*
0E7C:  MOVF   FC9,W
0E7E:  MOVFF  129,FC9
0E82:  BSF    FC6.4
0E84:  BCF    F9E.3
0E86:  BTFSC  FC7.0
0E88:  BRA    0E86
0E8A:  CLRF   01
0E8C:  BTFSS  FC5.6
0E8E:  INCF   01,F
0E90:  RETURN 0
.................... /* slave address set based on dip switch in init() */
.................... 
.................... 
.................... #fuses INTRC_IO
.................... #fuses NOPLLEN
.................... #fuses NOFCMEN
.................... #fuses NOIESO
.................... #fuses PUT
.................... #fuses BROWNOUT
.................... #fuses WDT512
.................... #fuses NOHFOFST
.................... #fuses NOMCLR
.................... #fuses STVREN
.................... #fuses NOLVP
.................... #fuses NOXINST
.................... #fuses NODEBUG
.................... #fuses NOPROTECT
.................... #fuses NOWRT
.................... #fuses NOWRTC 
.................... #fuses NOWRTB
.................... #fuses NOWRTD
.................... #fuses NOEBTR
.................... #fuses NOEBTRB
.................... 
.................... #use standard_io(ALL)
.................... 
.................... #use rs232(UART1,stream=STREAM_FTDI,baud=9600,errors)	
*
2A08:  BTFSS  F9E.5
2A0A:  BRA    2A08
2A0C:  MOVFF  FAB,1A
2A10:  MOVFF  FAE,01
2A14:  BTFSS  1A.1
2A16:  BRA    2A1C
2A18:  BCF    FAB.4
2A1A:  BSF    FAB.4
2A1C:  GOTO   3AD4 (RETURN)
.................... 
.................... /* program config CRC of 0 and a serial_prefix of 'A' ... that will trigger a write default on first boot */
.................... #ROM 0xF00000 = { 0x00, 0x00, 0x40, 0x00 }
.................... 
.................... 
.................... 
.................... 
.................... #define SW_OVERRIDE_A        PIN_A5
.................... #define SW_OVERRIDE_B        PIN_A4
.................... #define BRIDGE_B_A           PIN_C5
.................... #define BRIDGE_A_B           PIN_C4
.................... #define BRIDGE_A_A           PIN_C3
.................... #define BRIDGE_B_B           PIN_C6
.................... #define AN_DIP               PIN_C7
.................... #define SER_TO_PC            PIN_B7
.................... #define AN_VTEMP             PIN_A2
.................... #define AN_IN_VOLTS          PIN_C0
.................... #define LED_A                PIN_C1
.................... #define LED_B                PIN_C2
.................... #define I2C_SDA              PIN_B4
.................... #define SER_FROM_PC          PIN_B5
.................... #define I2C_SCL              PIN_B6
.................... 
.................... 
.................... /* 
.................... Parameters are stored in EEPROM
.................... */
.................... #define PARAM_CRC_ADDRESS  0x00
.................... #define PARAM_ADDRESS      PARAM_CRC_ADDRESS+2
.................... 
.................... 
.................... 
.................... /* bit positions for a channel state byte */
.................... #define CH_STATE_BIT_FUTURE   7  /* reserved for future use */
.................... #define CH_STATE_BIT_HTD      6  /* high temperature disconnect */
.................... #define CH_STATE_BIT_LTD      5  /* low temperature disconnect */
.................... #define CH_STATE_BIT_HVD      4  /* high voltage disconnect */
.................... #define CH_STATE_BIT_LVD      3  /* low voltage disconnect */
.................... #define CH_STATE_BIT_CMD_OFF  2  /* commanded off */
.................... #define CH_STATE_BIT_CMD_ON   1  /* commanded on (takes presedence over commanded off) */
.................... #define CH_STATE_BIT_OVERRIDE 0  /* override switch */
.................... 
.................... /* _OVERRIDE or _CMD_ON set means output on */
.................... #define CH_STATE_MASK_ON     0b00000011 
.................... /* _CMD_OFF, _LVD, _HVD, _LTD, _HTD means output off, unless override by on mask */
.................... #define CH_STATE_MASK_OFF    0b01111100 
.................... 
.................... #define ADC_SAMPLE_TICKS              20
.................... #define CONTACTOR_POWER_SAVE_MS       200 /* milliseconds for contactor be on. Must be >0 and <= 255 */
.................... 
.................... 
.................... typedef struct {
.................... 	/* command on hold time */
.................... 	int16 command_on_hold_time;
.................... 
.................... 	/* command off hold time */
.................... 	int16 command_off_hold_time;
.................... 
.................... 	/* low voltage disconnect */
.................... 	int16 lvd_disconnect_adc;
.................... 	int16 lvd_disconnect_delay;
.................... 	int16 lvd_reconnect_adc;
.................... 	int16 lvd_reconnect_delay;
.................... 
.................... 	/* high voltage disconnect */
.................... 	int16 hvd_disconnect_adc;
.................... 	int16 hvd_disconnect_delay;
.................... 	int16 hvd_reconnect_adc;
.................... 	int16 hvd_reconnect_delay;
.................... 
.................... 	/* low temperature disconnect */
.................... 	int16 ltd_disconnect_adc;
.................... 	int16 ltd_disconnect_delay;
.................... 	int16 ltd_reconnect_adc;
.................... 	int16 ltd_reconnect_delay;
.................... 
.................... 	/* high temperature disconnect */
.................... 	int16 htd_disconnect_adc;
.................... 	int16 htd_disconnect_delay;
.................... 	int16 htd_reconnect_adc;
.................... 	int16 htd_reconnect_delay;
.................... } struct_config_channel;
.................... 
.................... typedef struct {
.................... 	/* not much going on here */
.................... 	struct_config_channel ch[2];
.................... } struct_config;
.................... 
.................... 
.................... typedef struct {
.................... 	int8 state;
.................... 
.................... 	int16 command_on_seconds;			/* counts down. Off at zero. */
.................... 	int16 command_on_hold_seconds;      /* counts down. Off at zero. */
.................... 
.................... 	int16 command_off_seconds;			/* counts down. Off at zero. */
.................... 	int16 command_off_hold_seconds;     /* counts down. Off at zero. */
.................... 
.................... 	int16 lvd_disconnect_delay_seconds;	/* counts down */
.................... 	int16  lvd_reconnect_delay_seconds;	/* counts down */
.................... 
.................... 	int16 hvd_disconnect_delay_seconds;	/* counts down */
.................... 	int16  hvd_reconnect_delay_seconds;	/* counts down */
.................... 
.................... 	int16 ltd_disconnect_delay_seconds; /* counts down */
.................... 	int16 ltd_reconnect_delay_seconds;  /* counts down */
.................... 
.................... 	int16 htd_disconnect_delay_seconds; /* counts down */
.................... 	int16 htd_reconnect_delay_seconds;  /* counts down */
.................... } struct_channel;
.................... 
.................... typedef struct {
.................... 	/* circular buffer for ADC readings */
.................... 	int16 adc_buffer[3][16];
.................... 	int8  adc_buffer_index;
.................... 
.................... 	int16 sequence_number;
.................... 	int16 uptime_minutes;
.................... 	int16 interval_milliseconds;
.................... 
.................... 	int8 factory_unlocked;
.................... 
.................... 
.................... 	int8 compile_year;
.................... 	int8 compile_month;
.................... 	int8 compile_day;
.................... 
.................... 
.................... 	int8 default_params_written;
.................... } struct_current;
.................... 
.................... typedef struct {
.................... 	/* action flags */
.................... 	int1 now_adc_sample;
.................... 	int1 now_adc_reset_count;
.................... 
.................... 	int1 now_millisecond;
.................... 
.................... 	int1 now_write_config;
.................... 	int1 now_reset_config;
.................... 
.................... 	int1 now_debug_dump;
.................... 
.................... 
.................... 	/* timers */
.................... 	int8 led_on_a;
.................... 	int8 led_on_b;
.................... 
.................... 	/* contactors */
.................... 	int8 contactor[2]; 	         /* current state */
.................... 	int8 contactor_powersave[2]; /* countdown to shut off power to coil at 0 */
.................... } struct_time_keep;
.................... 
.................... /* global structures */
.................... struct_config config={0};
.................... struct_current current={0};
.................... struct_time_keep timers={0};
.................... struct_channel channel[2]={0};
.................... 
.................... #include "adc_dcswc_module_latching_contactor.c"
.................... int16 adc_get(int8 ch) {
.................... 	int16 sum;
.................... 	int8 i;
.................... 
.................... 	/* pre-compute address of channel adc buffer. Saves computing it 16 times in the loop below */
.................... 	int16 *p;
.................... 	p = current.adc_buffer[ch];
*
0594:  MOVLB  1
0596:  MOVF   x2B,W
0598:  MULLW  20
059A:  MOVF   FF3,W
059C:  CLRF   03
059E:  ADDLW  63
05A0:  MOVWF  01
05A2:  MOVLW  00
05A4:  ADDWFC 03,F
05A6:  MOVFF  01,12F
05AA:  MOVFF  03,130
.................... 
.................... 	// Calculate the mean.  This is done by summing up the
.................... 	// values and dividing by the number of elements.
.................... 	sum = 0;
05AE:  CLRF   x2D
05B0:  CLRF   x2C
.................... 	for( i = 0; i < 16 ; i++ ) {
05B2:  CLRF   x2E
05B4:  MOVF   x2E,W
05B6:  SUBLW  0F
05B8:  BNC   05E4
.................... //		sum += current.adc_buffer[ch][i];
.................... 		sum += p[i];
05BA:  CLRF   03
05BC:  MOVFF  12E,02
05C0:  BCF    FD8.0
05C2:  RLCF   02,F
05C4:  RLCF   03,F
05C6:  MOVF   02,W
05C8:  ADDWF  x2F,W
05CA:  MOVWF  FE9
05CC:  MOVF   x30,W
05CE:  ADDWFC 03,W
05D0:  MOVWF  FEA
05D2:  MOVFF  FEC,03
05D6:  MOVF   FED,F
05D8:  MOVF   FEF,W
05DA:  ADDWF  x2C,F
05DC:  MOVF   03,W
05DE:  ADDWFC x2D,F
05E0:  INCF   x2E,F
05E2:  BRA    05B4
.................... 	}
.................... 
.................... 	/* divide sum by our 16 samples and round by adding 8 */
.................... 	return ( (sum+8) >> 4 );
05E4:  MOVLW  08
05E6:  ADDWF  x2C,W
05E8:  MOVWF  x31
05EA:  MOVLW  00
05EC:  ADDWFC x2D,W
05EE:  MOVWF  x32
05F0:  RRCF   x32,W
05F2:  MOVWF  03
05F4:  RRCF   x31,W
05F6:  MOVWF  02
05F8:  RRCF   03,F
05FA:  RRCF   02,F
05FC:  RRCF   03,F
05FE:  RRCF   02,F
0600:  RRCF   03,F
0602:  RRCF   02,F
0604:  MOVLW  0F
0606:  ANDWF  03,F
0608:  MOVFF  02,01
060C:  MOVFF  03,02
0610:  MOVLB  0
0612:  RETURN 0
.................... }
.................... 
.................... 
.................... void adc_update(void) {
.................... 
.................... 	/* wrap buffer around */
.................... 	current.adc_buffer_index++;
*
1BCA:  INCF   xC3,F
.................... 	if ( current.adc_buffer_index >= 16 )
1BCC:  MOVF   xC3,W
1BCE:  SUBLW  0F
1BD0:  BC    1BD4
.................... 		current.adc_buffer_index=0;
1BD2:  CLRF   xC3
.................... 
.................... 	set_adc_channel(4);
1BD4:  MOVLW  10
1BD6:  MOVWF  01
1BD8:  MOVF   FC2,W
1BDA:  ANDLW  C3
1BDC:  IORWF  01,W
1BDE:  MOVWF  FC2
.................... 	current.adc_buffer[0][current.adc_buffer_index] = read_adc();
1BE0:  BCF    FD8.0
1BE2:  RLCF   xC3,W
1BE4:  CLRF   03
1BE6:  ADDLW  63
1BE8:  MOVWF  FE9
1BEA:  MOVLW  00
1BEC:  ADDWFC 03,W
1BEE:  MOVWF  FEA
1BF0:  BSF    FC2.1
1BF2:  BTFSC  FC2.1
1BF4:  BRA    1BF2
1BF6:  MOVFF  FC3,FEF
1BFA:  MOVFF  FC4,FEC
.................... 
.................... 
.................... 	set_adc_channel(2);
1BFE:  MOVLW  08
1C00:  MOVWF  01
1C02:  MOVF   FC2,W
1C04:  ANDLW  C3
1C06:  IORWF  01,W
1C08:  MOVWF  FC2
.................... 	delay_ms(1);
1C0A:  MOVLW  01
1C0C:  MOVLB  1
1C0E:  MOVWF  x24
1C10:  MOVLB  0
1C12:  RCALL  14A8
.................... 	current.adc_buffer[1][current.adc_buffer_index] = read_adc();
1C14:  BCF    FD8.0
1C16:  RLCF   xC3,W
1C18:  CLRF   03
1C1A:  ADDLW  83
1C1C:  MOVWF  FE9
1C1E:  MOVLW  00
1C20:  ADDWFC 03,W
1C22:  MOVWF  FEA
1C24:  BSF    FC2.1
1C26:  BTFSC  FC2.1
1C28:  BRA    1C26
1C2A:  MOVFF  FC3,FEF
1C2E:  MOVFF  FC4,FEC
.................... 
.................... 	set_adc_channel(9);
1C32:  MOVLW  24
1C34:  MOVWF  01
1C36:  MOVF   FC2,W
1C38:  ANDLW  C3
1C3A:  IORWF  01,W
1C3C:  MOVWF  FC2
.................... 	delay_ms(1);
1C3E:  MOVLW  01
1C40:  MOVLB  1
1C42:  MOVWF  x24
1C44:  MOVLB  0
1C46:  RCALL  14A8
.................... 	current.adc_buffer[2][current.adc_buffer_index] = read_adc();
1C48:  BCF    FD8.0
1C4A:  RLCF   xC3,W
1C4C:  CLRF   03
1C4E:  ADDLW  A3
1C50:  MOVWF  FE9
1C52:  MOVLW  00
1C54:  ADDWFC 03,W
1C56:  MOVWF  FEA
1C58:  BSF    FC2.1
1C5A:  BTFSC  FC2.1
1C5C:  BRA    1C5A
1C5E:  MOVFF  FC3,FEF
1C62:  MOVFF  FC4,FEC
1C66:  RETURN 0
.................... }
.................... 
.................... int8 read_dip_switch(void) {
.................... 	int16 adc;
.................... 
.................... 	set_adc_channel(9);
*
14D2:  MOVLW  24
14D4:  MOVWF  01
14D6:  MOVF   FC2,W
14D8:  ANDLW  C3
14DA:  IORWF  01,W
14DC:  MOVWF  FC2
.................... 	delay_ms(1);
14DE:  MOVLW  01
14E0:  MOVLB  1
14E2:  MOVWF  x24
14E4:  MOVLB  0
14E6:  RCALL  14A8
.................... 	adc=read_adc();
14E8:  BSF    FC2.1
14EA:  BTFSC  FC2.1
14EC:  BRA    14EA
14EE:  MOVFF  FC4,123
14F2:  MOVFF  FC3,122
.................... 
.................... 	/* (note that table is sorted by vout reading 
.................... 	SW3.1 (LSB) SW3.2 (MSB) VALUE ADC
....................     OFF         OFF         0     1023
.................... 	OFF         ON          2     682
....................     ON          OFF         1     511
.................... 	ON          ON          3     409
.................... 	*/
.................... 
.................... 	if ( adc > (1023-64) )
14F6:  MOVLB  1
14F8:  MOVF   x23,W
14FA:  SUBLW  02
14FC:  BC    150E
14FE:  XORLW  FF
1500:  BNZ   1508
1502:  MOVF   x22,W
1504:  SUBLW  BF
1506:  BC    150E
.................... 		return 0;
1508:  MOVLW  00
150A:  MOVWF  01
150C:  BRA    153E
.................... 	if ( adc > (682-64) )
150E:  MOVF   x23,W
1510:  SUBLW  01
1512:  BC    1524
1514:  XORLW  FF
1516:  BNZ   151E
1518:  MOVF   x22,W
151A:  SUBLW  6A
151C:  BC    1524
.................... 		return 2;
151E:  MOVLW  02
1520:  MOVWF  01
1522:  BRA    153E
.................... 	if ( adc > (511-64) )
1524:  MOVF   x23,W
1526:  SUBLW  00
1528:  BC    153A
152A:  XORLW  FF
152C:  BNZ   1534
152E:  MOVF   x22,W
1530:  SUBLW  BF
1532:  BC    153A
.................... 		return 1;
1534:  MOVLW  01
1536:  MOVWF  01
1538:  BRA    153E
.................... 
.................... 	return 3;
153A:  MOVLW  03
153C:  MOVWF  01
153E:  MOVLB  0
1540:  GOTO   17F6 (RETURN)
.................... }
.................... 
.................... #include "param_dcswc_module_latching_contactor.c"
.................... #inline
.................... char xor_crc(char oldcrc, char data) {
.................... 	return oldcrc ^ data;
*
186E:  MOVF   x24,W
1870:  XORWF  x25,W
1872:  MOVWF  01
*
18BC:  MOVF   x24,W
18BE:  XORWF  x25,W
18C0:  MOVWF  01
.................... }
.................... 
.................... char EEPROMDataRead( int16 address, int8 *data, int16 count ) {
*
1806:  MOVLB  1
1808:  CLRF   x20
.................... 	char crc=0;
.................... 
.................... 	while ( count-- != 0 ) {
180A:  MOVFF  11F,122
180E:  MOVF   x1E,W
1810:  BTFSC  FD8.2
1812:  DECF   x1F,F
1814:  DECF   x1E,F
1816:  MOVWF  x21
1818:  MOVF   x21,F
181A:  BNZ   1820
181C:  MOVF   x22,F
181E:  BZ    1880
.................... 		*data = read_eeprom( address++ );
1820:  MOVFF  11D,03
1824:  MOVF   x1C,W
1826:  MOVWF  FE9
1828:  MOVFF  03,FEA
182C:  MOVF   x1B,W
182E:  MOVWF  03
1830:  MOVF   x1A,W
1832:  INCF   x1A,F
1834:  BTFSC  FD8.2
1836:  INCF   x1B,F
1838:  MOVWF  x23
183A:  MOVFF  03,124
183E:  MOVFF  FF2,125
1842:  BCF    FF2.7
1844:  MOVFF  123,FA9
1848:  BCF    FA6.6
184A:  BCF    FA6.7
184C:  BSF    FA6.0
184E:  MOVF   FA8,W
1850:  BTFSC  x25.7
1852:  BSF    FF2.7
1854:  MOVWF  FEF
.................... 		crc = xor_crc(crc,*data);
1856:  MOVFF  11D,03
185A:  MOVF   x1C,W
185C:  MOVWF  FE9
185E:  MOVFF  03,FEA
1862:  MOVFF  FEF,121
1866:  MOVFF  120,124
186A:  MOVFF  121,125
*
1874:  MOVFF  01,120
.................... 		data++;
1878:  INCF   x1C,F
187A:  BTFSC  FD8.2
187C:  INCF   x1D,F
187E:  BRA    180A
.................... 	}
.................... 	return crc;
1880:  MOVFF  120,01
1884:  MOVLB  0
1886:  GOTO   1B54 (RETURN)
.................... }
.................... 
.................... char EEPROMDataWrite( int16 address, int8 *data, int16 count ) {
188A:  MOVLB  1
188C:  CLRF   x22
.................... 	char crc=0;
.................... 
.................... 	while ( count-- != 0 ) {
188E:  MOVFF  121,124
1892:  MOVF   x20,W
1894:  BTFSC  FD8.2
1896:  DECF   x21,F
1898:  DECF   x20,F
189A:  MOVWF  x23
189C:  MOVF   x23,F
189E:  BNZ   18A4
18A0:  MOVF   x24,F
18A2:  BZ    191C
.................... 		/* restart_wdt() */
.................... 		crc = xor_crc(crc,*data);
18A4:  MOVFF  11F,03
18A8:  MOVF   x1E,W
18AA:  MOVWF  FE9
18AC:  MOVFF  03,FEA
18B0:  MOVFF  FEF,123
18B4:  MOVFF  122,124
18B8:  MOVFF  123,125
*
18C2:  MOVFF  01,122
.................... 		write_eeprom( address++, *data++ );
18C6:  MOVF   x1D,W
18C8:  MOVWF  03
18CA:  MOVF   x1C,W
18CC:  INCF   x1C,F
18CE:  BTFSC  FD8.2
18D0:  INCF   x1D,F
18D2:  MOVWF  x23
18D4:  MOVFF  03,124
18D8:  MOVF   x1F,W
18DA:  MOVWF  03
18DC:  MOVF   x1E,W
18DE:  INCF   x1E,F
18E0:  BTFSC  FD8.2
18E2:  INCF   x1F,F
18E4:  MOVWF  FE9
18E6:  MOVFF  03,FEA
18EA:  MOVFF  FEF,125
18EE:  MOVF   FF2,W
18F0:  MOVWF  00
18F2:  BCF    FF2.7
18F4:  MOVFF  123,FA9
18F8:  MOVFF  125,FA8
18FC:  BCF    FA6.6
18FE:  BCF    FA6.7
1900:  BSF    FA6.2
1902:  MOVLB  F
1904:  MOVLW  55
1906:  MOVWF  FA7
1908:  MOVLW  AA
190A:  MOVWF  FA7
190C:  BSF    FA6.1
190E:  BTFSC  FA6.1
1910:  BRA    190E
1912:  BCF    FA6.2
1914:  MOVF   00,W
1916:  IORWF  FF2,F
1918:  MOVLB  1
191A:  BRA    188E
.................... 	}
.................... 
.................... 	return crc;
191C:  MOVFF  122,01
1920:  MOVLB  0
1922:  GOTO   1942 (RETURN)
.................... }
.................... 
.................... void write_param_file() {
.................... 	int8 crc;
.................... 
.................... 	/* write the config structure */
.................... 	crc = EEPROMDataWrite(PARAM_ADDRESS,(void *)&config,sizeof(config));
1926:  MOVLB  1
1928:  MOVLW  1B
192A:  MOVWF  x1A
192C:  CLRF   x1D
192E:  MOVLW  02
1930:  MOVWF  x1C
1932:  CLRF   x1F
1934:  MOVFF  11A,11E
1938:  CLRF   x21
193A:  MOVLW  48
193C:  MOVWF  x20
193E:  MOVLB  0
1940:  BRA    188A
1942:  MOVFF  01,119
.................... 	/* write the CRC was calculated on the structure */
.................... 	write_eeprom(PARAM_CRC_ADDRESS,crc);
1946:  MOVF   FF2,W
1948:  MOVWF  00
194A:  BCF    FF2.7
194C:  CLRF   FA9
194E:  MOVFF  119,FA8
1952:  BCF    FA6.6
1954:  BCF    FA6.7
1956:  BSF    FA6.2
1958:  MOVLB  F
195A:  MOVLW  55
195C:  MOVWF  FA7
195E:  MOVLW  AA
1960:  MOVWF  FA7
1962:  BSF    FA6.1
1964:  BTFSC  FA6.1
1966:  BRA    1964
1968:  BCF    FA6.2
196A:  MOVF   00,W
196C:  IORWF  FF2,F
196E:  MOVLB  0
1970:  RETURN 0
.................... }
.................... 
.................... void write_default_param_file() {
.................... 	int8 i;
.................... 
.................... 	current.default_params_written=1;
1972:  MOVLW  01
1974:  MOVWF  xCE
.................... 
.................... 	/* both LEDs on */
.................... 	timers.led_on_a=150;
1976:  MOVLW  96
1978:  MOVWF  xD0
.................... 	timers.led_on_b=150;
197A:  MOVWF  xD1
.................... 
.................... 
.................... 	for ( i=0 ; i<2 ; i++ ) {
197C:  MOVLB  1
197E:  CLRF   x18
1980:  MOVF   x18,W
1982:  SUBLW  01
1984:  BTFSS  FD8.0
1986:  BRA    1B32
.................... 		config.ch[i].lvd_disconnect_adc=303;
1988:  MOVF   x18,W
198A:  MULLW  24
198C:  MOVF   FF3,W
198E:  CLRF   x1A
1990:  MOVWF  x19
1992:  MOVLW  04
1994:  ADDWF  x19,W
1996:  MOVWF  01
1998:  MOVLW  00
199A:  ADDWFC x1A,W
199C:  MOVWF  03
199E:  MOVF   01,W
19A0:  ADDLW  1B
19A2:  MOVWF  FE9
19A4:  MOVLW  00
19A6:  ADDWFC 03,W
19A8:  MOVWF  FEA
19AA:  MOVLW  01
19AC:  MOVWF  FEC
19AE:  MOVF   FED,F
19B0:  MOVLW  2F
19B2:  MOVWF  FEF
.................... 		config.ch[i].lvd_disconnect_delay=40;
19B4:  MOVF   x18,W
19B6:  MULLW  24
19B8:  MOVF   FF3,W
19BA:  CLRF   x1A
19BC:  MOVWF  x19
19BE:  MOVLW  06
19C0:  ADDWF  x19,W
19C2:  MOVWF  01
19C4:  MOVLW  00
19C6:  ADDWFC x1A,W
19C8:  MOVWF  03
19CA:  MOVF   01,W
19CC:  ADDLW  1B
19CE:  MOVWF  FE9
19D0:  MOVLW  00
19D2:  ADDWFC 03,W
19D4:  MOVWF  FEA
19D6:  CLRF   FEC
19D8:  MOVF   FED,F
19DA:  MOVLW  28
19DC:  MOVWF  FEF
.................... 		config.ch[i].lvd_reconnect_adc=308;
19DE:  MOVF   x18,W
19E0:  MULLW  24
19E2:  MOVF   FF3,W
19E4:  CLRF   x1A
19E6:  MOVWF  x19
19E8:  MOVLW  08
19EA:  ADDWF  x19,W
19EC:  MOVWF  01
19EE:  MOVLW  00
19F0:  ADDWFC x1A,W
19F2:  MOVWF  03
19F4:  MOVF   01,W
19F6:  ADDLW  1B
19F8:  MOVWF  FE9
19FA:  MOVLW  00
19FC:  ADDWFC 03,W
19FE:  MOVWF  FEA
1A00:  MOVLW  01
1A02:  MOVWF  FEC
1A04:  MOVF   FED,F
1A06:  MOVLW  34
1A08:  MOVWF  FEF
.................... 		config.ch[i].lvd_reconnect_delay=10;
1A0A:  MOVF   x18,W
1A0C:  MULLW  24
1A0E:  MOVF   FF3,W
1A10:  CLRF   x1A
1A12:  MOVWF  x19
1A14:  MOVLW  0A
1A16:  ADDWF  x19,W
1A18:  MOVWF  01
1A1A:  MOVLW  00
1A1C:  ADDWFC x1A,W
1A1E:  MOVWF  03
1A20:  MOVF   01,W
1A22:  ADDLW  1B
1A24:  MOVWF  FE9
1A26:  MOVLW  00
1A28:  ADDWFC 03,W
1A2A:  MOVWF  FEA
1A2C:  CLRF   FEC
1A2E:  MOVF   FED,F
1A30:  MOVLW  0A
1A32:  MOVWF  FEF
.................... 		
.................... 
.................... 		config.ch[i].hvd_disconnect_adc=410;
1A34:  MOVF   x18,W
1A36:  MULLW  24
1A38:  MOVF   FF3,W
1A3A:  CLRF   x1A
1A3C:  MOVWF  x19
1A3E:  MOVLW  0C
1A40:  ADDWF  x19,W
1A42:  MOVWF  01
1A44:  MOVLW  00
1A46:  ADDWFC x1A,W
1A48:  MOVWF  03
1A4A:  MOVF   01,W
1A4C:  ADDLW  1B
1A4E:  MOVWF  FE9
1A50:  MOVLW  00
1A52:  ADDWFC 03,W
1A54:  MOVWF  FEA
1A56:  MOVLW  01
1A58:  MOVWF  FEC
1A5A:  MOVF   FED,F
1A5C:  MOVLW  9A
1A5E:  MOVWF  FEF
.................... 		config.ch[i].hvd_disconnect_delay=65535;
1A60:  MOVF   x18,W
1A62:  MULLW  24
1A64:  MOVF   FF3,W
1A66:  CLRF   x1A
1A68:  MOVWF  x19
1A6A:  MOVLW  0E
1A6C:  ADDWF  x19,W
1A6E:  MOVWF  01
1A70:  MOVLW  00
1A72:  ADDWFC x1A,W
1A74:  MOVWF  03
1A76:  MOVF   01,W
1A78:  ADDLW  1B
1A7A:  MOVWF  FE9
1A7C:  MOVLW  00
1A7E:  ADDWFC 03,W
1A80:  MOVWF  FEA
1A82:  SETF   FEC
1A84:  MOVF   FED,F
1A86:  SETF   FEF
.................... 		config.ch[i].hvd_reconnect_adc=385;
1A88:  MOVF   x18,W
1A8A:  MULLW  24
1A8C:  MOVF   FF3,W
1A8E:  CLRF   x1A
1A90:  MOVWF  x19
1A92:  MOVLW  10
1A94:  ADDWF  x19,W
1A96:  MOVWF  01
1A98:  MOVLW  00
1A9A:  ADDWFC x1A,W
1A9C:  MOVWF  03
1A9E:  MOVF   01,W
1AA0:  ADDLW  1B
1AA2:  MOVWF  FE9
1AA4:  MOVLW  00
1AA6:  ADDWFC 03,W
1AA8:  MOVWF  FEA
1AAA:  MOVLW  01
1AAC:  MOVWF  FEC
1AAE:  MOVF   FED,F
1AB0:  MOVLW  81
1AB2:  MOVWF  FEF
.................... 		config.ch[i].hvd_reconnect_delay=60;
1AB4:  MOVF   x18,W
1AB6:  MULLW  24
1AB8:  MOVF   FF3,W
1ABA:  CLRF   x1A
1ABC:  MOVWF  x19
1ABE:  MOVLW  12
1AC0:  ADDWF  x19,W
1AC2:  MOVWF  01
1AC4:  MOVLW  00
1AC6:  ADDWFC x1A,W
1AC8:  MOVWF  03
1ACA:  MOVF   01,W
1ACC:  ADDLW  1B
1ACE:  MOVWF  FE9
1AD0:  MOVLW  00
1AD2:  ADDWFC 03,W
1AD4:  MOVWF  FEA
1AD6:  CLRF   FEC
1AD8:  MOVF   FED,F
1ADA:  MOVLW  3C
1ADC:  MOVWF  FEF
.................... 
.................... 
.................... 		config.ch[i].ltd_disconnect_delay=65535;
1ADE:  MOVF   x18,W
1AE0:  MULLW  24
1AE2:  MOVF   FF3,W
1AE4:  CLRF   x1A
1AE6:  MOVWF  x19
1AE8:  MOVLW  16
1AEA:  ADDWF  x19,W
1AEC:  MOVWF  01
1AEE:  MOVLW  00
1AF0:  ADDWFC x1A,W
1AF2:  MOVWF  03
1AF4:  MOVF   01,W
1AF6:  ADDLW  1B
1AF8:  MOVWF  FE9
1AFA:  MOVLW  00
1AFC:  ADDWFC 03,W
1AFE:  MOVWF  FEA
1B00:  SETF   FEC
1B02:  MOVF   FED,F
1B04:  SETF   FEF
.................... 		config.ch[i].htd_disconnect_delay=65535;
1B06:  MOVF   x18,W
1B08:  MULLW  24
1B0A:  MOVF   FF3,W
1B0C:  CLRF   x1A
1B0E:  MOVWF  x19
1B10:  MOVLW  1E
1B12:  ADDWF  x19,W
1B14:  MOVWF  01
1B16:  MOVLW  00
1B18:  ADDWFC x1A,W
1B1A:  MOVWF  03
1B1C:  MOVF   01,W
1B1E:  ADDLW  1B
1B20:  MOVWF  FE9
1B22:  MOVLW  00
1B24:  ADDWFC 03,W
1B26:  MOVWF  FEA
1B28:  SETF   FEC
1B2A:  MOVF   FED,F
1B2C:  SETF   FEF
1B2E:  INCF   x18,F
1B30:  BRA    1980
.................... 	}
.................... 	
.................... 	/* write them so next time we use from EEPROM */
.................... 	write_param_file();
1B32:  MOVLB  0
1B34:  RCALL  1926
1B36:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... void read_param_file() {
.................... 	int8 crc;
.................... 
.................... 	crc = EEPROMDataRead(PARAM_ADDRESS, (void *)&config, sizeof(config)); 
1B38:  MOVLB  1
1B3A:  MOVLW  1B
1B3C:  MOVWF  x18
1B3E:  CLRF   x1B
1B40:  MOVLW  02
1B42:  MOVWF  x1A
1B44:  CLRF   x1D
1B46:  MOVFF  118,11C
1B4A:  CLRF   x1F
1B4C:  MOVLW  48
1B4E:  MOVWF  x1E
1B50:  MOVLB  0
1B52:  BRA    1806
1B54:  MOVFF  01,117
.................... 		
.................... 	if ( crc != read_eeprom(PARAM_CRC_ADDRESS) ) {
1B58:  MOVFF  FF2,118
1B5C:  BCF    FF2.7
1B5E:  CLRF   FA9
1B60:  BCF    FA6.6
1B62:  BCF    FA6.7
1B64:  BSF    FA6.0
1B66:  MOVF   FA8,W
1B68:  MOVLB  1
1B6A:  BTFSC  x18.7
1B6C:  BSF    FF2.7
1B6E:  SUBWF  x17,W
1B70:  BZ    1B78
.................... 		write_default_param_file();
1B72:  MOVLB  0
1B74:  RCALL  1972
1B76:  MOVLB  1
.................... 	}
1B78:  MOVLB  0
1B7A:  GOTO   3986 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #include "i2c_handler_dcswc_module_latching_contactor.c"
.................... #include "registers_dcswc_module_latching_contactor.h"
.................... 
.................... /* first two or three registers will give enough information for telemetry */
.................... /* 10 bit input voltage ADC averaged value */
.................... #define I2C_REG_VOLTAGE_INPUT_AVG             0  
.................... /* two 8 bit channel states (A is MSB / B is LSB) */
.................... #define I2C_REG_STATE_CONTACTORS              1 
.................... /* 10 bit NTC thermistor ADC averaged value */
.................... #define I2C_REG_TEMPERATURE_BOARD_AVG         2
.................... 
....................   
.................... /* channel 0 / A */
.................... /* command can only come from I2C interface */
.................... #define I2C_REG_CH0_COMMAND_ON                3 /* R/W seconds */
.................... #define I2C_REG_CH0_COMMAND_ON_HOLD           4
.................... 
.................... #define I2C_REG_CH0_COMMAND_OFF               5 /* R/W seconds */
.................... #define I2C_REG_CH0_COMMAND_OFF_HOLD          6
.................... 
.................... /* low voltage disconnect */
.................... #define I2C_REG_CH0_LVD_DISCONNECT            7  /* R seconds */
.................... #define I2C_REG_CH0_LVD_RECONNECT             8 
.................... 
.................... /* high voltage disconnect */
.................... #define I2C_REG_CH0_HVD_DISCONNECT            9 /* R seconds */
.................... #define I2C_REG_CH0_HVD_RECONNECT             10
.................... 
.................... /* low temperature disconnect */
.................... #define I2C_REG_CH0_LTD_DISCONNECT            11  /* R seconds */
.................... #define I2C_REG_CH0_LTD_RECONNECT             12
.................... 
.................... /* high temperature disconnect */
.................... #define I2C_REG_CH0_HTD_DISCONNECT            13 /* R seconds */
.................... #define I2C_REG_CH0_HTD_RECONNECT             14
.................... 
.................... /* reserved for future, unimplemented */
.................... #define I2C_REG_CH0_FUT_DISCONNECT            15 /* R seconds */
.................... #define I2C_REG_CH0_FUT_RECONNECT             16
.................... 
.................... /* channel 1 / B */
.................... /* command can only come from I2C interface */
.................... #define I2C_REG_CH1_COMMAND_ON                17 /* R/W seconds */
.................... #define I2C_REG_CH1_COMMAND_ON_HOLD           18
.................... 
.................... #define I2C_REG_CH1_COMMAND_OFF               19 /* R/W seconds */
.................... #define I2C_REG_CH1_COMMAND_OFF_HOLD          20
.................... 
.................... /* low voltage disconnect */
.................... #define I2C_REG_CH1_LVD_DISCONNECT            21 /* R seconds */
.................... #define I2C_REG_CH1_LVD_RECONNECT             22 
.................... 
.................... /* high voltage disconnect */
.................... #define I2C_REG_CH1_HVD_DISCONNECT            23 /* R seconds */
.................... #define I2C_REG_CH1_HVD_RECONNECT             24
.................... 
.................... /* low temperature disconnect */
.................... #define I2C_REG_CH1_LTD_DISCONNECT            25  /* R seconds */
.................... #define I2C_REG_CH1_LTD_RECONNECT             26
.................... 
.................... /* high temperature disconnect */
.................... #define I2C_REG_CH1_HTD_DISCONNECT            27 /* R seconds */
.................... #define I2C_REG_CH1_HTD_RECONNECT             28
.................... 
.................... /* reserved for future, unimplemented */
.................... #define I2C_REG_CH1_FUT_DISCONNECT            29 /* R seconds */
.................... #define I2C_REG_CH1_FUT_RECONNECT             30
.................... 
.................... /* meta */
.................... #define I2C_REG_SEQUENCE_NUMBER               31 /* R */
.................... #define I2C_REG_TIME_INTERVAL_MILLISECONDS    32
.................... #define I2C_REG_TIME_UPTIME_MINUTES           33
.................... #define I2C_REG_DEFAULT_PARAMS_WRITTEN        34
.................... 
.................... /* channel configuration */
.................... /* channel 0 / A */
.................... #define I2C_REG_CH0_COMMAND_ON_HOLD_INITIAL   64
.................... 
.................... #define I2C_REG_CH0_COMMAND_OFF_HOLD_INITIAL  65
.................... 
.................... #define I2C_REG_CH0_LVD_DISCONNECT_ADC        66
.................... #define I2C_REG_CH0_LVD_DISCONNECT_DELAY      67
.................... #define I2C_REG_CH0_LVD_RECONNECT_ADC         68
.................... #define I2C_REG_CH0_LVD_RECONNECT_DELAY       69
.................... 
.................... #define I2C_REG_CH0_HVD_DISCONNECT_ADC        70
.................... #define I2C_REG_CH0_HVD_DISCONNECT_DELAY      71
.................... #define I2C_REG_CH0_HVD_RECONNECT_ADC         72
.................... #define I2C_REG_CH0_HVD_RECONNECT_DELAY       73
.................... 
.................... #define I2C_REG_CH0_LTD_DISCONNECT_ADC        74
.................... #define I2C_REG_CH0_LTD_DISCONNECT_DELAY      75
.................... #define I2C_REG_CH0_LTD_RECONNECT_ADC         76
.................... #define I2C_REG_CH0_LTD_RECONNECT_DELAY       77
.................... 
.................... #define I2C_REG_CH0_HTD_DISCONNECT_ADC        78
.................... #define I2C_REG_CH0_HTD_DISCONNECT_DELAY      79
.................... #define I2C_REG_CH0_HTD_RECONNECT_ADC         80
.................... #define I2C_REG_CH0_HTD_RECONNECT_DELAY       81
.................... 
.................... #define I2C_REG_CH0_FUT_DISCONNECT_VALUE      82
.................... #define I2C_REG_CH0_FUT_DISCONNECT_DELAY      83
.................... #define I2C_REG_CH0_FUT_RECONNECT_VALUE       84
.................... #define I2C_REG_CH0_FUT_RECONNECT_DELAY       85
.................... 
.................... /* channel 1 / B */
.................... #define I2C_REG_CH1_COMMAND_ON_HOLD_INITIAL   86
.................... 
.................... #define I2C_REG_CH1_COMMAND_OFF_HOLD_INITIAL  87
.................... 
.................... #define I2C_REG_CH1_LVD_DISCONNECT_ADC        88
.................... #define I2C_REG_CH1_LVD_DISCONNECT_DELAY      89
.................... #define I2C_REG_CH1_LVD_RECONNECT_ADC         90
.................... #define I2C_REG_CH1_LVD_RECONNECT_DELAY       91
.................... 
.................... #define I2C_REG_CH1_HVD_DISCONNECT_ADC        92
.................... #define I2C_REG_CH1_HVD_DISCONNECT_DELAY      93
.................... #define I2C_REG_CH1_HVD_RECONNECT_ADC         94
.................... #define I2C_REG_CH1_HVD_RECONNECT_DELAY       95
.................... 
.................... #define I2C_REG_CH1_LTD_DISCONNECT_ADC        96
.................... #define I2C_REG_CH1_LTD_DISCONNECT_DELAY      97
.................... #define I2C_REG_CH1_LTD_RECONNECT_ADC         98
.................... #define I2C_REG_CH1_LTD_RECONNECT_DELAY       99
.................... 
.................... #define I2C_REG_CH1_HTD_DISCONNECT_ADC        100
.................... #define I2C_REG_CH1_HTD_DISCONNECT_DELAY      101
.................... #define I2C_REG_CH1_HTD_RECONNECT_ADC         102
.................... #define I2C_REG_CH1_HTD_RECONNECT_DELAY       103
.................... 
.................... #define I2C_REG_CH1_FUT_DISCONNECT_VALUE      104
.................... #define I2C_REG_CH1_FUT_DISCONNECT_DELAY      105
.................... #define I2C_REG_CH1_FUT_RECONNECT_VALUE       106
.................... #define I2C_REG_CH1_FUT_RECONNECT_DELAY       107
.................... 
.................... 
.................... /* configuration */
.................... #define I2C_REG_CONFIG_HARDWARE_MODEL              128 /* R */
.................... #define I2C_REG_CONFIG_HARDWARE_VERSION            129
.................... #define I2C_REG_CONFIG_SOFTWARE_MODEL              130
.................... #define I2C_REG_CONFIG_SOFTWARE_VERSION            131
.................... #define I2C_REG_CONFIG_SOFTWARE_YEAR               132
.................... #define I2C_REG_CONFIG_SOFTWARE_MONTH              133
.................... #define I2C_REG_CONFIG_SOFTWARE_DAY                134
.................... 
.................... #define I2C_REG_CONFIG_PARAM_WRITE                 135 /* R / W */
.................... 
.................... 
.................... 
.................... void write_i2c(int8 addr, int16 value) {
.................... 	int8 c;
.................... 
.................... 	/* c is the channel we are accessing based on register range */
.................... 	if ( addr >= I2C_REG_CH1_COMMAND_ON && addr <= I2C_REG_CH1_FUT_RECONNECT ) {
*
00DC:  MOVLB  1
00DE:  MOVF   x2B,W
00E0:  SUBLW  10
00E2:  BC    00F4
00E4:  MOVF   x2B,W
00E6:  SUBLW  1E
00E8:  BNC   00F4
.................... 		/* channel 1 status region */
.................... 		c=1;
00EA:  MOVLW  01
00EC:  MOVWF  x2E
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON - I2C_REG_CH0_COMMAND_ON);
00EE:  MOVLW  0E
00F0:  SUBWF  x2B,F
.................... 	} else if ( addr >= I2C_REG_CH1_COMMAND_ON_HOLD && addr <= I2C_REG_CH1_FUT_RECONNECT_DELAY ) {
00F2:  BRA    010C
00F4:  MOVF   x2B,W
00F6:  SUBLW  11
00F8:  BC    010A
00FA:  MOVF   x2B,W
00FC:  SUBLW  6B
00FE:  BNC   010A
.................... 		/* channel 1 configuration region */
.................... 		c=1;
0100:  MOVLW  01
0102:  MOVWF  x2E
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON_HOLD - I2C_REG_CH0_COMMAND_ON_HOLD );
0104:  MOVLW  0E
0106:  SUBWF  x2B,F
.................... 	} else {
0108:  BRA    010C
.................... 		c=0;
010A:  CLRF   x2E
.................... 	}
.................... 
.................... 	switch ( addr ) {
010C:  MOVF   x2B,W
010E:  XORLW  03
0110:  MOVLB  0
0112:  BZ    018A
0114:  XORLW  07
0116:  BZ    01BA
0118:  XORLW  01
011A:  BZ    01EA
011C:  XORLW  03
011E:  BTFSC  FD8.2
0120:  BRA    021A
0122:  XORLW  44
0124:  BTFSC  FD8.2
0126:  BRA    024A
0128:  XORLW  01
012A:  BTFSC  FD8.2
012C:  BRA    027A
012E:  XORLW  07
0130:  BTFSC  FD8.2
0132:  BRA    02AA
0134:  XORLW  01
0136:  BTFSC  FD8.2
0138:  BRA    02DA
013A:  XORLW  03
013C:  BTFSC  FD8.2
013E:  BRA    030A
0140:  XORLW  01
0142:  BTFSC  FD8.2
0144:  BRA    033A
0146:  XORLW  0F
0148:  BTFSC  FD8.2
014A:  BRA    036A
014C:  XORLW  01
014E:  BTFSC  FD8.2
0150:  BRA    039A
0152:  XORLW  03
0154:  BTFSC  FD8.2
0156:  BRA    03CA
0158:  XORLW  01
015A:  BTFSC  FD8.2
015C:  BRA    03FA
015E:  XORLW  07
0160:  BTFSC  FD8.2
0162:  BRA    042A
0164:  XORLW  01
0166:  BTFSC  FD8.2
0168:  BRA    045A
016A:  XORLW  03
016C:  BTFSC  FD8.2
016E:  BRA    048A
0170:  XORLW  01
0172:  BTFSC  FD8.2
0174:  BRA    04BA
0176:  XORLW  1F
0178:  BTFSC  FD8.2
017A:  BRA    04EA
017C:  XORLW  01
017E:  BTFSC  FD8.2
0180:  BRA    051A
0182:  XORLW  D6
0184:  BTFSC  FD8.2
0186:  BRA    054A
0188:  BRA    0590
.................... 		case I2C_REG_CH0_COMMAND_ON:
.................... 			channel[c].command_on_seconds=value;
018A:  MOVLB  1
018C:  MOVF   x2E,W
018E:  MULLW  19
0190:  MOVF   FF3,W
0192:  CLRF   x30
0194:  MOVWF  x2F
0196:  MOVLW  01
0198:  ADDWF  x2F,W
019A:  MOVWF  01
019C:  MOVLW  00
019E:  ADDWFC x30,W
01A0:  MOVWF  03
01A2:  MOVF   01,W
01A4:  ADDLW  D6
01A6:  MOVWF  FE9
01A8:  MOVLW  00
01AA:  ADDWFC 03,W
01AC:  MOVWF  FEA
01AE:  MOVFF  12D,FEC
01B2:  MOVF   FED,F
01B4:  MOVFF  12C,FEF
01B8:  MOVLB  0
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD:
.................... 			channel[c].command_on_hold_seconds=value;
01BA:  MOVLB  1
01BC:  MOVF   x2E,W
01BE:  MULLW  19
01C0:  MOVF   FF3,W
01C2:  CLRF   x30
01C4:  MOVWF  x2F
01C6:  MOVLW  03
01C8:  ADDWF  x2F,W
01CA:  MOVWF  01
01CC:  MOVLW  00
01CE:  ADDWFC x30,W
01D0:  MOVWF  03
01D2:  MOVF   01,W
01D4:  ADDLW  D6
01D6:  MOVWF  FE9
01D8:  MOVLW  00
01DA:  ADDWFC 03,W
01DC:  MOVWF  FEA
01DE:  MOVFF  12D,FEC
01E2:  MOVF   FED,F
01E4:  MOVFF  12C,FEF
01E8:  MOVLB  0
.................... 	
.................... 		case I2C_REG_CH0_COMMAND_OFF:
.................... 			channel[c].command_off_seconds=value;
01EA:  MOVLB  1
01EC:  MOVF   x2E,W
01EE:  MULLW  19
01F0:  MOVF   FF3,W
01F2:  CLRF   x30
01F4:  MOVWF  x2F
01F6:  MOVLW  05
01F8:  ADDWF  x2F,W
01FA:  MOVWF  01
01FC:  MOVLW  00
01FE:  ADDWFC x30,W
0200:  MOVWF  03
0202:  MOVF   01,W
0204:  ADDLW  D6
0206:  MOVWF  FE9
0208:  MOVLW  00
020A:  ADDWFC 03,W
020C:  MOVWF  FEA
020E:  MOVFF  12D,FEC
0212:  MOVF   FED,F
0214:  MOVFF  12C,FEF
0218:  MOVLB  0
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD:
.................... 			channel[c].command_off_hold_seconds=value;
021A:  MOVLB  1
021C:  MOVF   x2E,W
021E:  MULLW  19
0220:  MOVF   FF3,W
0222:  CLRF   x30
0224:  MOVWF  x2F
0226:  MOVLW  07
0228:  ADDWF  x2F,W
022A:  MOVWF  01
022C:  MOVLW  00
022E:  ADDWFC x30,W
0230:  MOVWF  03
0232:  MOVF   01,W
0234:  ADDLW  D6
0236:  MOVWF  FE9
0238:  MOVLW  00
023A:  ADDWFC 03,W
023C:  MOVWF  FEA
023E:  MOVFF  12D,FEC
0242:  MOVF   FED,F
0244:  MOVFF  12C,FEF
0248:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_ADC:
.................... 			config.ch[c].lvd_disconnect_adc=value;
024A:  MOVLB  1
024C:  MOVF   x2E,W
024E:  MULLW  24
0250:  MOVF   FF3,W
0252:  CLRF   x30
0254:  MOVWF  x2F
0256:  MOVLW  04
0258:  ADDWF  x2F,W
025A:  MOVWF  01
025C:  MOVLW  00
025E:  ADDWFC x30,W
0260:  MOVWF  03
0262:  MOVF   01,W
0264:  ADDLW  1B
0266:  MOVWF  FE9
0268:  MOVLW  00
026A:  ADDWFC 03,W
026C:  MOVWF  FEA
026E:  MOVFF  12D,FEC
0272:  MOVF   FED,F
0274:  MOVFF  12C,FEF
0278:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_DELAY:
.................... 			config.ch[c].lvd_disconnect_delay=value;
027A:  MOVLB  1
027C:  MOVF   x2E,W
027E:  MULLW  24
0280:  MOVF   FF3,W
0282:  CLRF   x30
0284:  MOVWF  x2F
0286:  MOVLW  06
0288:  ADDWF  x2F,W
028A:  MOVWF  01
028C:  MOVLW  00
028E:  ADDWFC x30,W
0290:  MOVWF  03
0292:  MOVF   01,W
0294:  ADDLW  1B
0296:  MOVWF  FE9
0298:  MOVLW  00
029A:  ADDWFC 03,W
029C:  MOVWF  FEA
029E:  MOVFF  12D,FEC
02A2:  MOVF   FED,F
02A4:  MOVFF  12C,FEF
02A8:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_RECONNECT_ADC:
.................... 			config.ch[c].lvd_reconnect_adc=value;
02AA:  MOVLB  1
02AC:  MOVF   x2E,W
02AE:  MULLW  24
02B0:  MOVF   FF3,W
02B2:  CLRF   x30
02B4:  MOVWF  x2F
02B6:  MOVLW  08
02B8:  ADDWF  x2F,W
02BA:  MOVWF  01
02BC:  MOVLW  00
02BE:  ADDWFC x30,W
02C0:  MOVWF  03
02C2:  MOVF   01,W
02C4:  ADDLW  1B
02C6:  MOVWF  FE9
02C8:  MOVLW  00
02CA:  ADDWFC 03,W
02CC:  MOVWF  FEA
02CE:  MOVFF  12D,FEC
02D2:  MOVF   FED,F
02D4:  MOVFF  12C,FEF
02D8:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_RECONNECT_DELAY:
.................... 			config.ch[c].lvd_reconnect_delay=value;
02DA:  MOVLB  1
02DC:  MOVF   x2E,W
02DE:  MULLW  24
02E0:  MOVF   FF3,W
02E2:  CLRF   x30
02E4:  MOVWF  x2F
02E6:  MOVLW  0A
02E8:  ADDWF  x2F,W
02EA:  MOVWF  01
02EC:  MOVLW  00
02EE:  ADDWFC x30,W
02F0:  MOVWF  03
02F2:  MOVF   01,W
02F4:  ADDLW  1B
02F6:  MOVWF  FE9
02F8:  MOVLW  00
02FA:  ADDWFC 03,W
02FC:  MOVWF  FEA
02FE:  MOVFF  12D,FEC
0302:  MOVF   FED,F
0304:  MOVFF  12C,FEF
0308:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_ADC:
.................... 			config.ch[c].hvd_disconnect_adc=value;
030A:  MOVLB  1
030C:  MOVF   x2E,W
030E:  MULLW  24
0310:  MOVF   FF3,W
0312:  CLRF   x30
0314:  MOVWF  x2F
0316:  MOVLW  0C
0318:  ADDWF  x2F,W
031A:  MOVWF  01
031C:  MOVLW  00
031E:  ADDWFC x30,W
0320:  MOVWF  03
0322:  MOVF   01,W
0324:  ADDLW  1B
0326:  MOVWF  FE9
0328:  MOVLW  00
032A:  ADDWFC 03,W
032C:  MOVWF  FEA
032E:  MOVFF  12D,FEC
0332:  MOVF   FED,F
0334:  MOVFF  12C,FEF
0338:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_DELAY:
.................... 			config.ch[c].hvd_disconnect_delay=value;
033A:  MOVLB  1
033C:  MOVF   x2E,W
033E:  MULLW  24
0340:  MOVF   FF3,W
0342:  CLRF   x30
0344:  MOVWF  x2F
0346:  MOVLW  0E
0348:  ADDWF  x2F,W
034A:  MOVWF  01
034C:  MOVLW  00
034E:  ADDWFC x30,W
0350:  MOVWF  03
0352:  MOVF   01,W
0354:  ADDLW  1B
0356:  MOVWF  FE9
0358:  MOVLW  00
035A:  ADDWFC 03,W
035C:  MOVWF  FEA
035E:  MOVFF  12D,FEC
0362:  MOVF   FED,F
0364:  MOVFF  12C,FEF
0368:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_RECONNECT_ADC:
.................... 			config.ch[c].hvd_reconnect_adc=value;
036A:  MOVLB  1
036C:  MOVF   x2E,W
036E:  MULLW  24
0370:  MOVF   FF3,W
0372:  CLRF   x30
0374:  MOVWF  x2F
0376:  MOVLW  10
0378:  ADDWF  x2F,W
037A:  MOVWF  01
037C:  MOVLW  00
037E:  ADDWFC x30,W
0380:  MOVWF  03
0382:  MOVF   01,W
0384:  ADDLW  1B
0386:  MOVWF  FE9
0388:  MOVLW  00
038A:  ADDWFC 03,W
038C:  MOVWF  FEA
038E:  MOVFF  12D,FEC
0392:  MOVF   FED,F
0394:  MOVFF  12C,FEF
0398:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_RECONNECT_DELAY:
.................... 			config.ch[c].hvd_reconnect_delay=value;
039A:  MOVLB  1
039C:  MOVF   x2E,W
039E:  MULLW  24
03A0:  MOVF   FF3,W
03A2:  CLRF   x30
03A4:  MOVWF  x2F
03A6:  MOVLW  12
03A8:  ADDWF  x2F,W
03AA:  MOVWF  01
03AC:  MOVLW  00
03AE:  ADDWFC x30,W
03B0:  MOVWF  03
03B2:  MOVF   01,W
03B4:  ADDLW  1B
03B6:  MOVWF  FE9
03B8:  MOVLW  00
03BA:  ADDWFC 03,W
03BC:  MOVWF  FEA
03BE:  MOVFF  12D,FEC
03C2:  MOVF   FED,F
03C4:  MOVFF  12C,FEF
03C8:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_ADC:
.................... 			config.ch[c].ltd_disconnect_adc=value;
03CA:  MOVLB  1
03CC:  MOVF   x2E,W
03CE:  MULLW  24
03D0:  MOVF   FF3,W
03D2:  CLRF   x30
03D4:  MOVWF  x2F
03D6:  MOVLW  14
03D8:  ADDWF  x2F,W
03DA:  MOVWF  01
03DC:  MOVLW  00
03DE:  ADDWFC x30,W
03E0:  MOVWF  03
03E2:  MOVF   01,W
03E4:  ADDLW  1B
03E6:  MOVWF  FE9
03E8:  MOVLW  00
03EA:  ADDWFC 03,W
03EC:  MOVWF  FEA
03EE:  MOVFF  12D,FEC
03F2:  MOVF   FED,F
03F4:  MOVFF  12C,FEF
03F8:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_DELAY:
.................... 			config.ch[c].ltd_disconnect_delay=value;
03FA:  MOVLB  1
03FC:  MOVF   x2E,W
03FE:  MULLW  24
0400:  MOVF   FF3,W
0402:  CLRF   x30
0404:  MOVWF  x2F
0406:  MOVLW  16
0408:  ADDWF  x2F,W
040A:  MOVWF  01
040C:  MOVLW  00
040E:  ADDWFC x30,W
0410:  MOVWF  03
0412:  MOVF   01,W
0414:  ADDLW  1B
0416:  MOVWF  FE9
0418:  MOVLW  00
041A:  ADDWFC 03,W
041C:  MOVWF  FEA
041E:  MOVFF  12D,FEC
0422:  MOVF   FED,F
0424:  MOVFF  12C,FEF
0428:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_RECONNECT_ADC:
.................... 			config.ch[c].ltd_reconnect_adc=value;
042A:  MOVLB  1
042C:  MOVF   x2E,W
042E:  MULLW  24
0430:  MOVF   FF3,W
0432:  CLRF   x30
0434:  MOVWF  x2F
0436:  MOVLW  18
0438:  ADDWF  x2F,W
043A:  MOVWF  01
043C:  MOVLW  00
043E:  ADDWFC x30,W
0440:  MOVWF  03
0442:  MOVF   01,W
0444:  ADDLW  1B
0446:  MOVWF  FE9
0448:  MOVLW  00
044A:  ADDWFC 03,W
044C:  MOVWF  FEA
044E:  MOVFF  12D,FEC
0452:  MOVF   FED,F
0454:  MOVFF  12C,FEF
0458:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_RECONNECT_DELAY:
.................... 			config.ch[c].ltd_reconnect_delay=value;
045A:  MOVLB  1
045C:  MOVF   x2E,W
045E:  MULLW  24
0460:  MOVF   FF3,W
0462:  CLRF   x30
0464:  MOVWF  x2F
0466:  MOVLW  1A
0468:  ADDWF  x2F,W
046A:  MOVWF  01
046C:  MOVLW  00
046E:  ADDWFC x30,W
0470:  MOVWF  03
0472:  MOVF   01,W
0474:  ADDLW  1B
0476:  MOVWF  FE9
0478:  MOVLW  00
047A:  ADDWFC 03,W
047C:  MOVWF  FEA
047E:  MOVFF  12D,FEC
0482:  MOVF   FED,F
0484:  MOVFF  12C,FEF
0488:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_ADC:
.................... 			config.ch[c].htd_disconnect_adc=value;
048A:  MOVLB  1
048C:  MOVF   x2E,W
048E:  MULLW  24
0490:  MOVF   FF3,W
0492:  CLRF   x30
0494:  MOVWF  x2F
0496:  MOVLW  1C
0498:  ADDWF  x2F,W
049A:  MOVWF  01
049C:  MOVLW  00
049E:  ADDWFC x30,W
04A0:  MOVWF  03
04A2:  MOVF   01,W
04A4:  ADDLW  1B
04A6:  MOVWF  FE9
04A8:  MOVLW  00
04AA:  ADDWFC 03,W
04AC:  MOVWF  FEA
04AE:  MOVFF  12D,FEC
04B2:  MOVF   FED,F
04B4:  MOVFF  12C,FEF
04B8:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_DELAY:
.................... 			config.ch[c].htd_disconnect_delay=value;
04BA:  MOVLB  1
04BC:  MOVF   x2E,W
04BE:  MULLW  24
04C0:  MOVF   FF3,W
04C2:  CLRF   x30
04C4:  MOVWF  x2F
04C6:  MOVLW  1E
04C8:  ADDWF  x2F,W
04CA:  MOVWF  01
04CC:  MOVLW  00
04CE:  ADDWFC x30,W
04D0:  MOVWF  03
04D2:  MOVF   01,W
04D4:  ADDLW  1B
04D6:  MOVWF  FE9
04D8:  MOVLW  00
04DA:  ADDWFC 03,W
04DC:  MOVWF  FEA
04DE:  MOVFF  12D,FEC
04E2:  MOVF   FED,F
04E4:  MOVFF  12C,FEF
04E8:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_RECONNECT_ADC:
.................... 			config.ch[c].htd_reconnect_adc=value;
04EA:  MOVLB  1
04EC:  MOVF   x2E,W
04EE:  MULLW  24
04F0:  MOVF   FF3,W
04F2:  CLRF   x30
04F4:  MOVWF  x2F
04F6:  MOVLW  20
04F8:  ADDWF  x2F,W
04FA:  MOVWF  01
04FC:  MOVLW  00
04FE:  ADDWFC x30,W
0500:  MOVWF  03
0502:  MOVF   01,W
0504:  ADDLW  1B
0506:  MOVWF  FE9
0508:  MOVLW  00
050A:  ADDWFC 03,W
050C:  MOVWF  FEA
050E:  MOVFF  12D,FEC
0512:  MOVF   FED,F
0514:  MOVFF  12C,FEF
0518:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_RECONNECT_DELAY:
.................... 			config.ch[c].htd_reconnect_delay=value;
051A:  MOVLB  1
051C:  MOVF   x2E,W
051E:  MULLW  24
0520:  MOVF   FF3,W
0522:  CLRF   x30
0524:  MOVWF  x2F
0526:  MOVLW  22
0528:  ADDWF  x2F,W
052A:  MOVWF  01
052C:  MOVLW  00
052E:  ADDWFC x30,W
0530:  MOVWF  03
0532:  MOVF   01,W
0534:  ADDLW  1B
0536:  MOVWF  FE9
0538:  MOVLW  00
053A:  ADDWFC 03,W
053C:  MOVWF  FEA
053E:  MOVFF  12D,FEC
0542:  MOVF   FED,F
0544:  MOVFF  12C,FEF
0548:  MOVLB  0
.................... 
.................... 		/* don't need to implement FUT ... there is nowhere for it to go anyhow */
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			if ( 1 == value ) {
054A:  MOVLB  1
054C:  DECFSZ x2C,W
054E:  BRA    055C
0550:  MOVF   x2D,F
0552:  BNZ   055C
.................... 				timers.now_write_config=1;
0554:  MOVLB  0
0556:  BSF    xCF.3
.................... 			} else if ( 2 == value ) {
0558:  BRA    0590
055A:  MOVLB  1
055C:  MOVF   x2C,W
055E:  SUBLW  02
0560:  BNZ   056E
0562:  MOVF   x2D,F
0564:  BNZ   056E
.................... 				timers.now_reset_config=1;
0566:  MOVLB  0
0568:  BSF    xCF.4
.................... 			} else if ( 1802 == value ) {
056A:  BRA    0590
056C:  MOVLB  1
056E:  MOVF   x2C,W
0570:  SUBLW  0A
0572:  BNZ   0584
0574:  MOVF   x2D,W
0576:  SUBLW  07
0578:  BNZ   0584
.................... 				current.factory_unlocked =1;
057A:  MOVLW  01
057C:  MOVLB  0
057E:  MOVWF  xCA
.................... 			} else if ( 65535 == value ) {
0580:  BRA    0590
0582:  MOVLB  1
0584:  INCFSZ x2C,W
0586:  BRA    058E
0588:  INCFSZ x2D,W
058A:  BRA    058E
.................... 				reset_cpu();
058C:  RESET
058E:  MOVLB  0
.................... 			}
.................... 			break;
.................... 		default:
.................... 			/* do nothing */
.................... 	}
0590:  GOTO   0F1C (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... int16 map_i2c(int8 addr) {
.................... 	int8 c;
.................... 
.................... 	/* c is the channel we are accessing based on register range */
.................... 	if ( addr >= I2C_REG_CH1_COMMAND_ON && addr <= I2C_REG_CH1_FUT_RECONNECT ) {
*
0614:  MOVLB  1
0616:  MOVF   x29,W
0618:  SUBLW  10
061A:  BC    062C
061C:  MOVF   x29,W
061E:  SUBLW  1E
0620:  BNC   062C
.................... 		/* channel 1 status region */
.................... 		c=1;
0622:  MOVLW  01
0624:  MOVWF  x2A
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON - I2C_REG_CH0_COMMAND_ON);
0626:  MOVLW  0E
0628:  SUBWF  x29,F
.................... 	} else if ( addr >= I2C_REG_CH1_COMMAND_ON_HOLD && addr <= I2C_REG_CH1_FUT_RECONNECT_DELAY ) {
062A:  BRA    0644
062C:  MOVF   x29,W
062E:  SUBLW  11
0630:  BC    0642
0632:  MOVF   x29,W
0634:  SUBLW  6B
0636:  BNC   0642
.................... 		/* channel 1 configuration region */
.................... 		c=1;
0638:  MOVLW  01
063A:  MOVWF  x2A
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON_HOLD - I2C_REG_CH0_COMMAND_ON_HOLD );
063C:  MOVLW  0E
063E:  SUBWF  x29,F
.................... 	} else {
0640:  BRA    0644
.................... 		c=0;
0642:  CLRF   x2A
.................... 	}
.................... 
.................... 	timers.led_on_a=100;
0644:  MOVLW  64
0646:  MOVLB  0
0648:  MOVWF  xD0
.................... 
.................... 	switch ( addr ) {
064A:  MOVLB  1
064C:  MOVF   x29,W
064E:  XORLW  00
0650:  MOVLB  0
0652:  BTFSC  FD8.2
0654:  BRA    0784
0656:  XORLW  01
0658:  BTFSC  FD8.2
065A:  BRA    0790
065C:  XORLW  03
065E:  BTFSC  FD8.2
0660:  BRA    079E
0662:  XORLW  01
0664:  BTFSC  FD8.2
0666:  BRA    07AC
0668:  XORLW  07
066A:  BTFSC  FD8.2
066C:  BRA    07E2
066E:  XORLW  01
0670:  BTFSC  FD8.2
0672:  BRA    0818
0674:  XORLW  03
0676:  BTFSC  FD8.2
0678:  BRA    084E
067A:  XORLW  01
067C:  BTFSC  FD8.2
067E:  BRA    0884
0680:  XORLW  0F
0682:  BTFSC  FD8.2
0684:  BRA    08BA
0686:  XORLW  01
0688:  BTFSC  FD8.2
068A:  BRA    08F0
068C:  XORLW  03
068E:  BTFSC  FD8.2
0690:  BRA    0926
0692:  XORLW  01
0694:  BTFSC  FD8.2
0696:  BRA    095C
0698:  XORLW  07
069A:  BTFSC  FD8.2
069C:  BRA    0992
069E:  XORLW  01
06A0:  BTFSC  FD8.2
06A2:  BRA    09C8
06A4:  XORLW  03
06A6:  BTFSC  FD8.2
06A8:  BRA    09FE
06AA:  XORLW  01
06AC:  BTFSC  FD8.2
06AE:  BRA    0A34
06B0:  XORLW  1F
06B2:  BTFSC  FD8.2
06B4:  BRA    0A34
06B6:  XORLW  0F
06B8:  BTFSC  FD8.2
06BA:  BRA    0A3C
06BC:  XORLW  3F
06BE:  BTFSC  FD8.2
06C0:  BRA    0A46
06C2:  XORLW  01
06C4:  BTFSC  FD8.2
06C6:  BRA    0A50
06C8:  XORLW  03
06CA:  BTFSC  FD8.2
06CC:  BRA    0A5A
06CE:  XORLW  62
06D0:  BTFSC  FD8.2
06D2:  BRA    0A62
06D4:  XORLW  01
06D6:  BTFSC  FD8.2
06D8:  BRA    0A8C
06DA:  XORLW  03
06DC:  BTFSC  FD8.2
06DE:  BRA    0AC2
06E0:  XORLW  01
06E2:  BTFSC  FD8.2
06E4:  BRA    0AF8
06E6:  XORLW  07
06E8:  BTFSC  FD8.2
06EA:  BRA    0B2E
06EC:  XORLW  01
06EE:  BTFSC  FD8.2
06F0:  BRA    0B64
06F2:  XORLW  03
06F4:  BTFSC  FD8.2
06F6:  BRA    0B9A
06F8:  XORLW  01
06FA:  BTFSC  FD8.2
06FC:  BRA    0BD0
06FE:  XORLW  0F
0700:  BTFSC  FD8.2
0702:  BRA    0C06
0704:  XORLW  01
0706:  BTFSC  FD8.2
0708:  BRA    0C3C
070A:  XORLW  03
070C:  BTFSC  FD8.2
070E:  BRA    0C72
0710:  XORLW  01
0712:  BTFSC  FD8.2
0714:  BRA    0CA8
0716:  XORLW  07
0718:  BTFSC  FD8.2
071A:  BRA    0CDE
071C:  XORLW  01
071E:  BTFSC  FD8.2
0720:  BRA    0D14
0722:  XORLW  03
0724:  BTFSC  FD8.2
0726:  BRA    0D4A
0728:  XORLW  01
072A:  BTFSC  FD8.2
072C:  BRA    0D80
072E:  XORLW  1F
0730:  BTFSC  FD8.2
0732:  BRA    0DB6
0734:  XORLW  01
0736:  BTFSC  FD8.2
0738:  BRA    0DEC
073A:  XORLW  03
073C:  BTFSC  FD8.2
073E:  BRA    0E22
0740:  XORLW  01
0742:  BTFSC  FD8.2
0744:  BRA    0E22
0746:  XORLW  07
0748:  BTFSC  FD8.2
074A:  BRA    0E22
074C:  XORLW  01
074E:  BTFSC  FD8.2
0750:  BRA    0E22
0752:  XORLW  D5
0754:  BTFSC  FD8.2
0756:  BRA    0E2A
0758:  XORLW  01
075A:  BTFSC  FD8.2
075C:  BRA    0E34
075E:  XORLW  03
0760:  BTFSC  FD8.2
0762:  BRA    0E3E
0764:  XORLW  01
0766:  BTFSC  FD8.2
0768:  BRA    0E48
076A:  XORLW  07
076C:  BTFSC  FD8.2
076E:  BRA    0E52
0770:  XORLW  01
0772:  BTFSC  FD8.2
0774:  BRA    0E5A
0776:  XORLW  03
0778:  BTFSC  FD8.2
077A:  BRA    0E62
077C:  XORLW  01
077E:  BTFSC  FD8.2
0780:  BRA    0E6A
0782:  BRA    0E72
.................... 		/* not channel based */
.................... 		case I2C_REG_VOLTAGE_INPUT_AVG: 
.................... 			return (int16) adc_get(0);
0784:  MOVLB  1
0786:  CLRF   x2B
0788:  MOVLB  0
078A:  RCALL  0594
078C:  MOVF   02,W
078E:  BRA    0E78
.................... 		case I2C_REG_STATE_CONTACTORS:
.................... 			return (int16) make16(channel[0].state,channel[1].state);
0790:  MOVFF  D6,03
0794:  MOVFF  EF,01
0798:  MOVFF  D6,02
079C:  BRA    0E78
.................... 		case I2C_REG_TEMPERATURE_BOARD_AVG: 
.................... 			return (int16) adc_get(1);
079E:  MOVLW  01
07A0:  MOVLB  1
07A2:  MOVWF  x2B
07A4:  MOVLB  0
07A6:  RCALL  0594
07A8:  MOVF   02,W
07AA:  BRA    0E78
.................... 
.................... 		/* status based on channel value c */
.................... 		case I2C_REG_CH0_COMMAND_ON :
.................... 			return (int16) channel[c].command_on_seconds;
07AC:  MOVLB  1
07AE:  MOVF   x2A,W
07B0:  MULLW  19
07B2:  MOVF   FF3,W
07B4:  CLRF   x2C
07B6:  MOVWF  x2B
07B8:  MOVLW  01
07BA:  ADDWF  x2B,W
07BC:  MOVWF  01
07BE:  MOVLW  00
07C0:  ADDWFC x2C,W
07C2:  MOVWF  03
07C4:  MOVF   01,W
07C6:  ADDLW  D6
07C8:  MOVWF  FE9
07CA:  MOVLW  00
07CC:  ADDWFC 03,W
07CE:  MOVWF  FEA
07D0:  MOVFF  FEC,03
07D4:  MOVF   FED,F
07D6:  MOVFF  FEF,01
07DA:  MOVFF  03,02
07DE:  MOVLB  0
07E0:  BRA    0E78
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD:
.................... 			return (int16) channel[c].command_on_hold_seconds;
07E2:  MOVLB  1
07E4:  MOVF   x2A,W
07E6:  MULLW  19
07E8:  MOVF   FF3,W
07EA:  CLRF   x2C
07EC:  MOVWF  x2B
07EE:  MOVLW  03
07F0:  ADDWF  x2B,W
07F2:  MOVWF  01
07F4:  MOVLW  00
07F6:  ADDWFC x2C,W
07F8:  MOVWF  03
07FA:  MOVF   01,W
07FC:  ADDLW  D6
07FE:  MOVWF  FE9
0800:  MOVLW  00
0802:  ADDWFC 03,W
0804:  MOVWF  FEA
0806:  MOVFF  FEC,03
080A:  MOVF   FED,F
080C:  MOVFF  FEF,01
0810:  MOVFF  03,02
0814:  MOVLB  0
0816:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_COMMAND_OFF:
.................... 			return (int16) channel[c].command_off_seconds;
0818:  MOVLB  1
081A:  MOVF   x2A,W
081C:  MULLW  19
081E:  MOVF   FF3,W
0820:  CLRF   x2C
0822:  MOVWF  x2B
0824:  MOVLW  05
0826:  ADDWF  x2B,W
0828:  MOVWF  01
082A:  MOVLW  00
082C:  ADDWFC x2C,W
082E:  MOVWF  03
0830:  MOVF   01,W
0832:  ADDLW  D6
0834:  MOVWF  FE9
0836:  MOVLW  00
0838:  ADDWFC 03,W
083A:  MOVWF  FEA
083C:  MOVFF  FEC,03
0840:  MOVF   FED,F
0842:  MOVFF  FEF,01
0846:  MOVFF  03,02
084A:  MOVLB  0
084C:  BRA    0E78
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD:
.................... 			return (int16) channel[c].command_off_hold_seconds;
084E:  MOVLB  1
0850:  MOVF   x2A,W
0852:  MULLW  19
0854:  MOVF   FF3,W
0856:  CLRF   x2C
0858:  MOVWF  x2B
085A:  MOVLW  07
085C:  ADDWF  x2B,W
085E:  MOVWF  01
0860:  MOVLW  00
0862:  ADDWFC x2C,W
0864:  MOVWF  03
0866:  MOVF   01,W
0868:  ADDLW  D6
086A:  MOVWF  FE9
086C:  MOVLW  00
086E:  ADDWFC 03,W
0870:  MOVWF  FEA
0872:  MOVFF  FEC,03
0876:  MOVF   FED,F
0878:  MOVFF  FEF,01
087C:  MOVFF  03,02
0880:  MOVLB  0
0882:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT:
.................... 			return (int16) channel[c].lvd_disconnect_delay_seconds;
0884:  MOVLB  1
0886:  MOVF   x2A,W
0888:  MULLW  19
088A:  MOVF   FF3,W
088C:  CLRF   x2C
088E:  MOVWF  x2B
0890:  MOVLW  09
0892:  ADDWF  x2B,W
0894:  MOVWF  01
0896:  MOVLW  00
0898:  ADDWFC x2C,W
089A:  MOVWF  03
089C:  MOVF   01,W
089E:  ADDLW  D6
08A0:  MOVWF  FE9
08A2:  MOVLW  00
08A4:  ADDWFC 03,W
08A6:  MOVWF  FEA
08A8:  MOVFF  FEC,03
08AC:  MOVF   FED,F
08AE:  MOVFF  FEF,01
08B2:  MOVFF  03,02
08B6:  MOVLB  0
08B8:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT:
.................... 			return (int16) channel[c].lvd_reconnect_delay_seconds;
08BA:  MOVLB  1
08BC:  MOVF   x2A,W
08BE:  MULLW  19
08C0:  MOVF   FF3,W
08C2:  CLRF   x2C
08C4:  MOVWF  x2B
08C6:  MOVLW  0B
08C8:  ADDWF  x2B,W
08CA:  MOVWF  01
08CC:  MOVLW  00
08CE:  ADDWFC x2C,W
08D0:  MOVWF  03
08D2:  MOVF   01,W
08D4:  ADDLW  D6
08D6:  MOVWF  FE9
08D8:  MOVLW  00
08DA:  ADDWFC 03,W
08DC:  MOVWF  FEA
08DE:  MOVFF  FEC,03
08E2:  MOVF   FED,F
08E4:  MOVFF  FEF,01
08E8:  MOVFF  03,02
08EC:  MOVLB  0
08EE:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT:
.................... 			return (int16) channel[c].hvd_disconnect_delay_seconds;
08F0:  MOVLB  1
08F2:  MOVF   x2A,W
08F4:  MULLW  19
08F6:  MOVF   FF3,W
08F8:  CLRF   x2C
08FA:  MOVWF  x2B
08FC:  MOVLW  0D
08FE:  ADDWF  x2B,W
0900:  MOVWF  01
0902:  MOVLW  00
0904:  ADDWFC x2C,W
0906:  MOVWF  03
0908:  MOVF   01,W
090A:  ADDLW  D6
090C:  MOVWF  FE9
090E:  MOVLW  00
0910:  ADDWFC 03,W
0912:  MOVWF  FEA
0914:  MOVFF  FEC,03
0918:  MOVF   FED,F
091A:  MOVFF  FEF,01
091E:  MOVFF  03,02
0922:  MOVLB  0
0924:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT:
.................... 			return (int16) channel[c].hvd_reconnect_delay_seconds;
0926:  MOVLB  1
0928:  MOVF   x2A,W
092A:  MULLW  19
092C:  MOVF   FF3,W
092E:  CLRF   x2C
0930:  MOVWF  x2B
0932:  MOVLW  0F
0934:  ADDWF  x2B,W
0936:  MOVWF  01
0938:  MOVLW  00
093A:  ADDWFC x2C,W
093C:  MOVWF  03
093E:  MOVF   01,W
0940:  ADDLW  D6
0942:  MOVWF  FE9
0944:  MOVLW  00
0946:  ADDWFC 03,W
0948:  MOVWF  FEA
094A:  MOVFF  FEC,03
094E:  MOVF   FED,F
0950:  MOVFF  FEF,01
0954:  MOVFF  03,02
0958:  MOVLB  0
095A:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT:
.................... 			return (int16) channel[c].ltd_disconnect_delay_seconds;
095C:  MOVLB  1
095E:  MOVF   x2A,W
0960:  MULLW  19
0962:  MOVF   FF3,W
0964:  CLRF   x2C
0966:  MOVWF  x2B
0968:  MOVLW  11
096A:  ADDWF  x2B,W
096C:  MOVWF  01
096E:  MOVLW  00
0970:  ADDWFC x2C,W
0972:  MOVWF  03
0974:  MOVF   01,W
0976:  ADDLW  D6
0978:  MOVWF  FE9
097A:  MOVLW  00
097C:  ADDWFC 03,W
097E:  MOVWF  FEA
0980:  MOVFF  FEC,03
0984:  MOVF   FED,F
0986:  MOVFF  FEF,01
098A:  MOVFF  03,02
098E:  MOVLB  0
0990:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT:
.................... 			return (int16) channel[c].ltd_reconnect_delay_seconds;
0992:  MOVLB  1
0994:  MOVF   x2A,W
0996:  MULLW  19
0998:  MOVF   FF3,W
099A:  CLRF   x2C
099C:  MOVWF  x2B
099E:  MOVLW  13
09A0:  ADDWF  x2B,W
09A2:  MOVWF  01
09A4:  MOVLW  00
09A6:  ADDWFC x2C,W
09A8:  MOVWF  03
09AA:  MOVF   01,W
09AC:  ADDLW  D6
09AE:  MOVWF  FE9
09B0:  MOVLW  00
09B2:  ADDWFC 03,W
09B4:  MOVWF  FEA
09B6:  MOVFF  FEC,03
09BA:  MOVF   FED,F
09BC:  MOVFF  FEF,01
09C0:  MOVFF  03,02
09C4:  MOVLB  0
09C6:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT:
.................... 			return (int16) channel[c].htd_disconnect_delay_seconds;
09C8:  MOVLB  1
09CA:  MOVF   x2A,W
09CC:  MULLW  19
09CE:  MOVF   FF3,W
09D0:  CLRF   x2C
09D2:  MOVWF  x2B
09D4:  MOVLW  15
09D6:  ADDWF  x2B,W
09D8:  MOVWF  01
09DA:  MOVLW  00
09DC:  ADDWFC x2C,W
09DE:  MOVWF  03
09E0:  MOVF   01,W
09E2:  ADDLW  D6
09E4:  MOVWF  FE9
09E6:  MOVLW  00
09E8:  ADDWFC 03,W
09EA:  MOVWF  FEA
09EC:  MOVFF  FEC,03
09F0:  MOVF   FED,F
09F2:  MOVFF  FEF,01
09F6:  MOVFF  03,02
09FA:  MOVLB  0
09FC:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT:
.................... 			return (int16) channel[c].htd_reconnect_delay_seconds;
09FE:  MOVLB  1
0A00:  MOVF   x2A,W
0A02:  MULLW  19
0A04:  MOVF   FF3,W
0A06:  CLRF   x2C
0A08:  MOVWF  x2B
0A0A:  MOVLW  17
0A0C:  ADDWF  x2B,W
0A0E:  MOVWF  01
0A10:  MOVLW  00
0A12:  ADDWFC x2C,W
0A14:  MOVWF  03
0A16:  MOVF   01,W
0A18:  ADDLW  D6
0A1A:  MOVWF  FE9
0A1C:  MOVLW  00
0A1E:  ADDWFC 03,W
0A20:  MOVWF  FEA
0A22:  MOVFF  FEC,03
0A26:  MOVF   FED,F
0A28:  MOVFF  FEF,01
0A2C:  MOVFF  03,02
0A30:  MOVLB  0
0A32:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_FUT_DISCONNECT:
.................... 		case I2C_REG_CH0_FUT_RECONNECT:
.................... 			return (int16) 0xffff; /* not yet implemented */
0A34:  MOVLW  FF
0A36:  MOVWF  01
0A38:  MOVWF  02
0A3A:  BRA    0E78
.................... 
.................... 
.................... 		/* non-channel based meta */
.................... 		case I2C_REG_SEQUENCE_NUMBER:
.................... 			return (int16) current.sequence_number;
0A3C:  MOVFF  C4,01
0A40:  MOVFF  C5,02
0A44:  BRA    0E78
.................... 		case I2C_REG_TIME_INTERVAL_MILLISECONDS:
.................... 			return (int16) current.interval_milliseconds;
0A46:  MOVFF  C8,01
0A4A:  MOVFF  C9,02
0A4E:  BRA    0E78
.................... 		case I2C_REG_TIME_UPTIME_MINUTES:
.................... 			return (int16) current.uptime_minutes;
0A50:  MOVFF  C6,01
0A54:  MOVFF  C7,02
0A58:  BRA    0E78
.................... 		case I2C_REG_DEFAULT_PARAMS_WRITTEN:
.................... 			return (int16) current.default_params_written;
0A5A:  MOVFF  CE,01
0A5E:  CLRF   02
0A60:  BRA    0E78
.................... 
.................... 		/* channel based configuration */
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD_INITIAL:
.................... 			return (int16) config.ch[c].command_on_hold_time;
0A62:  MOVLB  1
0A64:  MOVF   x2A,W
0A66:  MULLW  24
0A68:  MOVF   FF3,W
0A6A:  CLRF   x2C
0A6C:  MOVWF  x2B
0A6E:  MOVLW  1B
0A70:  ADDWF  x2B,W
0A72:  MOVWF  FE9
0A74:  MOVLW  00
0A76:  ADDWFC x2C,W
0A78:  MOVWF  FEA
0A7A:  MOVFF  FEC,03
0A7E:  MOVF   FED,F
0A80:  MOVFF  FEF,01
0A84:  MOVFF  03,02
0A88:  MOVLB  0
0A8A:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD_INITIAL:
.................... 			return (int16) config.ch[c].command_off_hold_time;
0A8C:  MOVLB  1
0A8E:  MOVF   x2A,W
0A90:  MULLW  24
0A92:  MOVF   FF3,W
0A94:  CLRF   x2C
0A96:  MOVWF  x2B
0A98:  MOVLW  02
0A9A:  ADDWF  x2B,W
0A9C:  MOVWF  01
0A9E:  MOVLW  00
0AA0:  ADDWFC x2C,W
0AA2:  MOVWF  03
0AA4:  MOVF   01,W
0AA6:  ADDLW  1B
0AA8:  MOVWF  FE9
0AAA:  MOVLW  00
0AAC:  ADDWFC 03,W
0AAE:  MOVWF  FEA
0AB0:  MOVFF  FEC,03
0AB4:  MOVF   FED,F
0AB6:  MOVFF  FEF,01
0ABA:  MOVFF  03,02
0ABE:  MOVLB  0
0AC0:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].lvd_disconnect_adc;
0AC2:  MOVLB  1
0AC4:  MOVF   x2A,W
0AC6:  MULLW  24
0AC8:  MOVF   FF3,W
0ACA:  CLRF   x2C
0ACC:  MOVWF  x2B
0ACE:  MOVLW  04
0AD0:  ADDWF  x2B,W
0AD2:  MOVWF  01
0AD4:  MOVLW  00
0AD6:  ADDWFC x2C,W
0AD8:  MOVWF  03
0ADA:  MOVF   01,W
0ADC:  ADDLW  1B
0ADE:  MOVWF  FE9
0AE0:  MOVLW  00
0AE2:  ADDWFC 03,W
0AE4:  MOVWF  FEA
0AE6:  MOVFF  FEC,03
0AEA:  MOVF   FED,F
0AEC:  MOVFF  FEF,01
0AF0:  MOVFF  03,02
0AF4:  MOVLB  0
0AF6:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].lvd_disconnect_delay;
0AF8:  MOVLB  1
0AFA:  MOVF   x2A,W
0AFC:  MULLW  24
0AFE:  MOVF   FF3,W
0B00:  CLRF   x2C
0B02:  MOVWF  x2B
0B04:  MOVLW  06
0B06:  ADDWF  x2B,W
0B08:  MOVWF  01
0B0A:  MOVLW  00
0B0C:  ADDWFC x2C,W
0B0E:  MOVWF  03
0B10:  MOVF   01,W
0B12:  ADDLW  1B
0B14:  MOVWF  FE9
0B16:  MOVLW  00
0B18:  ADDWFC 03,W
0B1A:  MOVWF  FEA
0B1C:  MOVFF  FEC,03
0B20:  MOVF   FED,F
0B22:  MOVFF  FEF,01
0B26:  MOVFF  03,02
0B2A:  MOVLB  0
0B2C:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].lvd_reconnect_adc;
0B2E:  MOVLB  1
0B30:  MOVF   x2A,W
0B32:  MULLW  24
0B34:  MOVF   FF3,W
0B36:  CLRF   x2C
0B38:  MOVWF  x2B
0B3A:  MOVLW  08
0B3C:  ADDWF  x2B,W
0B3E:  MOVWF  01
0B40:  MOVLW  00
0B42:  ADDWFC x2C,W
0B44:  MOVWF  03
0B46:  MOVF   01,W
0B48:  ADDLW  1B
0B4A:  MOVWF  FE9
0B4C:  MOVLW  00
0B4E:  ADDWFC 03,W
0B50:  MOVWF  FEA
0B52:  MOVFF  FEC,03
0B56:  MOVF   FED,F
0B58:  MOVFF  FEF,01
0B5C:  MOVFF  03,02
0B60:  MOVLB  0
0B62:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].lvd_reconnect_delay;
0B64:  MOVLB  1
0B66:  MOVF   x2A,W
0B68:  MULLW  24
0B6A:  MOVF   FF3,W
0B6C:  CLRF   x2C
0B6E:  MOVWF  x2B
0B70:  MOVLW  0A
0B72:  ADDWF  x2B,W
0B74:  MOVWF  01
0B76:  MOVLW  00
0B78:  ADDWFC x2C,W
0B7A:  MOVWF  03
0B7C:  MOVF   01,W
0B7E:  ADDLW  1B
0B80:  MOVWF  FE9
0B82:  MOVLW  00
0B84:  ADDWFC 03,W
0B86:  MOVWF  FEA
0B88:  MOVFF  FEC,03
0B8C:  MOVF   FED,F
0B8E:  MOVFF  FEF,01
0B92:  MOVFF  03,02
0B96:  MOVLB  0
0B98:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].hvd_disconnect_adc;
0B9A:  MOVLB  1
0B9C:  MOVF   x2A,W
0B9E:  MULLW  24
0BA0:  MOVF   FF3,W
0BA2:  CLRF   x2C
0BA4:  MOVWF  x2B
0BA6:  MOVLW  0C
0BA8:  ADDWF  x2B,W
0BAA:  MOVWF  01
0BAC:  MOVLW  00
0BAE:  ADDWFC x2C,W
0BB0:  MOVWF  03
0BB2:  MOVF   01,W
0BB4:  ADDLW  1B
0BB6:  MOVWF  FE9
0BB8:  MOVLW  00
0BBA:  ADDWFC 03,W
0BBC:  MOVWF  FEA
0BBE:  MOVFF  FEC,03
0BC2:  MOVF   FED,F
0BC4:  MOVFF  FEF,01
0BC8:  MOVFF  03,02
0BCC:  MOVLB  0
0BCE:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].hvd_disconnect_delay;
0BD0:  MOVLB  1
0BD2:  MOVF   x2A,W
0BD4:  MULLW  24
0BD6:  MOVF   FF3,W
0BD8:  CLRF   x2C
0BDA:  MOVWF  x2B
0BDC:  MOVLW  0E
0BDE:  ADDWF  x2B,W
0BE0:  MOVWF  01
0BE2:  MOVLW  00
0BE4:  ADDWFC x2C,W
0BE6:  MOVWF  03
0BE8:  MOVF   01,W
0BEA:  ADDLW  1B
0BEC:  MOVWF  FE9
0BEE:  MOVLW  00
0BF0:  ADDWFC 03,W
0BF2:  MOVWF  FEA
0BF4:  MOVFF  FEC,03
0BF8:  MOVF   FED,F
0BFA:  MOVFF  FEF,01
0BFE:  MOVFF  03,02
0C02:  MOVLB  0
0C04:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].hvd_reconnect_adc;
0C06:  MOVLB  1
0C08:  MOVF   x2A,W
0C0A:  MULLW  24
0C0C:  MOVF   FF3,W
0C0E:  CLRF   x2C
0C10:  MOVWF  x2B
0C12:  MOVLW  10
0C14:  ADDWF  x2B,W
0C16:  MOVWF  01
0C18:  MOVLW  00
0C1A:  ADDWFC x2C,W
0C1C:  MOVWF  03
0C1E:  MOVF   01,W
0C20:  ADDLW  1B
0C22:  MOVWF  FE9
0C24:  MOVLW  00
0C26:  ADDWFC 03,W
0C28:  MOVWF  FEA
0C2A:  MOVFF  FEC,03
0C2E:  MOVF   FED,F
0C30:  MOVFF  FEF,01
0C34:  MOVFF  03,02
0C38:  MOVLB  0
0C3A:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].hvd_reconnect_delay;
0C3C:  MOVLB  1
0C3E:  MOVF   x2A,W
0C40:  MULLW  24
0C42:  MOVF   FF3,W
0C44:  CLRF   x2C
0C46:  MOVWF  x2B
0C48:  MOVLW  12
0C4A:  ADDWF  x2B,W
0C4C:  MOVWF  01
0C4E:  MOVLW  00
0C50:  ADDWFC x2C,W
0C52:  MOVWF  03
0C54:  MOVF   01,W
0C56:  ADDLW  1B
0C58:  MOVWF  FE9
0C5A:  MOVLW  00
0C5C:  ADDWFC 03,W
0C5E:  MOVWF  FEA
0C60:  MOVFF  FEC,03
0C64:  MOVF   FED,F
0C66:  MOVFF  FEF,01
0C6A:  MOVFF  03,02
0C6E:  MOVLB  0
0C70:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_disconnect_adc;
0C72:  MOVLB  1
0C74:  MOVF   x2A,W
0C76:  MULLW  24
0C78:  MOVF   FF3,W
0C7A:  CLRF   x2C
0C7C:  MOVWF  x2B
0C7E:  MOVLW  14
0C80:  ADDWF  x2B,W
0C82:  MOVWF  01
0C84:  MOVLW  00
0C86:  ADDWFC x2C,W
0C88:  MOVWF  03
0C8A:  MOVF   01,W
0C8C:  ADDLW  1B
0C8E:  MOVWF  FE9
0C90:  MOVLW  00
0C92:  ADDWFC 03,W
0C94:  MOVWF  FEA
0C96:  MOVFF  FEC,03
0C9A:  MOVF   FED,F
0C9C:  MOVFF  FEF,01
0CA0:  MOVFF  03,02
0CA4:  MOVLB  0
0CA6:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_disconnect_delay;
0CA8:  MOVLB  1
0CAA:  MOVF   x2A,W
0CAC:  MULLW  24
0CAE:  MOVF   FF3,W
0CB0:  CLRF   x2C
0CB2:  MOVWF  x2B
0CB4:  MOVLW  16
0CB6:  ADDWF  x2B,W
0CB8:  MOVWF  01
0CBA:  MOVLW  00
0CBC:  ADDWFC x2C,W
0CBE:  MOVWF  03
0CC0:  MOVF   01,W
0CC2:  ADDLW  1B
0CC4:  MOVWF  FE9
0CC6:  MOVLW  00
0CC8:  ADDWFC 03,W
0CCA:  MOVWF  FEA
0CCC:  MOVFF  FEC,03
0CD0:  MOVF   FED,F
0CD2:  MOVFF  FEF,01
0CD6:  MOVFF  03,02
0CDA:  MOVLB  0
0CDC:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_reconnect_adc;
0CDE:  MOVLB  1
0CE0:  MOVF   x2A,W
0CE2:  MULLW  24
0CE4:  MOVF   FF3,W
0CE6:  CLRF   x2C
0CE8:  MOVWF  x2B
0CEA:  MOVLW  18
0CEC:  ADDWF  x2B,W
0CEE:  MOVWF  01
0CF0:  MOVLW  00
0CF2:  ADDWFC x2C,W
0CF4:  MOVWF  03
0CF6:  MOVF   01,W
0CF8:  ADDLW  1B
0CFA:  MOVWF  FE9
0CFC:  MOVLW  00
0CFE:  ADDWFC 03,W
0D00:  MOVWF  FEA
0D02:  MOVFF  FEC,03
0D06:  MOVF   FED,F
0D08:  MOVFF  FEF,01
0D0C:  MOVFF  03,02
0D10:  MOVLB  0
0D12:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_reconnect_delay;
0D14:  MOVLB  1
0D16:  MOVF   x2A,W
0D18:  MULLW  24
0D1A:  MOVF   FF3,W
0D1C:  CLRF   x2C
0D1E:  MOVWF  x2B
0D20:  MOVLW  1A
0D22:  ADDWF  x2B,W
0D24:  MOVWF  01
0D26:  MOVLW  00
0D28:  ADDWFC x2C,W
0D2A:  MOVWF  03
0D2C:  MOVF   01,W
0D2E:  ADDLW  1B
0D30:  MOVWF  FE9
0D32:  MOVLW  00
0D34:  ADDWFC 03,W
0D36:  MOVWF  FEA
0D38:  MOVFF  FEC,03
0D3C:  MOVF   FED,F
0D3E:  MOVFF  FEF,01
0D42:  MOVFF  03,02
0D46:  MOVLB  0
0D48:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_disconnect_adc;
0D4A:  MOVLB  1
0D4C:  MOVF   x2A,W
0D4E:  MULLW  24
0D50:  MOVF   FF3,W
0D52:  CLRF   x2C
0D54:  MOVWF  x2B
0D56:  MOVLW  14
0D58:  ADDWF  x2B,W
0D5A:  MOVWF  01
0D5C:  MOVLW  00
0D5E:  ADDWFC x2C,W
0D60:  MOVWF  03
0D62:  MOVF   01,W
0D64:  ADDLW  1B
0D66:  MOVWF  FE9
0D68:  MOVLW  00
0D6A:  ADDWFC 03,W
0D6C:  MOVWF  FEA
0D6E:  MOVFF  FEC,03
0D72:  MOVF   FED,F
0D74:  MOVFF  FEF,01
0D78:  MOVFF  03,02
0D7C:  MOVLB  0
0D7E:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_disconnect_delay;
0D80:  MOVLB  1
0D82:  MOVF   x2A,W
0D84:  MULLW  24
0D86:  MOVF   FF3,W
0D88:  CLRF   x2C
0D8A:  MOVWF  x2B
0D8C:  MOVLW  16
0D8E:  ADDWF  x2B,W
0D90:  MOVWF  01
0D92:  MOVLW  00
0D94:  ADDWFC x2C,W
0D96:  MOVWF  03
0D98:  MOVF   01,W
0D9A:  ADDLW  1B
0D9C:  MOVWF  FE9
0D9E:  MOVLW  00
0DA0:  ADDWFC 03,W
0DA2:  MOVWF  FEA
0DA4:  MOVFF  FEC,03
0DA8:  MOVF   FED,F
0DAA:  MOVFF  FEF,01
0DAE:  MOVFF  03,02
0DB2:  MOVLB  0
0DB4:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_reconnect_adc;
0DB6:  MOVLB  1
0DB8:  MOVF   x2A,W
0DBA:  MULLW  24
0DBC:  MOVF   FF3,W
0DBE:  CLRF   x2C
0DC0:  MOVWF  x2B
0DC2:  MOVLW  18
0DC4:  ADDWF  x2B,W
0DC6:  MOVWF  01
0DC8:  MOVLW  00
0DCA:  ADDWFC x2C,W
0DCC:  MOVWF  03
0DCE:  MOVF   01,W
0DD0:  ADDLW  1B
0DD2:  MOVWF  FE9
0DD4:  MOVLW  00
0DD6:  ADDWFC 03,W
0DD8:  MOVWF  FEA
0DDA:  MOVFF  FEC,03
0DDE:  MOVF   FED,F
0DE0:  MOVFF  FEF,01
0DE4:  MOVFF  03,02
0DE8:  MOVLB  0
0DEA:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_reconnect_delay;	
0DEC:  MOVLB  1
0DEE:  MOVF   x2A,W
0DF0:  MULLW  24
0DF2:  MOVF   FF3,W
0DF4:  CLRF   x2C
0DF6:  MOVWF  x2B
0DF8:  MOVLW  1A
0DFA:  ADDWF  x2B,W
0DFC:  MOVWF  01
0DFE:  MOVLW  00
0E00:  ADDWFC x2C,W
0E02:  MOVWF  03
0E04:  MOVF   01,W
0E06:  ADDLW  1B
0E08:  MOVWF  FE9
0E0A:  MOVLW  00
0E0C:  ADDWFC 03,W
0E0E:  MOVWF  FEA
0E10:  MOVFF  FEC,03
0E14:  MOVF   FED,F
0E16:  MOVFF  FEF,01
0E1A:  MOVFF  03,02
0E1E:  MOVLB  0
0E20:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_FUT_DISCONNECT_VALUE:
.................... 		case I2C_REG_CH0_FUT_DISCONNECT_DELAY:
.................... 		case I2C_REG_CH0_FUT_RECONNECT_VALUE:
.................... 		case I2C_REG_CH0_FUT_RECONNECT_DELAY:
.................... 			return (int16) 0xffff; /* not yet implemented */
0E22:  MOVLW  FF
0E24:  MOVWF  01
0E26:  MOVWF  02
0E28:  BRA    0E78
.................... 		
.................... 		/* configuration */
.................... 		case I2C_REG_CONFIG_HARDWARE_MODEL: 
.................... 			return (int16) 'D';
0E2A:  MOVLW  44
0E2C:  MOVWF  01
0E2E:  MOVLW  00
0E30:  MOVWF  02
0E32:  BRA    0E78
.................... 		case I2C_REG_CONFIG_HARDWARE_VERSION: 
.................... 			return (int16) '2';
0E34:  MOVLW  32
0E36:  MOVWF  01
0E38:  MOVLW  00
0E3A:  MOVWF  02
0E3C:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_MODEL: 
.................... 			return (int16) 'L';
0E3E:  MOVLW  4C
0E40:  MOVWF  01
0E42:  MOVLW  00
0E44:  MOVWF  02
0E46:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_VERSION: 
.................... 			return (int16) '0';
0E48:  MOVLW  30
0E4A:  MOVWF  01
0E4C:  MOVLW  00
0E4E:  MOVWF  02
0E50:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_YEAR:
.................... 			return (int16) current.compile_year;
0E52:  MOVFF  CB,01
0E56:  CLRF   02
0E58:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_MONTH:
.................... 			return (int16) current.compile_month;
0E5A:  MOVFF  CC,01
0E5E:  CLRF   02
0E60:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_DAY:
.................... 			return (int16) current.compile_day;
0E62:  MOVFF  CD,01
0E66:  CLRF   02
0E68:  BRA    0E78
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			/* 1 if factory unlocked */ 
.................... 			return (int16) current.factory_unlocked; 	
0E6A:  MOVFF  CA,01
0E6E:  CLRF   02
0E70:  BRA    0E78
.................... 
.................... 		/* we should have range checked, and never gotten here ... or read unimplemented (future) register */
.................... 		default: return (int16) 0xffff;
0E72:  MOVLW  FF
0E74:  MOVWF  01
0E76:  MOVWF  02
.................... 	}
0E78:  GOTO   0F36 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "interrupt_dcswc_module_latching_contactor.c"
.................... #int_timer2
.................... void isr_timer2() {
.................... 	timers.now_millisecond=1;
*
00D4:  BSF    xCF.2
.................... }
.................... 
.................... 
.................... 
.................... /* I2C slave interrupt */
00D6:  BCF    F9E.1
00D8:  GOTO   006C
.................... #byte SSPSTAT=GETENV("SFR:SSPSTAT")
.................... #INT_SSP
.................... void ssp_interrupt () {
.................... 	static int8 sstate;
.................... 	int8 state;
.................... 	int8 incoming;
.................... 	static int16 lastValue;
.................... 	static int8 lastMSB;
.................... 
.................... 	static int8 address; 
.................... 
.................... 	/* 
.................... 	our implementation of i2c_isr_state() that won't overflow and switch states
.................... 	but it will quit counting at 127 bytes. 
.................... 	If more bytes are needed, external counting variables can be used or the size of state can be made larger
.................... 	*/
.................... 
.................... 
.................... 	if ( ! bit_test(SSPSTAT,5) ) {
*
0E92:  BTFSC  FC7.5
0E94:  BRA    0EA2
.................... 		/* address */
.................... 		sstate=0;
0E96:  MOVLB  1
0E98:  CLRF   x08
.................... 
.................... 		if ( bit_test(SSPSTAT,2) ) {
0E9A:  BTFSS  FC7.2
0E9C:  BRA    0EA0
.................... 			/* set high bit if read */
.................... 			bit_set(sstate,7);
0E9E:  BSF    x08.7
.................... 		}
.................... 	} else {
0EA0:  MOVLB  0
.................... 		/* data */
.................... 	}
.................... 
.................... 	/* state variable used below is not incremented */
.................... 	state=sstate;
0EA2:  MOVFF  108,126
.................... 
.................... 	/* increment the state counter for next pass through unless it will overflow us into another state */
.................... 	if ( sstate != 0x7f && sstate != 0xff) {
0EA6:  MOVLB  1
0EA8:  MOVF   x08,W
0EAA:  SUBLW  7F
0EAC:  BZ    0EB6
0EAE:  INCFSZ x08,W
0EB0:  BRA    0EB4
0EB2:  BRA    0EB6
.................... 		sstate++;
0EB4:  INCF   x08,F
.................... 	}
.................... 
.................... 	
.................... 	/* i2c_isr_state() return an 8 bit int
.................... 		0 - Address match received with R/W bit clear, perform i2c_read( ) to read the I2C address.
.................... 		1-0x7F - Master has written data; i2c_read() will immediately return the data
.................... 		0x80 - Address match received with R/W bit set; perform i2c_read( ) to read the I2C address,
.................... 		and use i2c_write( ) to pre-load the transmit buffer for the next transaction (next I2C read
.................... 		performed by master will read this byte).
.................... 		0x81-0xFF - Transmission completed and acknowledged; respond with i2c_write() to pre-load
.................... 		the transmit buffer for the next transition (the next I2C read performed by master will read this
.................... 		byte).
.................... 		Function:
.................... 		Returns the state of I2C communications in I2C slave mode after an SSP interrupt. The return
.................... 		value increments with each byte received or sent.
.................... 		If 0x00 or 0x80 is returned, an i2C_read( ) needs to be performed to read the I2C address that
.................... 		was sent (it will match the address configured by #USE I2C so this value can be ignored)
.................... 	*/
.................... 
.................... 	if ( state <= 0x80 ) {                      
0EB6:  MOVF   x26,W
0EB8:  SUBLW  80
0EBA:  BNC   0F1E
.................... 		/* I2C master is sending us data */
.................... 		if ( 0x80 == state ) {
0EBC:  MOVF   x26,W
0EBE:  SUBLW  80
0EC0:  BNZ   0EC8
.................... 			/* i2c_read(2) casues the function to read the SSPBUF without releasing the clock */
.................... 			incoming = i2c_read(STREAM_SLAVE,2);
0EC2:  MOVFF  FC9,127
.................... 		} else {
0EC6:  BRA    0ED4
.................... 			incoming = i2c_read(STREAM_SLAVE);
0EC8:  BCF    FC6.6
0ECA:  BTFSS  FC7.0
0ECC:  BRA    0ECA
0ECE:  MOVF   FC9,W
0ED0:  BSF    FC6.4
0ED2:  MOVWF  x27
.................... 		}
.................... 
.................... 		if ( 1 == state ) {             
0ED4:  DECFSZ x26,W
0ED6:  BRA    0EE0
.................... 			address = incoming<<1;
0ED8:  BCF    FD8.0
0EDA:  RLCF   x27,W
0EDC:  MOVWF  x0C
.................... 		} else if ( state >= 2 && 0x80 != state ) {
0EDE:  BRA    0F1E
0EE0:  MOVF   x26,W
0EE2:  SUBLW  01
0EE4:  BC    0F1E
0EE6:  MOVF   x26,W
0EE8:  SUBLW  80
0EEA:  BZ    0F1E
.................... 			/* received byte is data */
.................... 		
.................... 			/* save MSB and we'll process it on next */
.................... 			if ( 2 == state ) {
0EEC:  MOVF   x26,W
0EEE:  SUBLW  02
0EF0:  BNZ   0EF8
.................... 				lastMSB=incoming;
0EF2:  MOVFF  127,10B
.................... 			} else if ( 3 == state ) {
0EF6:  BRA    0F1E
0EF8:  MOVF   x26,W
0EFA:  SUBLW  03
0EFC:  BNZ   0F1E
.................... 				/* 16 bit value made of previous byte and this byte */
.................... 				write_i2c(address>>1,make16(lastMSB,incoming));
0EFE:  BCF    FD8.0
0F00:  RRCF   x0C,W
0F02:  MOVWF  x28
0F04:  MOVFF  10B,12A
0F08:  MOVFF  127,129
0F0C:  MOVWF  x2B
0F0E:  MOVFF  10B,12D
0F12:  MOVFF  127,12C
0F16:  MOVLB  0
0F18:  GOTO   00DC
0F1C:  MOVLB  1
.................... 
.................... 				/* this write only works for a single register per I2C transaction */
.................... 				/* this is not a BUG, but it would need to be implemented if this functionality is needed */
.................... 			}
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	if ( state >= 0x80 ) {
0F1E:  MOVF   x26,W
0F20:  SUBLW  7F
0F22:  BC    0F5C
.................... 		/* I2C master is requesting data from us */
.................... 
.................... 		if ( ! bit_test(address,0) ) {
0F24:  BTFSC  x0C.0
0F26:  BRA    0F4C
.................... 			/* read 16 bit register (register address half of I2C address) on even address */
.................... 			lastValue=map_i2c(address>>1);
0F28:  BCF    FD8.0
0F2A:  RRCF   x0C,W
0F2C:  MOVWF  x28
0F2E:  MOVWF  x29
0F30:  MOVLB  0
0F32:  GOTO   0614
0F36:  MOVFF  02,10A
0F3A:  MOVFF  01,109
.................... 
.................... 			/* send the MSB */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,1));
0F3E:  MOVFF  10A,128
0F42:  MOVFF  10A,129
0F46:  RCALL  0E7C
.................... 		} else {
0F48:  BRA    0F58
0F4A:  MOVLB  1
.................... 			/* send LSB of 16 bit register on odd address */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,0));
0F4C:  MOVFF  109,128
0F50:  MOVFF  109,129
0F54:  MOVLB  0
0F56:  RCALL  0E7C
.................... 		}
.................... 		address++;
0F58:  MOVLB  1
0F5A:  INCF   x0C,F
.................... 	}
.................... }
.................... 
.................... 
.................... 
.................... 
0F5C:  BCF    F9E.3
0F5E:  MOVLB  0
0F60:  GOTO   006C
.................... #include "debug_dcswc_module_latching_contactor.c"
.................... void debug_dump(void) {
.................... 	int8 i;
.................... 	
.................... 	restart_wdt();
*
2BC4:  CLRWDT
.................... 	fprintf(STREAM_FTDI,"# '%s'\r\n",__DATE__);
2BC6:  MOVLW  64
2BC8:  MOVWF  FF6
2BCA:  MOVLW  0F
2BCC:  MOVWF  FF7
2BCE:  MOVLW  03
2BD0:  MOVLB  1
2BD2:  MOVWF  x1B
2BD4:  MOVLB  0
2BD6:  CALL   1B7E
2BDA:  MOVLW  CA
2BDC:  MOVWF  FF6
2BDE:  MOVLW  00
2BE0:  MOVWF  FF7
2BE2:  CALL   1BA8
2BE6:  MOVLW  69
2BE8:  MOVWF  FF6
2BEA:  MOVLW  0F
2BEC:  MOVWF  FF7
2BEE:  MOVLW  03
2BF0:  MOVLB  1
2BF2:  MOVWF  x1B
2BF4:  MOVLB  0
2BF6:  CALL   1B7E
.................... 	fprintf(STREAM_FTDI,"#  compile_year=%u\r\n",current.compile_year);
2BFA:  MOVLW  6E
2BFC:  MOVWF  FF6
2BFE:  MOVLW  0F
2C00:  MOVWF  FF7
2C02:  MOVLW  10
2C04:  MOVLB  1
2C06:  MOVWF  x1B
2C08:  MOVLB  0
2C0A:  CALL   1B7E
2C0E:  MOVFF  CB,118
2C12:  MOVLW  1B
2C14:  MOVLB  1
2C16:  MOVWF  x19
2C18:  MOVLB  0
2C1A:  RCALL  2A4C
2C1C:  MOVLW  0D
2C1E:  BTFSS  F9E.4
2C20:  BRA    2C1E
2C22:  MOVWF  FAD
2C24:  MOVLW  0A
2C26:  BTFSS  F9E.4
2C28:  BRA    2C26
2C2A:  MOVWF  FAD
.................... 	fprintf(STREAM_FTDI,"# compile_month=%u\r\n",current.compile_month);
2C2C:  MOVLW  84
2C2E:  MOVWF  FF6
2C30:  MOVLW  0F
2C32:  MOVWF  FF7
2C34:  MOVLW  10
2C36:  MOVLB  1
2C38:  MOVWF  x1B
2C3A:  MOVLB  0
2C3C:  CALL   1B7E
2C40:  MOVFF  CC,118
2C44:  MOVLW  1B
2C46:  MOVLB  1
2C48:  MOVWF  x19
2C4A:  MOVLB  0
2C4C:  RCALL  2A4C
2C4E:  MOVLW  0D
2C50:  BTFSS  F9E.4
2C52:  BRA    2C50
2C54:  MOVWF  FAD
2C56:  MOVLW  0A
2C58:  BTFSS  F9E.4
2C5A:  BRA    2C58
2C5C:  MOVWF  FAD
.................... 	fprintf(STREAM_FTDI,"#   compile_day=%u\r\n",current.compile_day);
2C5E:  MOVLW  9A
2C60:  MOVWF  FF6
2C62:  MOVLW  0F
2C64:  MOVWF  FF7
2C66:  MOVLW  10
2C68:  MOVLB  1
2C6A:  MOVWF  x1B
2C6C:  MOVLB  0
2C6E:  CALL   1B7E
2C72:  MOVFF  CD,118
2C76:  MOVLW  1B
2C78:  MOVLB  1
2C7A:  MOVWF  x19
2C7C:  MOVLB  0
2C7E:  RCALL  2A4C
2C80:  MOVLW  0D
2C82:  BTFSS  F9E.4
2C84:  BRA    2C82
2C86:  MOVWF  FAD
2C88:  MOVLW  0A
2C8A:  BTFSS  F9E.4
2C8C:  BRA    2C8A
2C8E:  MOVWF  FAD
2C90:  CLRF   19
2C92:  BTFSC  FF2.7
2C94:  BSF    19.7
2C96:  BCF    FF2.7
.................... 	fprintf(STREAM_FTDI,"#       vin adc=%lu\r\n",adc_get(0));
2C98:  MOVLB  1
2C9A:  CLRF   x2B
2C9C:  MOVLB  0
2C9E:  CALL   0594
2CA2:  BTFSC  19.7
2CA4:  BSF    FF2.7
2CA6:  MOVFF  02,119
2CAA:  MOVFF  01,118
2CAE:  MOVLW  B0
2CB0:  MOVWF  FF6
2CB2:  MOVLW  0F
2CB4:  MOVWF  FF7
2CB6:  MOVLW  10
2CB8:  MOVLB  1
2CBA:  MOVWF  x1B
2CBC:  MOVLB  0
2CBE:  CALL   1B7E
2CC2:  MOVLW  10
2CC4:  MOVWF  FE9
2CC6:  MOVFF  119,11B
2CCA:  MOVFF  118,11A
2CCE:  RCALL  2ACA
2CD0:  MOVLW  0D
2CD2:  BTFSS  F9E.4
2CD4:  BRA    2CD2
2CD6:  MOVWF  FAD
2CD8:  MOVLW  0A
2CDA:  BTFSS  F9E.4
2CDC:  BRA    2CDA
2CDE:  MOVWF  FAD
2CE0:  CLRF   19
2CE2:  BTFSC  FF2.7
2CE4:  BSF    19.7
2CE6:  BCF    FF2.7
.................... 	fprintf(STREAM_FTDI,"#      temp adc=%lu\r\n",adc_get(1));
2CE8:  MOVLW  01
2CEA:  MOVLB  1
2CEC:  MOVWF  x2B
2CEE:  MOVLB  0
2CF0:  CALL   0594
2CF4:  BTFSC  19.7
2CF6:  BSF    FF2.7
2CF8:  MOVFF  02,119
2CFC:  MOVFF  01,118
2D00:  MOVLW  C6
2D02:  MOVWF  FF6
2D04:  MOVLW  0F
2D06:  MOVWF  FF7
2D08:  MOVLW  10
2D0A:  MOVLB  1
2D0C:  MOVWF  x1B
2D0E:  MOVLB  0
2D10:  CALL   1B7E
2D14:  MOVLW  10
2D16:  MOVWF  FE9
2D18:  MOVFF  119,11B
2D1C:  MOVFF  118,11A
2D20:  RCALL  2ACA
2D22:  MOVLW  0D
2D24:  BTFSS  F9E.4
2D26:  BRA    2D24
2D28:  MOVWF  FAD
2D2A:  MOVLW  0A
2D2C:  BTFSS  F9E.4
2D2E:  BRA    2D2C
2D30:  MOVWF  FAD
.................... //	fprintf(STREAM_FTDI,"# read_dip_sw()=%u\r\n",read_dip_switch());
.................... //	fprintf(STREAM_FTDI,"#    dip sw adc=%lu\r\n",adc_get(2));
.................... 
.................... 	for ( i=0 ; i<2 ; i++ ) {
2D32:  MOVLB  1
2D34:  CLRF   x17
2D36:  MOVF   x17,W
2D38:  SUBLW  01
2D3A:  BTFSS  FD8.0
2D3C:  GOTO   38EA
.................... 		restart_wdt();
2D40:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"#-------\r\n");
2D42:  MOVLW  DC
2D44:  MOVWF  FF6
2D46:  MOVLW  0F
2D48:  MOVWF  FF7
2D4A:  MOVLB  0
2D4C:  CALL   1BA8
.................... 		fprintf(STREAM_FTDI,"# config.ch[%u]\r\n",i);
2D50:  MOVLW  E8
2D52:  MOVWF  FF6
2D54:  MOVLW  0F
2D56:  MOVWF  FF7
2D58:  MOVLW  0C
2D5A:  MOVLB  1
2D5C:  MOVWF  x1B
2D5E:  MOVLB  0
2D60:  CALL   1B7E
2D64:  MOVFF  117,118
2D68:  MOVLW  1B
2D6A:  MOVLB  1
2D6C:  MOVWF  x19
2D6E:  MOVLB  0
2D70:  RCALL  2A4C
2D72:  MOVLW  F6
2D74:  MOVWF  FF6
2D76:  MOVLW  0F
2D78:  MOVWF  FF7
2D7A:  MOVLW  03
2D7C:  MOVLB  1
2D7E:  MOVWF  x1B
2D80:  MOVLB  0
2D82:  CALL   1B7E
.................... 		fprintf(STREAM_FTDI,"# command_off_hold_time=%lu\r\n",config.ch[i].command_off_hold_time);
2D86:  MOVLB  1
2D88:  MOVF   x17,W
2D8A:  MULLW  24
2D8C:  MOVF   FF3,W
2D8E:  CLRF   x19
2D90:  MOVWF  x18
2D92:  MOVLW  02
2D94:  ADDWF  x18,W
2D96:  MOVWF  01
2D98:  MOVLW  00
2D9A:  ADDWFC x19,W
2D9C:  MOVWF  03
2D9E:  MOVF   01,W
2DA0:  ADDLW  1B
2DA2:  MOVWF  FE9
2DA4:  MOVLW  00
2DA6:  ADDWFC 03,W
2DA8:  MOVWF  FEA
2DAA:  MOVFF  FEC,119
2DAE:  MOVF   FED,F
2DB0:  MOVFF  FEF,118
2DB4:  MOVLW  FA
2DB6:  MOVWF  FF6
2DB8:  MOVLW  0F
2DBA:  MOVWF  FF7
2DBC:  MOVLW  18
2DBE:  MOVWF  x1B
2DC0:  MOVLB  0
2DC2:  CALL   1B7E
2DC6:  MOVLW  10
2DC8:  MOVWF  FE9
2DCA:  MOVFF  119,11B
2DCE:  MOVFF  118,11A
2DD2:  RCALL  2ACA
2DD4:  MOVLW  0D
2DD6:  BTFSS  F9E.4
2DD8:  BRA    2DD6
2DDA:  MOVWF  FAD
2DDC:  MOVLW  0A
2DDE:  BTFSS  F9E.4
2DE0:  BRA    2DDE
2DE2:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    lvd_disconnect_adc=%lu\r\n",config.ch[i].lvd_disconnect_adc);
2DE4:  MOVLB  1
2DE6:  MOVF   x17,W
2DE8:  MULLW  24
2DEA:  MOVF   FF3,W
2DEC:  CLRF   x19
2DEE:  MOVWF  x18
2DF0:  MOVLW  04
2DF2:  ADDWF  x18,W
2DF4:  MOVWF  01
2DF6:  MOVLW  00
2DF8:  ADDWFC x19,W
2DFA:  MOVWF  03
2DFC:  MOVF   01,W
2DFE:  ADDLW  1B
2E00:  MOVWF  FE9
2E02:  MOVLW  00
2E04:  ADDWFC 03,W
2E06:  MOVWF  FEA
2E08:  MOVFF  FEC,119
2E0C:  MOVF   FED,F
2E0E:  MOVFF  FEF,118
2E12:  MOVLW  18
2E14:  MOVWF  FF6
2E16:  MOVLW  10
2E18:  MOVWF  FF7
2E1A:  MOVLW  18
2E1C:  MOVWF  x1B
2E1E:  MOVLB  0
2E20:  CALL   1B7E
2E24:  MOVLW  10
2E26:  MOVWF  FE9
2E28:  MOVFF  119,11B
2E2C:  MOVFF  118,11A
2E30:  RCALL  2ACA
2E32:  MOVLW  0D
2E34:  BTFSS  F9E.4
2E36:  BRA    2E34
2E38:  MOVWF  FAD
2E3A:  MOVLW  0A
2E3C:  BTFSS  F9E.4
2E3E:  BRA    2E3C
2E40:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  lvd_disconnect_delay=%lu\r\n",config.ch[i].lvd_disconnect_delay);
2E42:  MOVLB  1
2E44:  MOVF   x17,W
2E46:  MULLW  24
2E48:  MOVF   FF3,W
2E4A:  CLRF   x19
2E4C:  MOVWF  x18
2E4E:  MOVLW  06
2E50:  ADDWF  x18,W
2E52:  MOVWF  01
2E54:  MOVLW  00
2E56:  ADDWFC x19,W
2E58:  MOVWF  03
2E5A:  MOVF   01,W
2E5C:  ADDLW  1B
2E5E:  MOVWF  FE9
2E60:  MOVLW  00
2E62:  ADDWFC 03,W
2E64:  MOVWF  FEA
2E66:  MOVFF  FEC,119
2E6A:  MOVF   FED,F
2E6C:  MOVFF  FEF,118
2E70:  MOVLW  36
2E72:  MOVWF  FF6
2E74:  MOVLW  10
2E76:  MOVWF  FF7
2E78:  MOVLW  18
2E7A:  MOVWF  x1B
2E7C:  MOVLB  0
2E7E:  CALL   1B7E
2E82:  MOVLW  10
2E84:  MOVWF  FE9
2E86:  MOVFF  119,11B
2E8A:  MOVFF  118,11A
2E8E:  RCALL  2ACA
2E90:  MOVLW  0D
2E92:  BTFSS  F9E.4
2E94:  BRA    2E92
2E96:  MOVWF  FAD
2E98:  MOVLW  0A
2E9A:  BTFSS  F9E.4
2E9C:  BRA    2E9A
2E9E:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     lvd_reconnect_adc=%lu\r\n",config.ch[i].lvd_reconnect_adc);
2EA0:  MOVLB  1
2EA2:  MOVF   x17,W
2EA4:  MULLW  24
2EA6:  MOVF   FF3,W
2EA8:  CLRF   x19
2EAA:  MOVWF  x18
2EAC:  MOVLW  08
2EAE:  ADDWF  x18,W
2EB0:  MOVWF  01
2EB2:  MOVLW  00
2EB4:  ADDWFC x19,W
2EB6:  MOVWF  03
2EB8:  MOVF   01,W
2EBA:  ADDLW  1B
2EBC:  MOVWF  FE9
2EBE:  MOVLW  00
2EC0:  ADDWFC 03,W
2EC2:  MOVWF  FEA
2EC4:  MOVFF  FEC,119
2EC8:  MOVF   FED,F
2ECA:  MOVFF  FEF,118
2ECE:  MOVLW  54
2ED0:  MOVWF  FF6
2ED2:  MOVLW  10
2ED4:  MOVWF  FF7
2ED6:  MOVLW  18
2ED8:  MOVWF  x1B
2EDA:  MOVLB  0
2EDC:  CALL   1B7E
2EE0:  MOVLW  10
2EE2:  MOVWF  FE9
2EE4:  MOVFF  119,11B
2EE8:  MOVFF  118,11A
2EEC:  RCALL  2ACA
2EEE:  MOVLW  0D
2EF0:  BTFSS  F9E.4
2EF2:  BRA    2EF0
2EF4:  MOVWF  FAD
2EF6:  MOVLW  0A
2EF8:  BTFSS  F9E.4
2EFA:  BRA    2EF8
2EFC:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   lvd_reconnect_delay=%lu\r\n",config.ch[i].lvd_reconnect_delay);
2EFE:  MOVLB  1
2F00:  MOVF   x17,W
2F02:  MULLW  24
2F04:  MOVF   FF3,W
2F06:  CLRF   x19
2F08:  MOVWF  x18
2F0A:  MOVLW  0A
2F0C:  ADDWF  x18,W
2F0E:  MOVWF  01
2F10:  MOVLW  00
2F12:  ADDWFC x19,W
2F14:  MOVWF  03
2F16:  MOVF   01,W
2F18:  ADDLW  1B
2F1A:  MOVWF  FE9
2F1C:  MOVLW  00
2F1E:  ADDWFC 03,W
2F20:  MOVWF  FEA
2F22:  MOVFF  FEC,119
2F26:  MOVF   FED,F
2F28:  MOVFF  FEF,118
2F2C:  MOVLW  72
2F2E:  MOVWF  FF6
2F30:  MOVLW  10
2F32:  MOVWF  FF7
2F34:  MOVLW  18
2F36:  MOVWF  x1B
2F38:  MOVLB  0
2F3A:  CALL   1B7E
2F3E:  MOVLW  10
2F40:  MOVWF  FE9
2F42:  MOVFF  119,11B
2F46:  MOVFF  118,11A
2F4A:  RCALL  2ACA
2F4C:  MOVLW  0D
2F4E:  BTFSS  F9E.4
2F50:  BRA    2F4E
2F52:  MOVWF  FAD
2F54:  MOVLW  0A
2F56:  BTFSS  F9E.4
2F58:  BRA    2F56
2F5A:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    hvd_disconnect_adc=%lu\r\n",config.ch[i].hvd_disconnect_adc);
2F5C:  MOVLB  1
2F5E:  MOVF   x17,W
2F60:  MULLW  24
2F62:  MOVF   FF3,W
2F64:  CLRF   x19
2F66:  MOVWF  x18
2F68:  MOVLW  0C
2F6A:  ADDWF  x18,W
2F6C:  MOVWF  01
2F6E:  MOVLW  00
2F70:  ADDWFC x19,W
2F72:  MOVWF  03
2F74:  MOVF   01,W
2F76:  ADDLW  1B
2F78:  MOVWF  FE9
2F7A:  MOVLW  00
2F7C:  ADDWFC 03,W
2F7E:  MOVWF  FEA
2F80:  MOVFF  FEC,119
2F84:  MOVF   FED,F
2F86:  MOVFF  FEF,118
2F8A:  MOVLW  90
2F8C:  MOVWF  FF6
2F8E:  MOVLW  10
2F90:  MOVWF  FF7
2F92:  MOVLW  18
2F94:  MOVWF  x1B
2F96:  MOVLB  0
2F98:  CALL   1B7E
2F9C:  MOVLW  10
2F9E:  MOVWF  FE9
2FA0:  MOVFF  119,11B
2FA4:  MOVFF  118,11A
2FA8:  RCALL  2ACA
2FAA:  MOVLW  0D
2FAC:  BTFSS  F9E.4
2FAE:  BRA    2FAC
2FB0:  MOVWF  FAD
2FB2:  MOVLW  0A
2FB4:  BTFSS  F9E.4
2FB6:  BRA    2FB4
2FB8:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  hvd_disconnect_delay=%lu\r\n",config.ch[i].hvd_disconnect_delay);
2FBA:  MOVLB  1
2FBC:  MOVF   x17,W
2FBE:  MULLW  24
2FC0:  MOVF   FF3,W
2FC2:  CLRF   x19
2FC4:  MOVWF  x18
2FC6:  MOVLW  0E
2FC8:  ADDWF  x18,W
2FCA:  MOVWF  01
2FCC:  MOVLW  00
2FCE:  ADDWFC x19,W
2FD0:  MOVWF  03
2FD2:  MOVF   01,W
2FD4:  ADDLW  1B
2FD6:  MOVWF  FE9
2FD8:  MOVLW  00
2FDA:  ADDWFC 03,W
2FDC:  MOVWF  FEA
2FDE:  MOVFF  FEC,119
2FE2:  MOVF   FED,F
2FE4:  MOVFF  FEF,118
2FE8:  MOVLW  AE
2FEA:  MOVWF  FF6
2FEC:  MOVLW  10
2FEE:  MOVWF  FF7
2FF0:  MOVLW  18
2FF2:  MOVWF  x1B
2FF4:  MOVLB  0
2FF6:  CALL   1B7E
2FFA:  MOVLW  10
2FFC:  MOVWF  FE9
2FFE:  MOVFF  119,11B
3002:  MOVFF  118,11A
3006:  RCALL  2ACA
3008:  MOVLW  0D
300A:  BTFSS  F9E.4
300C:  BRA    300A
300E:  MOVWF  FAD
3010:  MOVLW  0A
3012:  BTFSS  F9E.4
3014:  BRA    3012
3016:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     hvd_reconnect_adc=%lu\r\n",config.ch[i].hvd_reconnect_adc);
3018:  MOVLB  1
301A:  MOVF   x17,W
301C:  MULLW  24
301E:  MOVF   FF3,W
3020:  CLRF   x19
3022:  MOVWF  x18
3024:  MOVLW  10
3026:  ADDWF  x18,W
3028:  MOVWF  01
302A:  MOVLW  00
302C:  ADDWFC x19,W
302E:  MOVWF  03
3030:  MOVF   01,W
3032:  ADDLW  1B
3034:  MOVWF  FE9
3036:  MOVLW  00
3038:  ADDWFC 03,W
303A:  MOVWF  FEA
303C:  MOVFF  FEC,119
3040:  MOVF   FED,F
3042:  MOVFF  FEF,118
3046:  MOVLW  CC
3048:  MOVWF  FF6
304A:  MOVLW  10
304C:  MOVWF  FF7
304E:  MOVLW  18
3050:  MOVWF  x1B
3052:  MOVLB  0
3054:  CALL   1B7E
3058:  MOVLW  10
305A:  MOVWF  FE9
305C:  MOVFF  119,11B
3060:  MOVFF  118,11A
3064:  RCALL  2ACA
3066:  MOVLW  0D
3068:  BTFSS  F9E.4
306A:  BRA    3068
306C:  MOVWF  FAD
306E:  MOVLW  0A
3070:  BTFSS  F9E.4
3072:  BRA    3070
3074:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   hvd_reconnect_delay=%lu\r\n",config.ch[i].hvd_reconnect_delay);
3076:  MOVLB  1
3078:  MOVF   x17,W
307A:  MULLW  24
307C:  MOVF   FF3,W
307E:  CLRF   x19
3080:  MOVWF  x18
3082:  MOVLW  12
3084:  ADDWF  x18,W
3086:  MOVWF  01
3088:  MOVLW  00
308A:  ADDWFC x19,W
308C:  MOVWF  03
308E:  MOVF   01,W
3090:  ADDLW  1B
3092:  MOVWF  FE9
3094:  MOVLW  00
3096:  ADDWFC 03,W
3098:  MOVWF  FEA
309A:  MOVFF  FEC,119
309E:  MOVF   FED,F
30A0:  MOVFF  FEF,118
30A4:  MOVLW  EA
30A6:  MOVWF  FF6
30A8:  MOVLW  10
30AA:  MOVWF  FF7
30AC:  MOVLW  18
30AE:  MOVWF  x1B
30B0:  MOVLB  0
30B2:  CALL   1B7E
30B6:  MOVLW  10
30B8:  MOVWF  FE9
30BA:  MOVFF  119,11B
30BE:  MOVFF  118,11A
30C2:  RCALL  2ACA
30C4:  MOVLW  0D
30C6:  BTFSS  F9E.4
30C8:  BRA    30C6
30CA:  MOVWF  FAD
30CC:  MOVLW  0A
30CE:  BTFSS  F9E.4
30D0:  BRA    30CE
30D2:  MOVWF  FAD
.................... 
.................... 		restart_wdt();
30D4:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"#    ltd_disconnect_adc=%lu\r\n",config.ch[i].ltd_disconnect_adc);
30D6:  MOVLB  1
30D8:  MOVF   x17,W
30DA:  MULLW  24
30DC:  MOVF   FF3,W
30DE:  CLRF   x19
30E0:  MOVWF  x18
30E2:  MOVLW  14
30E4:  ADDWF  x18,W
30E6:  MOVWF  01
30E8:  MOVLW  00
30EA:  ADDWFC x19,W
30EC:  MOVWF  03
30EE:  MOVF   01,W
30F0:  ADDLW  1B
30F2:  MOVWF  FE9
30F4:  MOVLW  00
30F6:  ADDWFC 03,W
30F8:  MOVWF  FEA
30FA:  MOVFF  FEC,119
30FE:  MOVF   FED,F
3100:  MOVFF  FEF,118
3104:  MOVLW  08
3106:  MOVWF  FF6
3108:  MOVLW  11
310A:  MOVWF  FF7
310C:  MOVLW  18
310E:  MOVWF  x1B
3110:  MOVLB  0
3112:  CALL   1B7E
3116:  MOVLW  10
3118:  MOVWF  FE9
311A:  MOVFF  119,11B
311E:  MOVFF  118,11A
3122:  RCALL  2ACA
3124:  MOVLW  0D
3126:  BTFSS  F9E.4
3128:  BRA    3126
312A:  MOVWF  FAD
312C:  MOVLW  0A
312E:  BTFSS  F9E.4
3130:  BRA    312E
3132:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  ltd_disconnect_delay=%lu\r\n",config.ch[i].ltd_disconnect_delay);
3134:  MOVLB  1
3136:  MOVF   x17,W
3138:  MULLW  24
313A:  MOVF   FF3,W
313C:  CLRF   x19
313E:  MOVWF  x18
3140:  MOVLW  16
3142:  ADDWF  x18,W
3144:  MOVWF  01
3146:  MOVLW  00
3148:  ADDWFC x19,W
314A:  MOVWF  03
314C:  MOVF   01,W
314E:  ADDLW  1B
3150:  MOVWF  FE9
3152:  MOVLW  00
3154:  ADDWFC 03,W
3156:  MOVWF  FEA
3158:  MOVFF  FEC,119
315C:  MOVF   FED,F
315E:  MOVFF  FEF,118
3162:  MOVLW  26
3164:  MOVWF  FF6
3166:  MOVLW  11
3168:  MOVWF  FF7
316A:  MOVLW  18
316C:  MOVWF  x1B
316E:  MOVLB  0
3170:  CALL   1B7E
3174:  MOVLW  10
3176:  MOVWF  FE9
3178:  MOVFF  119,11B
317C:  MOVFF  118,11A
3180:  RCALL  2ACA
3182:  MOVLW  0D
3184:  BTFSS  F9E.4
3186:  BRA    3184
3188:  MOVWF  FAD
318A:  MOVLW  0A
318C:  BTFSS  F9E.4
318E:  BRA    318C
3190:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     ltd_reconnect_adc=%lu\r\n",config.ch[i].ltd_reconnect_adc);
3192:  MOVLB  1
3194:  MOVF   x17,W
3196:  MULLW  24
3198:  MOVF   FF3,W
319A:  CLRF   x19
319C:  MOVWF  x18
319E:  MOVLW  18
31A0:  ADDWF  x18,W
31A2:  MOVWF  01
31A4:  MOVLW  00
31A6:  ADDWFC x19,W
31A8:  MOVWF  03
31AA:  MOVF   01,W
31AC:  ADDLW  1B
31AE:  MOVWF  FE9
31B0:  MOVLW  00
31B2:  ADDWFC 03,W
31B4:  MOVWF  FEA
31B6:  MOVFF  FEC,119
31BA:  MOVF   FED,F
31BC:  MOVFF  FEF,118
31C0:  MOVLW  44
31C2:  MOVWF  FF6
31C4:  MOVLW  11
31C6:  MOVWF  FF7
31C8:  MOVLW  18
31CA:  MOVWF  x1B
31CC:  MOVLB  0
31CE:  CALL   1B7E
31D2:  MOVLW  10
31D4:  MOVWF  FE9
31D6:  MOVFF  119,11B
31DA:  MOVFF  118,11A
31DE:  RCALL  2ACA
31E0:  MOVLW  0D
31E2:  BTFSS  F9E.4
31E4:  BRA    31E2
31E6:  MOVWF  FAD
31E8:  MOVLW  0A
31EA:  BTFSS  F9E.4
31EC:  BRA    31EA
31EE:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   ltd_reconnect_delay=%lu\r\n",config.ch[i].ltd_reconnect_delay);
31F0:  MOVLB  1
31F2:  MOVF   x17,W
31F4:  MULLW  24
31F6:  MOVF   FF3,W
31F8:  CLRF   x19
31FA:  MOVWF  x18
31FC:  MOVLW  1A
31FE:  ADDWF  x18,W
3200:  MOVWF  01
3202:  MOVLW  00
3204:  ADDWFC x19,W
3206:  MOVWF  03
3208:  MOVF   01,W
320A:  ADDLW  1B
320C:  MOVWF  FE9
320E:  MOVLW  00
3210:  ADDWFC 03,W
3212:  MOVWF  FEA
3214:  MOVFF  FEC,119
3218:  MOVF   FED,F
321A:  MOVFF  FEF,118
321E:  MOVLW  62
3220:  MOVWF  FF6
3222:  MOVLW  11
3224:  MOVWF  FF7
3226:  MOVLW  18
3228:  MOVWF  x1B
322A:  MOVLB  0
322C:  CALL   1B7E
3230:  MOVLW  10
3232:  MOVWF  FE9
3234:  MOVFF  119,11B
3238:  MOVFF  118,11A
323C:  RCALL  2ACA
323E:  MOVLW  0D
3240:  BTFSS  F9E.4
3242:  BRA    3240
3244:  MOVWF  FAD
3246:  MOVLW  0A
3248:  BTFSS  F9E.4
324A:  BRA    3248
324C:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    htd_disconnect_adc=%lu\r\n",config.ch[i].htd_disconnect_adc);
324E:  MOVLB  1
3250:  MOVF   x17,W
3252:  MULLW  24
3254:  MOVF   FF3,W
3256:  CLRF   x19
3258:  MOVWF  x18
325A:  MOVLW  1C
325C:  ADDWF  x18,W
325E:  MOVWF  01
3260:  MOVLW  00
3262:  ADDWFC x19,W
3264:  MOVWF  03
3266:  MOVF   01,W
3268:  ADDLW  1B
326A:  MOVWF  FE9
326C:  MOVLW  00
326E:  ADDWFC 03,W
3270:  MOVWF  FEA
3272:  MOVFF  FEC,119
3276:  MOVF   FED,F
3278:  MOVFF  FEF,118
327C:  MOVLW  80
327E:  MOVWF  FF6
3280:  MOVLW  11
3282:  MOVWF  FF7
3284:  MOVLW  18
3286:  MOVWF  x1B
3288:  MOVLB  0
328A:  CALL   1B7E
328E:  MOVLW  10
3290:  MOVWF  FE9
3292:  MOVFF  119,11B
3296:  MOVFF  118,11A
329A:  RCALL  2ACA
329C:  MOVLW  0D
329E:  BTFSS  F9E.4
32A0:  BRA    329E
32A2:  MOVWF  FAD
32A4:  MOVLW  0A
32A6:  BTFSS  F9E.4
32A8:  BRA    32A6
32AA:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  htd_disconnect_delay=%lu\r\n",config.ch[i].htd_disconnect_delay);
32AC:  MOVLB  1
32AE:  MOVF   x17,W
32B0:  MULLW  24
32B2:  MOVF   FF3,W
32B4:  CLRF   x19
32B6:  MOVWF  x18
32B8:  MOVLW  1E
32BA:  ADDWF  x18,W
32BC:  MOVWF  01
32BE:  MOVLW  00
32C0:  ADDWFC x19,W
32C2:  MOVWF  03
32C4:  MOVF   01,W
32C6:  ADDLW  1B
32C8:  MOVWF  FE9
32CA:  MOVLW  00
32CC:  ADDWFC 03,W
32CE:  MOVWF  FEA
32D0:  MOVFF  FEC,119
32D4:  MOVF   FED,F
32D6:  MOVFF  FEF,118
32DA:  MOVLW  9E
32DC:  MOVWF  FF6
32DE:  MOVLW  11
32E0:  MOVWF  FF7
32E2:  MOVLW  18
32E4:  MOVWF  x1B
32E6:  MOVLB  0
32E8:  CALL   1B7E
32EC:  MOVLW  10
32EE:  MOVWF  FE9
32F0:  MOVFF  119,11B
32F4:  MOVFF  118,11A
32F8:  CALL   2ACA
32FC:  MOVLW  0D
32FE:  BTFSS  F9E.4
3300:  BRA    32FE
3302:  MOVWF  FAD
3304:  MOVLW  0A
3306:  BTFSS  F9E.4
3308:  BRA    3306
330A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     htd_reconnect_adc=%lu\r\n",config.ch[i].htd_reconnect_adc);
330C:  MOVLB  1
330E:  MOVF   x17,W
3310:  MULLW  24
3312:  MOVF   FF3,W
3314:  CLRF   x19
3316:  MOVWF  x18
3318:  MOVLW  20
331A:  ADDWF  x18,W
331C:  MOVWF  01
331E:  MOVLW  00
3320:  ADDWFC x19,W
3322:  MOVWF  03
3324:  MOVF   01,W
3326:  ADDLW  1B
3328:  MOVWF  FE9
332A:  MOVLW  00
332C:  ADDWFC 03,W
332E:  MOVWF  FEA
3330:  MOVFF  FEC,119
3334:  MOVF   FED,F
3336:  MOVFF  FEF,118
333A:  MOVLW  BC
333C:  MOVWF  FF6
333E:  MOVLW  11
3340:  MOVWF  FF7
3342:  MOVLW  18
3344:  MOVWF  x1B
3346:  MOVLB  0
3348:  CALL   1B7E
334C:  MOVLW  10
334E:  MOVWF  FE9
3350:  MOVFF  119,11B
3354:  MOVFF  118,11A
3358:  CALL   2ACA
335C:  MOVLW  0D
335E:  BTFSS  F9E.4
3360:  BRA    335E
3362:  MOVWF  FAD
3364:  MOVLW  0A
3366:  BTFSS  F9E.4
3368:  BRA    3366
336A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   htd_reconnect_delay=%lu\r\n",config.ch[i].htd_reconnect_delay);
336C:  MOVLB  1
336E:  MOVF   x17,W
3370:  MULLW  24
3372:  MOVF   FF3,W
3374:  CLRF   x19
3376:  MOVWF  x18
3378:  MOVLW  22
337A:  ADDWF  x18,W
337C:  MOVWF  01
337E:  MOVLW  00
3380:  ADDWFC x19,W
3382:  MOVWF  03
3384:  MOVF   01,W
3386:  ADDLW  1B
3388:  MOVWF  FE9
338A:  MOVLW  00
338C:  ADDWFC 03,W
338E:  MOVWF  FEA
3390:  MOVFF  FEC,119
3394:  MOVF   FED,F
3396:  MOVFF  FEF,118
339A:  MOVLW  DA
339C:  MOVWF  FF6
339E:  MOVLW  11
33A0:  MOVWF  FF7
33A2:  MOVLW  18
33A4:  MOVWF  x1B
33A6:  MOVLB  0
33A8:  CALL   1B7E
33AC:  MOVLW  10
33AE:  MOVWF  FE9
33B0:  MOVFF  119,11B
33B4:  MOVFF  118,11A
33B8:  CALL   2ACA
33BC:  MOVLW  0D
33BE:  BTFSS  F9E.4
33C0:  BRA    33BE
33C2:  MOVWF  FAD
33C4:  MOVLW  0A
33C6:  BTFSS  F9E.4
33C8:  BRA    33C6
33CA:  MOVWF  FAD
.................... 
.................... 
.................... 		restart_wdt();
33CC:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"#\r\n");
33CE:  MOVLW  F8
33D0:  MOVWF  FF6
33D2:  MOVLW  11
33D4:  MOVWF  FF7
33D6:  CALL   1BA8
.................... 		fprintf(STREAM_FTDI,"# channel[%u]\r\n",i);
33DA:  MOVLW  FC
33DC:  MOVWF  FF6
33DE:  MOVLW  11
33E0:  MOVWF  FF7
33E2:  MOVLW  0A
33E4:  MOVLB  1
33E6:  MOVWF  x1B
33E8:  MOVLB  0
33EA:  CALL   1B7E
33EE:  MOVFF  117,118
33F2:  MOVLW  1B
33F4:  MOVLB  1
33F6:  MOVWF  x19
33F8:  MOVLB  0
33FA:  CALL   2A4C
33FE:  MOVLW  08
3400:  MOVWF  FF6
3402:  MOVLW  12
3404:  MOVWF  FF7
3406:  MOVLW  03
3408:  MOVLB  1
340A:  MOVWF  x1B
340C:  MOVLB  0
340E:  CALL   1B7E
.................... 		fprintf(STREAM_FTDI,"#                        state=0x%02x\r\n",channel[i].state);
3412:  MOVLB  1
3414:  MOVF   x17,W
3416:  MULLW  19
3418:  MOVF   FF3,W
341A:  CLRF   x19
341C:  MOVWF  x18
341E:  MOVLW  D6
3420:  ADDWF  x18,W
3422:  MOVWF  FE9
3424:  MOVLW  00
3426:  ADDWFC x19,W
3428:  MOVWF  FEA
342A:  MOVFF  FEF,11A
342E:  MOVLW  0C
3430:  MOVWF  FF6
3432:  MOVLW  12
3434:  MOVWF  FF7
3436:  MOVLW  21
3438:  MOVWF  x1B
343A:  MOVLB  0
343C:  CALL   1B7E
3440:  MOVFF  11A,11B
3444:  MOVLW  57
3446:  MOVLB  1
3448:  MOVWF  x1C
344A:  MOVLB  0
344C:  GOTO   2B7C
3450:  MOVLW  0D
3452:  BTFSS  F9E.4
3454:  BRA    3452
3456:  MOVWF  FAD
3458:  MOVLW  0A
345A:  BTFSS  F9E.4
345C:  BRA    345A
345E:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#           command_on_seconds=%lu\r\n",channel[i].command_on_seconds);
3460:  MOVLB  1
3462:  MOVF   x17,W
3464:  MULLW  19
3466:  MOVF   FF3,W
3468:  CLRF   x19
346A:  MOVWF  x18
346C:  MOVLW  01
346E:  ADDWF  x18,W
3470:  MOVWF  01
3472:  MOVLW  00
3474:  ADDWFC x19,W
3476:  MOVWF  03
3478:  MOVF   01,W
347A:  ADDLW  D6
347C:  MOVWF  FE9
347E:  MOVLW  00
3480:  ADDWFC 03,W
3482:  MOVWF  FEA
3484:  MOVFF  FEC,119
3488:  MOVF   FED,F
348A:  MOVFF  FEF,118
348E:  MOVLW  34
3490:  MOVWF  FF6
3492:  MOVLW  12
3494:  MOVWF  FF7
3496:  MOVLW  1F
3498:  MOVWF  x1B
349A:  MOVLB  0
349C:  CALL   1B7E
34A0:  MOVLW  10
34A2:  MOVWF  FE9
34A4:  MOVFF  119,11B
34A8:  MOVFF  118,11A
34AC:  CALL   2ACA
34B0:  MOVLW  0D
34B2:  BTFSS  F9E.4
34B4:  BRA    34B2
34B6:  MOVWF  FAD
34B8:  MOVLW  0A
34BA:  BTFSS  F9E.4
34BC:  BRA    34BA
34BE:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#      command_on_hold_seconds=%lu\r\n",channel[i].command_on_hold_seconds);
34C0:  MOVLB  1
34C2:  MOVF   x17,W
34C4:  MULLW  19
34C6:  MOVF   FF3,W
34C8:  CLRF   x19
34CA:  MOVWF  x18
34CC:  MOVLW  03
34CE:  ADDWF  x18,W
34D0:  MOVWF  01
34D2:  MOVLW  00
34D4:  ADDWFC x19,W
34D6:  MOVWF  03
34D8:  MOVF   01,W
34DA:  ADDLW  D6
34DC:  MOVWF  FE9
34DE:  MOVLW  00
34E0:  ADDWFC 03,W
34E2:  MOVWF  FEA
34E4:  MOVFF  FEC,119
34E8:  MOVF   FED,F
34EA:  MOVFF  FEF,118
34EE:  MOVLW  5A
34F0:  MOVWF  FF6
34F2:  MOVLW  12
34F4:  MOVWF  FF7
34F6:  MOVLW  1F
34F8:  MOVWF  x1B
34FA:  MOVLB  0
34FC:  CALL   1B7E
3500:  MOVLW  10
3502:  MOVWF  FE9
3504:  MOVFF  119,11B
3508:  MOVFF  118,11A
350C:  CALL   2ACA
3510:  MOVLW  0D
3512:  BTFSS  F9E.4
3514:  BRA    3512
3516:  MOVWF  FAD
3518:  MOVLW  0A
351A:  BTFSS  F9E.4
351C:  BRA    351A
351E:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#          command_off_seconds=%lu\r\n",channel[i].command_off_seconds);
3520:  MOVLB  1
3522:  MOVF   x17,W
3524:  MULLW  19
3526:  MOVF   FF3,W
3528:  CLRF   x19
352A:  MOVWF  x18
352C:  MOVLW  05
352E:  ADDWF  x18,W
3530:  MOVWF  01
3532:  MOVLW  00
3534:  ADDWFC x19,W
3536:  MOVWF  03
3538:  MOVF   01,W
353A:  ADDLW  D6
353C:  MOVWF  FE9
353E:  MOVLW  00
3540:  ADDWFC 03,W
3542:  MOVWF  FEA
3544:  MOVFF  FEC,119
3548:  MOVF   FED,F
354A:  MOVFF  FEF,118
354E:  MOVLW  80
3550:  MOVWF  FF6
3552:  MOVLW  12
3554:  MOVWF  FF7
3556:  MOVLW  1F
3558:  MOVWF  x1B
355A:  MOVLB  0
355C:  CALL   1B7E
3560:  MOVLW  10
3562:  MOVWF  FE9
3564:  MOVFF  119,11B
3568:  MOVFF  118,11A
356C:  CALL   2ACA
3570:  MOVLW  0D
3572:  BTFSS  F9E.4
3574:  BRA    3572
3576:  MOVWF  FAD
3578:  MOVLW  0A
357A:  BTFSS  F9E.4
357C:  BRA    357A
357E:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     command_off_hold_seconds=%lu\r\n",channel[i].command_off_hold_seconds);
3580:  MOVLB  1
3582:  MOVF   x17,W
3584:  MULLW  19
3586:  MOVF   FF3,W
3588:  CLRF   x19
358A:  MOVWF  x18
358C:  MOVLW  07
358E:  ADDWF  x18,W
3590:  MOVWF  01
3592:  MOVLW  00
3594:  ADDWFC x19,W
3596:  MOVWF  03
3598:  MOVF   01,W
359A:  ADDLW  D6
359C:  MOVWF  FE9
359E:  MOVLW  00
35A0:  ADDWFC 03,W
35A2:  MOVWF  FEA
35A4:  MOVFF  FEC,119
35A8:  MOVF   FED,F
35AA:  MOVFF  FEF,118
35AE:  MOVLW  A6
35B0:  MOVWF  FF6
35B2:  MOVLW  12
35B4:  MOVWF  FF7
35B6:  MOVLW  1F
35B8:  MOVWF  x1B
35BA:  MOVLB  0
35BC:  CALL   1B7E
35C0:  MOVLW  10
35C2:  MOVWF  FE9
35C4:  MOVFF  119,11B
35C8:  MOVFF  118,11A
35CC:  CALL   2ACA
35D0:  MOVLW  0D
35D2:  BTFSS  F9E.4
35D4:  BRA    35D2
35D6:  MOVWF  FAD
35D8:  MOVLW  0A
35DA:  BTFSS  F9E.4
35DC:  BRA    35DA
35DE:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# lvd_disconnect_delay_seconds=%lu\r\n",channel[i].lvd_disconnect_delay_seconds);
35E0:  MOVLB  1
35E2:  MOVF   x17,W
35E4:  MULLW  19
35E6:  MOVF   FF3,W
35E8:  CLRF   x19
35EA:  MOVWF  x18
35EC:  MOVLW  09
35EE:  ADDWF  x18,W
35F0:  MOVWF  01
35F2:  MOVLW  00
35F4:  ADDWFC x19,W
35F6:  MOVWF  03
35F8:  MOVF   01,W
35FA:  ADDLW  D6
35FC:  MOVWF  FE9
35FE:  MOVLW  00
3600:  ADDWFC 03,W
3602:  MOVWF  FEA
3604:  MOVFF  FEC,119
3608:  MOVF   FED,F
360A:  MOVFF  FEF,118
360E:  MOVLW  CC
3610:  MOVWF  FF6
3612:  MOVLW  12
3614:  MOVWF  FF7
3616:  MOVLW  1F
3618:  MOVWF  x1B
361A:  MOVLB  0
361C:  CALL   1B7E
3620:  MOVLW  10
3622:  MOVWF  FE9
3624:  MOVFF  119,11B
3628:  MOVFF  118,11A
362C:  CALL   2ACA
3630:  MOVLW  0D
3632:  BTFSS  F9E.4
3634:  BRA    3632
3636:  MOVWF  FAD
3638:  MOVLW  0A
363A:  BTFSS  F9E.4
363C:  BRA    363A
363E:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  lvd_reconnect_delay_seconds=%lu\r\n",channel[i].lvd_reconnect_delay_seconds);
3640:  MOVLB  1
3642:  MOVF   x17,W
3644:  MULLW  19
3646:  MOVF   FF3,W
3648:  CLRF   x19
364A:  MOVWF  x18
364C:  MOVLW  0B
364E:  ADDWF  x18,W
3650:  MOVWF  01
3652:  MOVLW  00
3654:  ADDWFC x19,W
3656:  MOVWF  03
3658:  MOVF   01,W
365A:  ADDLW  D6
365C:  MOVWF  FE9
365E:  MOVLW  00
3660:  ADDWFC 03,W
3662:  MOVWF  FEA
3664:  MOVFF  FEC,119
3668:  MOVF   FED,F
366A:  MOVFF  FEF,118
366E:  MOVLW  F2
3670:  MOVWF  FF6
3672:  MOVLW  12
3674:  MOVWF  FF7
3676:  MOVLW  1F
3678:  MOVWF  x1B
367A:  MOVLB  0
367C:  CALL   1B7E
3680:  MOVLW  10
3682:  MOVWF  FE9
3684:  MOVFF  119,11B
3688:  MOVFF  118,11A
368C:  CALL   2ACA
3690:  MOVLW  0D
3692:  BTFSS  F9E.4
3694:  BRA    3692
3696:  MOVWF  FAD
3698:  MOVLW  0A
369A:  BTFSS  F9E.4
369C:  BRA    369A
369E:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# hvd_disconnect_delay_seconds=%lu\r\n",channel[i].hvd_disconnect_delay_seconds);
36A0:  MOVLB  1
36A2:  MOVF   x17,W
36A4:  MULLW  19
36A6:  MOVF   FF3,W
36A8:  CLRF   x19
36AA:  MOVWF  x18
36AC:  MOVLW  0D
36AE:  ADDWF  x18,W
36B0:  MOVWF  01
36B2:  MOVLW  00
36B4:  ADDWFC x19,W
36B6:  MOVWF  03
36B8:  MOVF   01,W
36BA:  ADDLW  D6
36BC:  MOVWF  FE9
36BE:  MOVLW  00
36C0:  ADDWFC 03,W
36C2:  MOVWF  FEA
36C4:  MOVFF  FEC,119
36C8:  MOVF   FED,F
36CA:  MOVFF  FEF,118
36CE:  MOVLW  18
36D0:  MOVWF  FF6
36D2:  MOVLW  13
36D4:  MOVWF  FF7
36D6:  MOVLW  1F
36D8:  MOVWF  x1B
36DA:  MOVLB  0
36DC:  CALL   1B7E
36E0:  MOVLW  10
36E2:  MOVWF  FE9
36E4:  MOVFF  119,11B
36E8:  MOVFF  118,11A
36EC:  CALL   2ACA
36F0:  MOVLW  0D
36F2:  BTFSS  F9E.4
36F4:  BRA    36F2
36F6:  MOVWF  FAD
36F8:  MOVLW  0A
36FA:  BTFSS  F9E.4
36FC:  BRA    36FA
36FE:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  hvd_reconnect_delay_seconds=%lu\r\n",channel[i].hvd_reconnect_delay_seconds);
3700:  MOVLB  1
3702:  MOVF   x17,W
3704:  MULLW  19
3706:  MOVF   FF3,W
3708:  CLRF   x19
370A:  MOVWF  x18
370C:  MOVLW  0F
370E:  ADDWF  x18,W
3710:  MOVWF  01
3712:  MOVLW  00
3714:  ADDWFC x19,W
3716:  MOVWF  03
3718:  MOVF   01,W
371A:  ADDLW  D6
371C:  MOVWF  FE9
371E:  MOVLW  00
3720:  ADDWFC 03,W
3722:  MOVWF  FEA
3724:  MOVFF  FEC,119
3728:  MOVF   FED,F
372A:  MOVFF  FEF,118
372E:  MOVLW  3E
3730:  MOVWF  FF6
3732:  MOVLW  13
3734:  MOVWF  FF7
3736:  MOVLW  1F
3738:  MOVWF  x1B
373A:  MOVLB  0
373C:  CALL   1B7E
3740:  MOVLW  10
3742:  MOVWF  FE9
3744:  MOVFF  119,11B
3748:  MOVFF  118,11A
374C:  CALL   2ACA
3750:  MOVLW  0D
3752:  BTFSS  F9E.4
3754:  BRA    3752
3756:  MOVWF  FAD
3758:  MOVLW  0A
375A:  BTFSS  F9E.4
375C:  BRA    375A
375E:  MOVWF  FAD
.................... 
.................... 		restart_wdt();
3760:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# ltd_disconnect_delay_seconds=%lu\r\n",channel[i].ltd_disconnect_delay_seconds);
3762:  MOVLB  1
3764:  MOVF   x17,W
3766:  MULLW  19
3768:  MOVF   FF3,W
376A:  CLRF   x19
376C:  MOVWF  x18
376E:  MOVLW  11
3770:  ADDWF  x18,W
3772:  MOVWF  01
3774:  MOVLW  00
3776:  ADDWFC x19,W
3778:  MOVWF  03
377A:  MOVF   01,W
377C:  ADDLW  D6
377E:  MOVWF  FE9
3780:  MOVLW  00
3782:  ADDWFC 03,W
3784:  MOVWF  FEA
3786:  MOVFF  FEC,119
378A:  MOVF   FED,F
378C:  MOVFF  FEF,118
3790:  MOVLW  64
3792:  MOVWF  FF6
3794:  MOVLW  13
3796:  MOVWF  FF7
3798:  MOVLW  1F
379A:  MOVWF  x1B
379C:  MOVLB  0
379E:  CALL   1B7E
37A2:  MOVLW  10
37A4:  MOVWF  FE9
37A6:  MOVFF  119,11B
37AA:  MOVFF  118,11A
37AE:  CALL   2ACA
37B2:  MOVLW  0D
37B4:  BTFSS  F9E.4
37B6:  BRA    37B4
37B8:  MOVWF  FAD
37BA:  MOVLW  0A
37BC:  BTFSS  F9E.4
37BE:  BRA    37BC
37C0:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  ltd_reconnect_delay_seconds=%lu\r\n",channel[i].ltd_reconnect_delay_seconds);
37C2:  MOVLB  1
37C4:  MOVF   x17,W
37C6:  MULLW  19
37C8:  MOVF   FF3,W
37CA:  CLRF   x19
37CC:  MOVWF  x18
37CE:  MOVLW  13
37D0:  ADDWF  x18,W
37D2:  MOVWF  01
37D4:  MOVLW  00
37D6:  ADDWFC x19,W
37D8:  MOVWF  03
37DA:  MOVF   01,W
37DC:  ADDLW  D6
37DE:  MOVWF  FE9
37E0:  MOVLW  00
37E2:  ADDWFC 03,W
37E4:  MOVWF  FEA
37E6:  MOVFF  FEC,119
37EA:  MOVF   FED,F
37EC:  MOVFF  FEF,118
37F0:  MOVLW  8A
37F2:  MOVWF  FF6
37F4:  MOVLW  13
37F6:  MOVWF  FF7
37F8:  MOVLW  1F
37FA:  MOVWF  x1B
37FC:  MOVLB  0
37FE:  CALL   1B7E
3802:  MOVLW  10
3804:  MOVWF  FE9
3806:  MOVFF  119,11B
380A:  MOVFF  118,11A
380E:  CALL   2ACA
3812:  MOVLW  0D
3814:  BTFSS  F9E.4
3816:  BRA    3814
3818:  MOVWF  FAD
381A:  MOVLW  0A
381C:  BTFSS  F9E.4
381E:  BRA    381C
3820:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# htd_disconnect_delay_seconds=%lu\r\n",channel[i].htd_disconnect_delay_seconds);
3822:  MOVLB  1
3824:  MOVF   x17,W
3826:  MULLW  19
3828:  MOVF   FF3,W
382A:  CLRF   x19
382C:  MOVWF  x18
382E:  MOVLW  15
3830:  ADDWF  x18,W
3832:  MOVWF  01
3834:  MOVLW  00
3836:  ADDWFC x19,W
3838:  MOVWF  03
383A:  MOVF   01,W
383C:  ADDLW  D6
383E:  MOVWF  FE9
3840:  MOVLW  00
3842:  ADDWFC 03,W
3844:  MOVWF  FEA
3846:  MOVFF  FEC,119
384A:  MOVF   FED,F
384C:  MOVFF  FEF,118
3850:  MOVLW  B0
3852:  MOVWF  FF6
3854:  MOVLW  13
3856:  MOVWF  FF7
3858:  MOVLW  1F
385A:  MOVWF  x1B
385C:  MOVLB  0
385E:  CALL   1B7E
3862:  MOVLW  10
3864:  MOVWF  FE9
3866:  MOVFF  119,11B
386A:  MOVFF  118,11A
386E:  CALL   2ACA
3872:  MOVLW  0D
3874:  BTFSS  F9E.4
3876:  BRA    3874
3878:  MOVWF  FAD
387A:  MOVLW  0A
387C:  BTFSS  F9E.4
387E:  BRA    387C
3880:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  htd_reconnect_delay_seconds=%lu\r\n",channel[i].htd_reconnect_delay_seconds);
3882:  MOVLB  1
3884:  MOVF   x17,W
3886:  MULLW  19
3888:  MOVF   FF3,W
388A:  CLRF   x19
388C:  MOVWF  x18
388E:  MOVLW  17
3890:  ADDWF  x18,W
3892:  MOVWF  01
3894:  MOVLW  00
3896:  ADDWFC x19,W
3898:  MOVWF  03
389A:  MOVF   01,W
389C:  ADDLW  D6
389E:  MOVWF  FE9
38A0:  MOVLW  00
38A2:  ADDWFC 03,W
38A4:  MOVWF  FEA
38A6:  MOVFF  FEC,119
38AA:  MOVF   FED,F
38AC:  MOVFF  FEF,118
38B0:  MOVLW  D6
38B2:  MOVWF  FF6
38B4:  MOVLW  13
38B6:  MOVWF  FF7
38B8:  MOVLW  1F
38BA:  MOVWF  x1B
38BC:  MOVLB  0
38BE:  CALL   1B7E
38C2:  MOVLW  10
38C4:  MOVWF  FE9
38C6:  MOVFF  119,11B
38CA:  MOVFF  118,11A
38CE:  CALL   2ACA
38D2:  MOVLW  0D
38D4:  BTFSS  F9E.4
38D6:  BRA    38D4
38D8:  MOVWF  FAD
38DA:  MOVLW  0A
38DC:  BTFSS  F9E.4
38DE:  BRA    38DC
38E0:  MOVWF  FAD
38E2:  MOVLB  1
38E4:  INCF   x17,F
38E6:  GOTO   2D36
.................... 
.................... 	}
38EA:  MOVLB  0
38EC:  GOTO   3AE0 (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... 
.................... void contactor_on(int8 c) {
.................... 	/* only turn on contactor if it isn't on or needs a refresh */
.................... 	if ( 1 == timers.contactor[c] ) {
*
286C:  CLRF   03
286E:  MOVLB  1
2870:  MOVF   x19,W
2872:  ADDLW  D2
2874:  MOVWF  FE9
2876:  MOVLW  00
2878:  ADDWFC 03,W
287A:  MOVWF  FEA
287C:  MOVF   FEF,W
287E:  SUBLW  01
2880:  BNZ   2884
.................... 		return;
2882:  BRA    28BE
.................... 	}
.................... 
.................... 	/* we start the powersave count down */
.................... 	timers.contactor_powersave[c]=CONTACTOR_POWER_SAVE_MS;
2884:  CLRF   03
2886:  MOVF   x19,W
2888:  ADDLW  D4
288A:  MOVWF  FE9
288C:  MOVLW  00
288E:  ADDWFC 03,W
2890:  MOVWF  FEA
2892:  MOVLW  C8
2894:  MOVWF  FEF
.................... 
.................... 	/* control the actual coil depending on what channel we are on */
.................... 	if ( 0==c ) {
2896:  MOVF   x19,F
2898:  BNZ   28A4
.................... 		/* contactor A pins */
.................... 		output_low(BRIDGE_A_A);
289A:  BCF    F94.3
289C:  BCF    F8B.3
.................... 		output_high(BRIDGE_A_B);
289E:  BCF    F94.4
28A0:  BSF    F8B.4
.................... 	} else {
28A2:  BRA    28AC
.................... 		/* contactor B pins */
.................... 		output_low(BRIDGE_B_A);
28A4:  BCF    F94.5
28A6:  BCF    F8B.5
.................... 		output_high(BRIDGE_B_B);
28A8:  BCF    F94.6
28AA:  BSF    F8B.6
.................... 	}
.................... 
.................... 	/* save state for next time */
.................... 	timers.contactor[c]=1;
28AC:  CLRF   03
28AE:  MOVF   x19,W
28B0:  ADDLW  D2
28B2:  MOVWF  FE9
28B4:  MOVLW  00
28B6:  ADDWFC 03,W
28B8:  MOVWF  FEA
28BA:  MOVLW  01
28BC:  MOVWF  FEF
28BE:  MOVLB  0
28C0:  GOTO   2924 (RETURN)
.................... }
.................... 
.................... void contactor_off(int8 c) {
.................... 	/* only turn off contactor if it isn't on or needs a refresh */
.................... 	if ( 0 == timers.contactor[c] ) {
*
2818:  CLRF   03
281A:  MOVLB  1
281C:  MOVF   x19,W
281E:  ADDLW  D2
2820:  MOVWF  FE9
2822:  MOVLW  00
2824:  ADDWFC 03,W
2826:  MOVWF  FEA
2828:  MOVF   FEF,W
282A:  BNZ   282E
.................... 		return;
282C:  BRA    2866
.................... 	}
.................... 
.................... 	/* we start the powersave count down */
.................... 	timers.contactor_powersave[c]=CONTACTOR_POWER_SAVE_MS;
282E:  CLRF   03
2830:  MOVF   x19,W
2832:  ADDLW  D4
2834:  MOVWF  FE9
2836:  MOVLW  00
2838:  ADDWFC 03,W
283A:  MOVWF  FEA
283C:  MOVLW  C8
283E:  MOVWF  FEF
.................... 
.................... 	/* control the actual coil depending on what channel we are on */
.................... 	if ( 0==c ) {
2840:  MOVF   x19,F
2842:  BNZ   284E
.................... 		output_high(BRIDGE_A_A);
2844:  BCF    F94.3
2846:  BSF    F8B.3
.................... 		output_low(BRIDGE_A_B);
2848:  BCF    F94.4
284A:  BCF    F8B.4
.................... 	} else {
284C:  BRA    2856
.................... 		output_high(BRIDGE_B_A);
284E:  BCF    F94.5
2850:  BSF    F8B.5
.................... 		output_low(BRIDGE_B_B);
2852:  BCF    F94.6
2854:  BCF    F8B.6
.................... 	}
.................... 
.................... 	/* save state for next time */
.................... 	timers.contactor[c]=0;
2856:  CLRF   03
2858:  MOVF   x19,W
285A:  ADDLW  D2
285C:  MOVWF  FE9
285E:  MOVLW  00
2860:  ADDWFC 03,W
2862:  MOVWF  FEA
2864:  CLRF   FEF
2866:  MOVLB  0
2868:  GOTO   2918 (RETURN)
.................... }
.................... 
.................... void contactor_set(int8 c) {
*
28C4:  MOVLW  01
28C6:  MOVLB  1
28C8:  MOVWF  x18
.................... 	int8 state=1;
.................... 
.................... 	/* if nothing is set in channel[c].state, contactor is on */
.................... 	state=1; 
28CA:  MOVWF  x18
.................... 
.................... 	if ( channel[c].state & CH_STATE_MASK_ON ) {
28CC:  MOVF   x17,W
28CE:  MULLW  19
28D0:  MOVF   FF3,W
28D2:  CLRF   x1A
28D4:  MOVWF  x19
28D6:  MOVLW  D6
28D8:  ADDWF  x19,W
28DA:  MOVWF  FE9
28DC:  MOVLW  00
28DE:  ADDWFC x1A,W
28E0:  MOVWF  FEA
28E2:  MOVF   FEF,W
28E4:  ANDLW  03
28E6:  BZ    28EE
.................... 		/* if override button (switch) is set or we are commanded on, then we will be on */
.................... 		state=1;
28E8:  MOVLW  01
28EA:  MOVWF  x18
.................... 	} else if ( channel[c].state & CH_STATE_MASK_OFF ) {
28EC:  BRA    290C
28EE:  MOVF   x17,W
28F0:  MULLW  19
28F2:  MOVF   FF3,W
28F4:  CLRF   x1A
28F6:  MOVWF  x19
28F8:  MOVLW  D6
28FA:  ADDWF  x19,W
28FC:  MOVWF  FE9
28FE:  MOVLW  00
2900:  ADDWFC x1A,W
2902:  MOVWF  FEA
2904:  MOVF   FEF,W
2906:  ANDLW  7C
2908:  BZ    290C
.................... 		/* if one of the disconnect bits is set, we will be off */
.................... 		state=0;
290A:  CLRF   x18
.................... 	}
.................... 
.................... 	if ( 0==state ) {
290C:  MOVF   x18,F
290E:  BNZ   291C
.................... 		contactor_off(c);
2910:  MOVFF  117,119
2914:  MOVLB  0
2916:  BRA    2818
.................... 	} else {
2918:  BRA    2924
291A:  MOVLB  1
.................... 		contactor_on(c);
291C:  MOVFF  117,119
2920:  MOVLB  0
2922:  BRA    286C
.................... 	}
2924:  RETURN 0
.................... 
.................... }
.................... 
.................... void contactor_logic(int8 c) {
.................... 	int16 adc;
.................... 
.................... 	/* override button / switch */
.................... 	if ( (0==c && 0==input(SW_OVERRIDE_A)) || (1==c && 0==input(SW_OVERRIDE_B)) ) {
*
1C68:  MOVLB  1
1C6A:  MOVF   x17,F
1C6C:  BNZ   1C74
1C6E:  BSF    F92.5
1C70:  BTFSS  F80.5
1C72:  BRA    1C7E
1C74:  DECFSZ x17,W
1C76:  BRA    1C9C
1C78:  BSF    F92.4
1C7A:  BTFSC  F80.4
1C7C:  BRA    1C9C
.................... 		bit_set(channel[c].state,CH_STATE_BIT_OVERRIDE);
1C7E:  MOVF   x17,W
1C80:  MULLW  19
1C82:  MOVF   FF3,W
1C84:  CLRF   x1B
1C86:  MOVWF  x1A
1C88:  MOVLW  D6
1C8A:  ADDWF  x1A,W
1C8C:  MOVWF  01
1C8E:  MOVLW  00
1C90:  ADDWFC x1B,W
1C92:  MOVFF  01,FE9
1C96:  MOVWF  FEA
1C98:  BSF    FEF.0
.................... 	} else {
1C9A:  BRA    1CB8
.................... 		bit_clear(channel[c].state,CH_STATE_BIT_OVERRIDE);
1C9C:  MOVF   x17,W
1C9E:  MULLW  19
1CA0:  MOVF   FF3,W
1CA2:  CLRF   x1B
1CA4:  MOVWF  x1A
1CA6:  MOVLW  D6
1CA8:  ADDWF  x1A,W
1CAA:  MOVWF  01
1CAC:  MOVLW  00
1CAE:  ADDWFC x1B,W
1CB0:  MOVFF  01,FE9
1CB4:  MOVWF  FEA
1CB6:  BCF    FEF.0
.................... 	}
.................... 
.................... 	/* command on. 65535 disables */
.................... 	if ( 65535 != channel[c].command_on_seconds ) {
1CB8:  MOVF   x17,W
1CBA:  MULLW  19
1CBC:  MOVF   FF3,W
1CBE:  CLRF   x1B
1CC0:  MOVWF  x1A
1CC2:  MOVLW  01
1CC4:  ADDWF  x1A,W
1CC6:  MOVWF  01
1CC8:  MOVLW  00
1CCA:  ADDWFC x1B,W
1CCC:  MOVWF  03
1CCE:  MOVF   01,W
1CD0:  ADDLW  D6
1CD2:  MOVWF  FE9
1CD4:  MOVLW  00
1CD6:  ADDWFC 03,W
1CD8:  MOVWF  FEA
1CDA:  MOVFF  FEC,03
1CDE:  MOVF   FED,F
1CE0:  MOVF   FEF,W
1CE2:  SUBLW  FF
1CE4:  BNZ   1CEC
1CE6:  INCFSZ 03,W
1CE8:  BRA    1CEC
1CEA:  BRA    1E82
.................... 		if ( channel[c].command_on_seconds > 0 ) {
1CEC:  MOVF   x17,W
1CEE:  MULLW  19
1CF0:  MOVF   FF3,W
1CF2:  CLRF   x1B
1CF4:  MOVWF  x1A
1CF6:  MOVLW  01
1CF8:  ADDWF  x1A,W
1CFA:  MOVWF  01
1CFC:  MOVLW  00
1CFE:  ADDWFC x1B,W
1D00:  MOVWF  03
1D02:  MOVF   01,W
1D04:  ADDLW  D6
1D06:  MOVWF  FE9
1D08:  MOVLW  00
1D0A:  ADDWFC 03,W
1D0C:  MOVWF  FEA
1D0E:  MOVFF  FEC,11B
1D12:  MOVF   FED,F
1D14:  MOVFF  FEF,11A
1D18:  MOVF   x1A,F
1D1A:  BNZ   1D20
1D1C:  MOVF   x1B,F
1D1E:  BZ    1D4E
.................... 			/* waiting to power on */
.................... 			channel[c].command_on_seconds--;
1D20:  MOVF   x17,W
1D22:  MULLW  19
1D24:  MOVF   FF3,W
1D26:  CLRF   x1B
1D28:  MOVWF  x1A
1D2A:  MOVLW  01
1D2C:  ADDWF  x1A,W
1D2E:  MOVWF  01
1D30:  MOVLW  00
1D32:  ADDWFC x1B,W
1D34:  MOVWF  03
1D36:  MOVF   01,W
1D38:  ADDLW  D6
1D3A:  MOVWF  FE9
1D3C:  MOVLW  00
1D3E:  ADDWFC 03,W
1D40:  MOVWF  FEA
1D42:  MOVLW  FF
1D44:  ADDWF  FEF,F
1D46:  BC    1D4C
1D48:  MOVF   FEE,F
1D4A:  DECF   FED,F
.................... 		} else {
1D4C:  BRA    1E82
.................... 			/* timer at zero, ready to power on or already powered on */
.................... 			if ( ! bit_test(channel[c].state,CH_STATE_BIT_CMD_ON) ) {
1D4E:  MOVF   x17,W
1D50:  MULLW  19
1D52:  MOVF   FF3,W
1D54:  CLRF   x1B
1D56:  MOVWF  x1A
1D58:  MOVLW  D6
1D5A:  ADDWF  x1A,W
1D5C:  MOVWF  FE9
1D5E:  MOVLW  00
1D60:  ADDWFC x1B,W
1D62:  MOVWF  FEA
1D64:  MOVFF  FEF,11C
1D68:  BTFSC  x1C.1
1D6A:  BRA    1DE0
.................... 				/* not currently set, so we set it and start the countdown */
.................... 				bit_set(channel[c].state,CH_STATE_BIT_CMD_ON);
1D6C:  MOVF   x17,W
1D6E:  MULLW  19
1D70:  MOVF   FF3,W
1D72:  CLRF   x1B
1D74:  MOVWF  x1A
1D76:  MOVLW  D6
1D78:  ADDWF  x1A,W
1D7A:  MOVWF  01
1D7C:  MOVLW  00
1D7E:  ADDWFC x1B,W
1D80:  MOVFF  01,FE9
1D84:  MOVWF  FEA
1D86:  BSF    FEF.1
.................... 				channel[c].command_on_hold_seconds=config.ch[c].command_on_hold_time;
1D88:  MOVF   x17,W
1D8A:  MULLW  19
1D8C:  MOVF   FF3,W
1D8E:  CLRF   x1B
1D90:  MOVWF  x1A
1D92:  MOVLW  03
1D94:  ADDWF  x1A,W
1D96:  MOVWF  01
1D98:  MOVLW  00
1D9A:  ADDWFC x1B,W
1D9C:  MOVWF  03
1D9E:  MOVF   01,W
1DA0:  ADDLW  D6
1DA2:  MOVWF  01
1DA4:  MOVLW  00
1DA6:  ADDWFC 03,F
1DA8:  MOVFF  03,11B
1DAC:  MOVF   x17,W
1DAE:  MULLW  24
1DB0:  MOVF   FF3,W
1DB2:  CLRF   x1D
1DB4:  MOVWF  x1C
1DB6:  MOVLW  1B
1DB8:  ADDWF  x1C,W
1DBA:  MOVWF  FE9
1DBC:  MOVLW  00
1DBE:  ADDWFC x1D,W
1DC0:  MOVWF  FEA
1DC2:  MOVFF  FEC,03
1DC6:  MOVF   FED,F
1DC8:  MOVFF  FEF,11E
1DCC:  MOVFF  11B,FEA
1DD0:  MOVFF  01,FE9
1DD4:  MOVFF  03,FEC
1DD8:  MOVF   FED,F
1DDA:  MOVFF  11E,FEF
.................... 			} else {
1DDE:  BRA    1E82
.................... 				/* set, so we clear it once countdown has elapsed */
.................... 				if ( 0==channel[c].command_on_hold_seconds ) {
1DE0:  MOVF   x17,W
1DE2:  MULLW  19
1DE4:  MOVF   FF3,W
1DE6:  CLRF   x1B
1DE8:  MOVWF  x1A
1DEA:  MOVLW  03
1DEC:  ADDWF  x1A,W
1DEE:  MOVWF  01
1DF0:  MOVLW  00
1DF2:  ADDWFC x1B,W
1DF4:  MOVWF  03
1DF6:  MOVF   01,W
1DF8:  ADDLW  D6
1DFA:  MOVWF  FE9
1DFC:  MOVLW  00
1DFE:  ADDWFC 03,W
1E00:  MOVWF  FEA
1E02:  MOVFF  FEC,03
1E06:  MOVF   FED,F
1E08:  MOVF   FEF,W
1E0A:  BNZ   1E56
1E0C:  MOVF   03,F
1E0E:  BNZ   1E56
.................... 					/* countdown elapsed, clear the flag and reset the timer */
.................... 					bit_clear(channel[c].state,CH_STATE_BIT_CMD_ON);
1E10:  MOVF   x17,W
1E12:  MULLW  19
1E14:  MOVF   FF3,W
1E16:  CLRF   x1B
1E18:  MOVWF  x1A
1E1A:  MOVLW  D6
1E1C:  ADDWF  x1A,W
1E1E:  MOVWF  01
1E20:  MOVLW  00
1E22:  ADDWFC x1B,W
1E24:  MOVFF  01,FE9
1E28:  MOVWF  FEA
1E2A:  BCF    FEF.1
.................... 					channel[c].command_on_seconds=65535;
1E2C:  MOVF   x17,W
1E2E:  MULLW  19
1E30:  MOVF   FF3,W
1E32:  CLRF   x1B
1E34:  MOVWF  x1A
1E36:  MOVLW  01
1E38:  ADDWF  x1A,W
1E3A:  MOVWF  01
1E3C:  MOVLW  00
1E3E:  ADDWFC x1B,W
1E40:  MOVWF  03
1E42:  MOVF   01,W
1E44:  ADDLW  D6
1E46:  MOVWF  FE9
1E48:  MOVLW  00
1E4A:  ADDWFC 03,W
1E4C:  MOVWF  FEA
1E4E:  SETF   FEC
1E50:  MOVF   FED,F
1E52:  SETF   FEF
.................... 				} else {
1E54:  BRA    1E82
.................... 					channel[c].command_on_hold_seconds--;
1E56:  MOVF   x17,W
1E58:  MULLW  19
1E5A:  MOVF   FF3,W
1E5C:  CLRF   x1B
1E5E:  MOVWF  x1A
1E60:  MOVLW  03
1E62:  ADDWF  x1A,W
1E64:  MOVWF  01
1E66:  MOVLW  00
1E68:  ADDWFC x1B,W
1E6A:  MOVWF  03
1E6C:  MOVF   01,W
1E6E:  ADDLW  D6
1E70:  MOVWF  FE9
1E72:  MOVLW  00
1E74:  ADDWFC 03,W
1E76:  MOVWF  FEA
1E78:  MOVLW  FF
1E7A:  ADDWF  FEF,F
1E7C:  BC    1E82
1E7E:  MOVF   FEE,F
1E80:  DECF   FED,F
.................... 				}
.................... 			}		
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	/* command off. 65535 disables */
.................... 	if ( 65535 != channel[c].command_off_seconds ) {
1E82:  MOVF   x17,W
1E84:  MULLW  19
1E86:  MOVF   FF3,W
1E88:  CLRF   x1B
1E8A:  MOVWF  x1A
1E8C:  MOVLW  05
1E8E:  ADDWF  x1A,W
1E90:  MOVWF  01
1E92:  MOVLW  00
1E94:  ADDWFC x1B,W
1E96:  MOVWF  03
1E98:  MOVF   01,W
1E9A:  ADDLW  D6
1E9C:  MOVWF  FE9
1E9E:  MOVLW  00
1EA0:  ADDWFC 03,W
1EA2:  MOVWF  FEA
1EA4:  MOVFF  FEC,03
1EA8:  MOVF   FED,F
1EAA:  MOVF   FEF,W
1EAC:  SUBLW  FF
1EAE:  BNZ   1EB6
1EB0:  INCFSZ 03,W
1EB2:  BRA    1EB6
1EB4:  BRA    205C
.................... 		if ( channel[c].command_off_seconds > 0 ) {
1EB6:  MOVF   x17,W
1EB8:  MULLW  19
1EBA:  MOVF   FF3,W
1EBC:  CLRF   x1B
1EBE:  MOVWF  x1A
1EC0:  MOVLW  05
1EC2:  ADDWF  x1A,W
1EC4:  MOVWF  01
1EC6:  MOVLW  00
1EC8:  ADDWFC x1B,W
1ECA:  MOVWF  03
1ECC:  MOVF   01,W
1ECE:  ADDLW  D6
1ED0:  MOVWF  FE9
1ED2:  MOVLW  00
1ED4:  ADDWFC 03,W
1ED6:  MOVWF  FEA
1ED8:  MOVFF  FEC,11B
1EDC:  MOVF   FED,F
1EDE:  MOVFF  FEF,11A
1EE2:  MOVF   x1A,F
1EE4:  BNZ   1EEA
1EE6:  MOVF   x1B,F
1EE8:  BZ    1F18
.................... 			/* waiting to power off */
.................... 			channel[c].command_off_seconds--;
1EEA:  MOVF   x17,W
1EEC:  MULLW  19
1EEE:  MOVF   FF3,W
1EF0:  CLRF   x1B
1EF2:  MOVWF  x1A
1EF4:  MOVLW  05
1EF6:  ADDWF  x1A,W
1EF8:  MOVWF  01
1EFA:  MOVLW  00
1EFC:  ADDWFC x1B,W
1EFE:  MOVWF  03
1F00:  MOVF   01,W
1F02:  ADDLW  D6
1F04:  MOVWF  FE9
1F06:  MOVLW  00
1F08:  ADDWFC 03,W
1F0A:  MOVWF  FEA
1F0C:  MOVLW  FF
1F0E:  ADDWF  FEF,F
1F10:  BC    1F16
1F12:  MOVF   FEE,F
1F14:  DECF   FED,F
.................... 		} else {
1F16:  BRA    205C
.................... 			/* timer at zero, ready to power off or already powered off */
.................... 			if ( ! bit_test(channel[c].state,CH_STATE_BIT_CMD_OFF) ) {
1F18:  MOVF   x17,W
1F1A:  MULLW  19
1F1C:  MOVF   FF3,W
1F1E:  CLRF   x1B
1F20:  MOVWF  x1A
1F22:  MOVLW  D6
1F24:  ADDWF  x1A,W
1F26:  MOVWF  FE9
1F28:  MOVLW  00
1F2A:  ADDWFC x1B,W
1F2C:  MOVWF  FEA
1F2E:  MOVFF  FEF,11C
1F32:  BTFSC  x1C.2
1F34:  BRA    1FBA
.................... 				/* not currently set, so we set it and start the countdown */
.................... 				bit_set(channel[c].state,CH_STATE_BIT_CMD_OFF);
1F36:  MOVF   x17,W
1F38:  MULLW  19
1F3A:  MOVF   FF3,W
1F3C:  CLRF   x1B
1F3E:  MOVWF  x1A
1F40:  MOVLW  D6
1F42:  ADDWF  x1A,W
1F44:  MOVWF  01
1F46:  MOVLW  00
1F48:  ADDWFC x1B,W
1F4A:  MOVFF  01,FE9
1F4E:  MOVWF  FEA
1F50:  BSF    FEF.2
.................... 				channel[c].command_off_hold_seconds=config.ch[c].command_off_hold_time;
1F52:  MOVF   x17,W
1F54:  MULLW  19
1F56:  MOVF   FF3,W
1F58:  CLRF   x1B
1F5A:  MOVWF  x1A
1F5C:  MOVLW  07
1F5E:  ADDWF  x1A,W
1F60:  MOVWF  01
1F62:  MOVLW  00
1F64:  ADDWFC x1B,W
1F66:  MOVWF  03
1F68:  MOVF   01,W
1F6A:  ADDLW  D6
1F6C:  MOVWF  01
1F6E:  MOVLW  00
1F70:  ADDWFC 03,F
1F72:  MOVFF  01,11A
1F76:  MOVFF  03,11B
1F7A:  MOVF   x17,W
1F7C:  MULLW  24
1F7E:  MOVF   FF3,W
1F80:  CLRF   x1D
1F82:  MOVWF  x1C
1F84:  MOVLW  02
1F86:  ADDWF  x1C,W
1F88:  MOVWF  01
1F8A:  MOVLW  00
1F8C:  ADDWFC x1D,W
1F8E:  MOVWF  03
1F90:  MOVF   01,W
1F92:  ADDLW  1B
1F94:  MOVWF  FE9
1F96:  MOVLW  00
1F98:  ADDWFC 03,W
1F9A:  MOVWF  FEA
1F9C:  MOVFF  FEC,03
1FA0:  MOVF   FED,F
1FA2:  MOVFF  FEF,11C
1FA6:  MOVFF  11B,FEA
1FAA:  MOVFF  11A,FE9
1FAE:  MOVFF  03,FEC
1FB2:  MOVF   FED,F
1FB4:  MOVFF  11C,FEF
.................... 			} else {
1FB8:  BRA    205C
.................... 				/* set, so we clear it once countdown has elapsed */
.................... 				if ( 0==channel[c].command_off_hold_seconds ) {
1FBA:  MOVF   x17,W
1FBC:  MULLW  19
1FBE:  MOVF   FF3,W
1FC0:  CLRF   x1B
1FC2:  MOVWF  x1A
1FC4:  MOVLW  07
1FC6:  ADDWF  x1A,W
1FC8:  MOVWF  01
1FCA:  MOVLW  00
1FCC:  ADDWFC x1B,W
1FCE:  MOVWF  03
1FD0:  MOVF   01,W
1FD2:  ADDLW  D6
1FD4:  MOVWF  FE9
1FD6:  MOVLW  00
1FD8:  ADDWFC 03,W
1FDA:  MOVWF  FEA
1FDC:  MOVFF  FEC,03
1FE0:  MOVF   FED,F
1FE2:  MOVF   FEF,W
1FE4:  BNZ   2030
1FE6:  MOVF   03,F
1FE8:  BNZ   2030
.................... 					/* countdown elapsed, clear the flag and reset the timer */
.................... 					bit_clear(channel[c].state,CH_STATE_BIT_CMD_OFF);
1FEA:  MOVF   x17,W
1FEC:  MULLW  19
1FEE:  MOVF   FF3,W
1FF0:  CLRF   x1B
1FF2:  MOVWF  x1A
1FF4:  MOVLW  D6
1FF6:  ADDWF  x1A,W
1FF8:  MOVWF  01
1FFA:  MOVLW  00
1FFC:  ADDWFC x1B,W
1FFE:  MOVFF  01,FE9
2002:  MOVWF  FEA
2004:  BCF    FEF.2
.................... 					channel[c].command_off_seconds=65535;
2006:  MOVF   x17,W
2008:  MULLW  19
200A:  MOVF   FF3,W
200C:  CLRF   x1B
200E:  MOVWF  x1A
2010:  MOVLW  05
2012:  ADDWF  x1A,W
2014:  MOVWF  01
2016:  MOVLW  00
2018:  ADDWFC x1B,W
201A:  MOVWF  03
201C:  MOVF   01,W
201E:  ADDLW  D6
2020:  MOVWF  FE9
2022:  MOVLW  00
2024:  ADDWFC 03,W
2026:  MOVWF  FEA
2028:  SETF   FEC
202A:  MOVF   FED,F
202C:  SETF   FEF
.................... 				} else {
202E:  BRA    205C
.................... 					channel[c].command_off_hold_seconds--;
2030:  MOVF   x17,W
2032:  MULLW  19
2034:  MOVF   FF3,W
2036:  CLRF   x1B
2038:  MOVWF  x1A
203A:  MOVLW  07
203C:  ADDWF  x1A,W
203E:  MOVWF  01
2040:  MOVLW  00
2042:  ADDWFC x1B,W
2044:  MOVWF  03
2046:  MOVF   01,W
2048:  ADDLW  D6
204A:  MOVWF  FE9
204C:  MOVLW  00
204E:  ADDWFC 03,W
2050:  MOVWF  FEA
2052:  MOVLW  FF
2054:  ADDWF  FEF,F
2056:  BC    205C
2058:  MOVF   FEE,F
205A:  DECF   FED,F
.................... 				}
.................... 			}		
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	/* LVD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].lvd_disconnect_delay ) {
205C:  MOVF   x17,W
205E:  MULLW  24
2060:  MOVF   FF3,W
2062:  CLRF   x1B
2064:  MOVWF  x1A
2066:  MOVLW  06
2068:  ADDWF  x1A,W
206A:  MOVWF  01
206C:  MOVLW  00
206E:  ADDWFC x1B,W
2070:  MOVWF  03
2072:  MOVF   01,W
2074:  ADDLW  1B
2076:  MOVWF  FE9
2078:  MOVLW  00
207A:  ADDWFC 03,W
207C:  MOVWF  FEA
207E:  MOVFF  FEC,03
2082:  MOVF   FED,F
2084:  MOVF   FEF,W
2086:  SUBLW  FF
2088:  BNZ   2090
208A:  INCFSZ 03,W
208C:  BRA    2090
208E:  BRA    22EE
2090:  CLRF   19
2092:  BTFSC  FF2.7
2094:  BSF    19.7
2096:  BCF    FF2.7
.................... 		adc=adc_get(0);
2098:  CLRF   x2B
209A:  MOVLB  0
209C:  CALL   0594
20A0:  BTFSC  19.7
20A2:  BSF    FF2.7
20A4:  MOVFF  02,119
20A8:  MOVFF  01,118
.................... 
.................... 		if ( adc > config.ch[c].lvd_reconnect_adc ) {
20AC:  MOVLB  1
20AE:  MOVF   x17,W
20B0:  MULLW  24
20B2:  MOVF   FF3,W
20B4:  CLRF   x1B
20B6:  MOVWF  x1A
20B8:  MOVLW  08
20BA:  ADDWF  x1A,W
20BC:  MOVWF  01
20BE:  MOVLW  00
20C0:  ADDWFC x1B,W
20C2:  MOVWF  03
20C4:  MOVF   01,W
20C6:  ADDLW  1B
20C8:  MOVWF  FE9
20CA:  MOVLW  00
20CC:  ADDWFC 03,W
20CE:  MOVWF  FEA
20D0:  MOVFF  FEC,03
20D4:  MOVF   FED,F
20D6:  MOVFF  FEF,01
20DA:  MOVF   03,W
20DC:  SUBWF  x19,W
20DE:  BNC   2168
20E0:  BNZ   20E8
20E2:  MOVF   x18,W
20E4:  SUBWF  01,W
20E6:  BC    2168
.................... 			if ( channel[c].lvd_reconnect_delay_seconds > 0 ) {
20E8:  MOVF   x17,W
20EA:  MULLW  19
20EC:  MOVF   FF3,W
20EE:  CLRF   x1B
20F0:  MOVWF  x1A
20F2:  MOVLW  0B
20F4:  ADDWF  x1A,W
20F6:  MOVWF  01
20F8:  MOVLW  00
20FA:  ADDWFC x1B,W
20FC:  MOVWF  03
20FE:  MOVF   01,W
2100:  ADDLW  D6
2102:  MOVWF  FE9
2104:  MOVLW  00
2106:  ADDWFC 03,W
2108:  MOVWF  FEA
210A:  MOVFF  FEC,11B
210E:  MOVF   FED,F
2110:  MOVFF  FEF,11A
2114:  MOVF   x1A,F
2116:  BNZ   211C
2118:  MOVF   x1B,F
211A:  BZ    214A
.................... 				channel[c].lvd_reconnect_delay_seconds--;
211C:  MOVF   x17,W
211E:  MULLW  19
2120:  MOVF   FF3,W
2122:  CLRF   x1B
2124:  MOVWF  x1A
2126:  MOVLW  0B
2128:  ADDWF  x1A,W
212A:  MOVWF  01
212C:  MOVLW  00
212E:  ADDWFC x1B,W
2130:  MOVWF  03
2132:  MOVF   01,W
2134:  ADDLW  D6
2136:  MOVWF  FE9
2138:  MOVLW  00
213A:  ADDWFC 03,W
213C:  MOVWF  FEA
213E:  MOVLW  FF
2140:  ADDWF  FEF,F
2142:  BC    2148
2144:  MOVF   FEE,F
2146:  DECF   FED,F
.................... 			} else {
2148:  BRA    2166
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_LVD);
214A:  MOVF   x17,W
214C:  MULLW  19
214E:  MOVF   FF3,W
2150:  CLRF   x1B
2152:  MOVWF  x1A
2154:  MOVLW  D6
2156:  ADDWF  x1A,W
2158:  MOVWF  01
215A:  MOVLW  00
215C:  ADDWFC x1B,W
215E:  MOVFF  01,FE9
2162:  MOVWF  FEA
2164:  BCF    FEF.3
.................... 			}
.................... 		} else {
2166:  BRA    21CE
.................... 			channel[c].lvd_reconnect_delay_seconds=config.ch[c].lvd_reconnect_delay;
2168:  MOVF   x17,W
216A:  MULLW  19
216C:  MOVF   FF3,W
216E:  CLRF   x1B
2170:  MOVWF  x1A
2172:  MOVLW  0B
2174:  ADDWF  x1A,W
2176:  MOVWF  01
2178:  MOVLW  00
217A:  ADDWFC x1B,W
217C:  MOVWF  03
217E:  MOVF   01,W
2180:  ADDLW  D6
2182:  MOVWF  01
2184:  MOVLW  00
2186:  ADDWFC 03,F
2188:  MOVFF  01,11A
218C:  MOVFF  03,11B
2190:  MOVF   x17,W
2192:  MULLW  24
2194:  MOVF   FF3,W
2196:  CLRF   x1D
2198:  MOVWF  x1C
219A:  MOVLW  0A
219C:  ADDWF  x1C,W
219E:  MOVWF  01
21A0:  MOVLW  00
21A2:  ADDWFC x1D,W
21A4:  MOVWF  03
21A6:  MOVF   01,W
21A8:  ADDLW  1B
21AA:  MOVWF  FE9
21AC:  MOVLW  00
21AE:  ADDWFC 03,W
21B0:  MOVWF  FEA
21B2:  MOVFF  FEC,03
21B6:  MOVF   FED,F
21B8:  MOVFF  FEF,11C
21BC:  MOVFF  11B,FEA
21C0:  MOVFF  11A,FE9
21C4:  MOVFF  03,FEC
21C8:  MOVF   FED,F
21CA:  MOVFF  11C,FEF
.................... 		}
.................... 
.................... 		if ( adc < config.ch[c].lvd_disconnect_adc ) {
21CE:  MOVF   x17,W
21D0:  MULLW  24
21D2:  MOVF   FF3,W
21D4:  CLRF   x1B
21D6:  MOVWF  x1A
21D8:  MOVLW  04
21DA:  ADDWF  x1A,W
21DC:  MOVWF  01
21DE:  MOVLW  00
21E0:  ADDWFC x1B,W
21E2:  MOVWF  03
21E4:  MOVF   01,W
21E6:  ADDLW  1B
21E8:  MOVWF  FE9
21EA:  MOVLW  00
21EC:  ADDWFC 03,W
21EE:  MOVWF  FEA
21F0:  MOVFF  FEC,03
21F4:  MOVF   FED,F
21F6:  MOVFF  FEF,01
21FA:  MOVF   x19,W
21FC:  SUBWF  03,W
21FE:  BNC   2288
2200:  BNZ   2208
2202:  MOVF   01,W
2204:  SUBWF  x18,W
2206:  BC    2288
.................... 			if ( channel[c].lvd_disconnect_delay_seconds > 0 ) {
2208:  MOVF   x17,W
220A:  MULLW  19
220C:  MOVF   FF3,W
220E:  CLRF   x1B
2210:  MOVWF  x1A
2212:  MOVLW  09
2214:  ADDWF  x1A,W
2216:  MOVWF  01
2218:  MOVLW  00
221A:  ADDWFC x1B,W
221C:  MOVWF  03
221E:  MOVF   01,W
2220:  ADDLW  D6
2222:  MOVWF  FE9
2224:  MOVLW  00
2226:  ADDWFC 03,W
2228:  MOVWF  FEA
222A:  MOVFF  FEC,11B
222E:  MOVF   FED,F
2230:  MOVFF  FEF,11A
2234:  MOVF   x1A,F
2236:  BNZ   223C
2238:  MOVF   x1B,F
223A:  BZ    226A
.................... 				channel[c].lvd_disconnect_delay_seconds--;
223C:  MOVF   x17,W
223E:  MULLW  19
2240:  MOVF   FF3,W
2242:  CLRF   x1B
2244:  MOVWF  x1A
2246:  MOVLW  09
2248:  ADDWF  x1A,W
224A:  MOVWF  01
224C:  MOVLW  00
224E:  ADDWFC x1B,W
2250:  MOVWF  03
2252:  MOVF   01,W
2254:  ADDLW  D6
2256:  MOVWF  FE9
2258:  MOVLW  00
225A:  ADDWFC 03,W
225C:  MOVWF  FEA
225E:  MOVLW  FF
2260:  ADDWF  FEF,F
2262:  BC    2268
2264:  MOVF   FEE,F
2266:  DECF   FED,F
.................... 			} else {
2268:  BRA    2286
.................... 				bit_set(channel[c].state,CH_STATE_BIT_LVD);
226A:  MOVF   x17,W
226C:  MULLW  19
226E:  MOVF   FF3,W
2270:  CLRF   x1B
2272:  MOVWF  x1A
2274:  MOVLW  D6
2276:  ADDWF  x1A,W
2278:  MOVWF  01
227A:  MOVLW  00
227C:  ADDWFC x1B,W
227E:  MOVFF  01,FE9
2282:  MOVWF  FEA
2284:  BSF    FEF.3
.................... 			}
.................... 		} else {
2286:  BRA    22EE
.................... 			channel[c].lvd_disconnect_delay_seconds=config.ch[c].lvd_disconnect_delay;
2288:  MOVF   x17,W
228A:  MULLW  19
228C:  MOVF   FF3,W
228E:  CLRF   x1B
2290:  MOVWF  x1A
2292:  MOVLW  09
2294:  ADDWF  x1A,W
2296:  MOVWF  01
2298:  MOVLW  00
229A:  ADDWFC x1B,W
229C:  MOVWF  03
229E:  MOVF   01,W
22A0:  ADDLW  D6
22A2:  MOVWF  01
22A4:  MOVLW  00
22A6:  ADDWFC 03,F
22A8:  MOVFF  01,11A
22AC:  MOVFF  03,11B
22B0:  MOVF   x17,W
22B2:  MULLW  24
22B4:  MOVF   FF3,W
22B6:  CLRF   x1D
22B8:  MOVWF  x1C
22BA:  MOVLW  06
22BC:  ADDWF  x1C,W
22BE:  MOVWF  01
22C0:  MOVLW  00
22C2:  ADDWFC x1D,W
22C4:  MOVWF  03
22C6:  MOVF   01,W
22C8:  ADDLW  1B
22CA:  MOVWF  FE9
22CC:  MOVLW  00
22CE:  ADDWFC 03,W
22D0:  MOVWF  FEA
22D2:  MOVFF  FEC,03
22D6:  MOVF   FED,F
22D8:  MOVFF  FEF,11C
22DC:  MOVFF  11B,FEA
22E0:  MOVFF  11A,FE9
22E4:  MOVFF  03,FEC
22E8:  MOVF   FED,F
22EA:  MOVFF  11C,FEF
.................... 		}
.................... 	}
.................... 
.................... 	/* HVD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].hvd_disconnect_delay ) {
22EE:  MOVF   x17,W
22F0:  MULLW  24
22F2:  MOVF   FF3,W
22F4:  CLRF   x1B
22F6:  MOVWF  x1A
22F8:  MOVLW  0E
22FA:  ADDWF  x1A,W
22FC:  MOVWF  01
22FE:  MOVLW  00
2300:  ADDWFC x1B,W
2302:  MOVWF  03
2304:  MOVF   01,W
2306:  ADDLW  1B
2308:  MOVWF  FE9
230A:  MOVLW  00
230C:  ADDWFC 03,W
230E:  MOVWF  FEA
2310:  MOVFF  FEC,03
2314:  MOVF   FED,F
2316:  MOVF   FEF,W
2318:  SUBLW  FF
231A:  BNZ   2322
231C:  INCFSZ 03,W
231E:  BRA    2322
2320:  BRA    2580
2322:  CLRF   19
2324:  BTFSC  FF2.7
2326:  BSF    19.7
2328:  BCF    FF2.7
.................... 		adc=adc_get(0);
232A:  CLRF   x2B
232C:  MOVLB  0
232E:  CALL   0594
2332:  BTFSC  19.7
2334:  BSF    FF2.7
2336:  MOVFF  02,119
233A:  MOVFF  01,118
.................... 
.................... 		if ( adc < config.ch[c].hvd_reconnect_adc ) {
233E:  MOVLB  1
2340:  MOVF   x17,W
2342:  MULLW  24
2344:  MOVF   FF3,W
2346:  CLRF   x1B
2348:  MOVWF  x1A
234A:  MOVLW  10
234C:  ADDWF  x1A,W
234E:  MOVWF  01
2350:  MOVLW  00
2352:  ADDWFC x1B,W
2354:  MOVWF  03
2356:  MOVF   01,W
2358:  ADDLW  1B
235A:  MOVWF  FE9
235C:  MOVLW  00
235E:  ADDWFC 03,W
2360:  MOVWF  FEA
2362:  MOVFF  FEC,03
2366:  MOVF   FED,F
2368:  MOVFF  FEF,01
236C:  MOVF   x19,W
236E:  SUBWF  03,W
2370:  BNC   23FA
2372:  BNZ   237A
2374:  MOVF   01,W
2376:  SUBWF  x18,W
2378:  BC    23FA
.................... 			if ( channel[c].hvd_reconnect_delay_seconds > 0 ) {
237A:  MOVF   x17,W
237C:  MULLW  19
237E:  MOVF   FF3,W
2380:  CLRF   x1B
2382:  MOVWF  x1A
2384:  MOVLW  0F
2386:  ADDWF  x1A,W
2388:  MOVWF  01
238A:  MOVLW  00
238C:  ADDWFC x1B,W
238E:  MOVWF  03
2390:  MOVF   01,W
2392:  ADDLW  D6
2394:  MOVWF  FE9
2396:  MOVLW  00
2398:  ADDWFC 03,W
239A:  MOVWF  FEA
239C:  MOVFF  FEC,11B
23A0:  MOVF   FED,F
23A2:  MOVFF  FEF,11A
23A6:  MOVF   x1A,F
23A8:  BNZ   23AE
23AA:  MOVF   x1B,F
23AC:  BZ    23DC
.................... 				channel[c].hvd_reconnect_delay_seconds--;
23AE:  MOVF   x17,W
23B0:  MULLW  19
23B2:  MOVF   FF3,W
23B4:  CLRF   x1B
23B6:  MOVWF  x1A
23B8:  MOVLW  0F
23BA:  ADDWF  x1A,W
23BC:  MOVWF  01
23BE:  MOVLW  00
23C0:  ADDWFC x1B,W
23C2:  MOVWF  03
23C4:  MOVF   01,W
23C6:  ADDLW  D6
23C8:  MOVWF  FE9
23CA:  MOVLW  00
23CC:  ADDWFC 03,W
23CE:  MOVWF  FEA
23D0:  MOVLW  FF
23D2:  ADDWF  FEF,F
23D4:  BC    23DA
23D6:  MOVF   FEE,F
23D8:  DECF   FED,F
.................... 			} else {
23DA:  BRA    23F8
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_HVD);
23DC:  MOVF   x17,W
23DE:  MULLW  19
23E0:  MOVF   FF3,W
23E2:  CLRF   x1B
23E4:  MOVWF  x1A
23E6:  MOVLW  D6
23E8:  ADDWF  x1A,W
23EA:  MOVWF  01
23EC:  MOVLW  00
23EE:  ADDWFC x1B,W
23F0:  MOVFF  01,FE9
23F4:  MOVWF  FEA
23F6:  BCF    FEF.4
.................... 			}
.................... 		} else {
23F8:  BRA    2460
.................... 			channel[c].hvd_reconnect_delay_seconds=config.ch[c].hvd_reconnect_delay;
23FA:  MOVF   x17,W
23FC:  MULLW  19
23FE:  MOVF   FF3,W
2400:  CLRF   x1B
2402:  MOVWF  x1A
2404:  MOVLW  0F
2406:  ADDWF  x1A,W
2408:  MOVWF  01
240A:  MOVLW  00
240C:  ADDWFC x1B,W
240E:  MOVWF  03
2410:  MOVF   01,W
2412:  ADDLW  D6
2414:  MOVWF  01
2416:  MOVLW  00
2418:  ADDWFC 03,F
241A:  MOVFF  01,11A
241E:  MOVFF  03,11B
2422:  MOVF   x17,W
2424:  MULLW  24
2426:  MOVF   FF3,W
2428:  CLRF   x1D
242A:  MOVWF  x1C
242C:  MOVLW  12
242E:  ADDWF  x1C,W
2430:  MOVWF  01
2432:  MOVLW  00
2434:  ADDWFC x1D,W
2436:  MOVWF  03
2438:  MOVF   01,W
243A:  ADDLW  1B
243C:  MOVWF  FE9
243E:  MOVLW  00
2440:  ADDWFC 03,W
2442:  MOVWF  FEA
2444:  MOVFF  FEC,03
2448:  MOVF   FED,F
244A:  MOVFF  FEF,11C
244E:  MOVFF  11B,FEA
2452:  MOVFF  11A,FE9
2456:  MOVFF  03,FEC
245A:  MOVF   FED,F
245C:  MOVFF  11C,FEF
.................... 		}
.................... 
.................... 		if ( adc > config.ch[c].hvd_disconnect_adc ) {
2460:  MOVF   x17,W
2462:  MULLW  24
2464:  MOVF   FF3,W
2466:  CLRF   x1B
2468:  MOVWF  x1A
246A:  MOVLW  0C
246C:  ADDWF  x1A,W
246E:  MOVWF  01
2470:  MOVLW  00
2472:  ADDWFC x1B,W
2474:  MOVWF  03
2476:  MOVF   01,W
2478:  ADDLW  1B
247A:  MOVWF  FE9
247C:  MOVLW  00
247E:  ADDWFC 03,W
2480:  MOVWF  FEA
2482:  MOVFF  FEC,03
2486:  MOVF   FED,F
2488:  MOVFF  FEF,01
248C:  MOVF   03,W
248E:  SUBWF  x19,W
2490:  BNC   251A
2492:  BNZ   249A
2494:  MOVF   x18,W
2496:  SUBWF  01,W
2498:  BC    251A
.................... 			if ( channel[c].hvd_disconnect_delay_seconds > 0 ) {
249A:  MOVF   x17,W
249C:  MULLW  19
249E:  MOVF   FF3,W
24A0:  CLRF   x1B
24A2:  MOVWF  x1A
24A4:  MOVLW  0D
24A6:  ADDWF  x1A,W
24A8:  MOVWF  01
24AA:  MOVLW  00
24AC:  ADDWFC x1B,W
24AE:  MOVWF  03
24B0:  MOVF   01,W
24B2:  ADDLW  D6
24B4:  MOVWF  FE9
24B6:  MOVLW  00
24B8:  ADDWFC 03,W
24BA:  MOVWF  FEA
24BC:  MOVFF  FEC,11B
24C0:  MOVF   FED,F
24C2:  MOVFF  FEF,11A
24C6:  MOVF   x1A,F
24C8:  BNZ   24CE
24CA:  MOVF   x1B,F
24CC:  BZ    24FC
.................... 				channel[c].hvd_disconnect_delay_seconds--;
24CE:  MOVF   x17,W
24D0:  MULLW  19
24D2:  MOVF   FF3,W
24D4:  CLRF   x1B
24D6:  MOVWF  x1A
24D8:  MOVLW  0D
24DA:  ADDWF  x1A,W
24DC:  MOVWF  01
24DE:  MOVLW  00
24E0:  ADDWFC x1B,W
24E2:  MOVWF  03
24E4:  MOVF   01,W
24E6:  ADDLW  D6
24E8:  MOVWF  FE9
24EA:  MOVLW  00
24EC:  ADDWFC 03,W
24EE:  MOVWF  FEA
24F0:  MOVLW  FF
24F2:  ADDWF  FEF,F
24F4:  BC    24FA
24F6:  MOVF   FEE,F
24F8:  DECF   FED,F
.................... 			} else {
24FA:  BRA    2518
.................... 				bit_set(channel[c].state,CH_STATE_BIT_HVD);
24FC:  MOVF   x17,W
24FE:  MULLW  19
2500:  MOVF   FF3,W
2502:  CLRF   x1B
2504:  MOVWF  x1A
2506:  MOVLW  D6
2508:  ADDWF  x1A,W
250A:  MOVWF  01
250C:  MOVLW  00
250E:  ADDWFC x1B,W
2510:  MOVFF  01,FE9
2514:  MOVWF  FEA
2516:  BSF    FEF.4
.................... 			}
.................... 		} else {
2518:  BRA    2580
.................... 			channel[c].hvd_disconnect_delay_seconds=config.ch[c].hvd_disconnect_delay;
251A:  MOVF   x17,W
251C:  MULLW  19
251E:  MOVF   FF3,W
2520:  CLRF   x1B
2522:  MOVWF  x1A
2524:  MOVLW  0D
2526:  ADDWF  x1A,W
2528:  MOVWF  01
252A:  MOVLW  00
252C:  ADDWFC x1B,W
252E:  MOVWF  03
2530:  MOVF   01,W
2532:  ADDLW  D6
2534:  MOVWF  01
2536:  MOVLW  00
2538:  ADDWFC 03,F
253A:  MOVFF  01,11A
253E:  MOVFF  03,11B
2542:  MOVF   x17,W
2544:  MULLW  24
2546:  MOVF   FF3,W
2548:  CLRF   x1D
254A:  MOVWF  x1C
254C:  MOVLW  0E
254E:  ADDWF  x1C,W
2550:  MOVWF  01
2552:  MOVLW  00
2554:  ADDWFC x1D,W
2556:  MOVWF  03
2558:  MOVF   01,W
255A:  ADDLW  1B
255C:  MOVWF  FE9
255E:  MOVLW  00
2560:  ADDWFC 03,W
2562:  MOVWF  FEA
2564:  MOVFF  FEC,03
2568:  MOVF   FED,F
256A:  MOVFF  FEF,11C
256E:  MOVFF  11B,FEA
2572:  MOVFF  11A,FE9
2576:  MOVFF  03,FEC
257A:  MOVF   FED,F
257C:  MOVFF  11C,FEF
.................... 		}
.................... 	}
.................... 
.................... 	/* LTD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].ltd_disconnect_delay ) {
2580:  MOVF   x17,W
2582:  MULLW  24
2584:  MOVF   FF3,W
2586:  CLRF   x1B
2588:  MOVWF  x1A
258A:  MOVLW  16
258C:  ADDWF  x1A,W
258E:  MOVWF  01
2590:  MOVLW  00
2592:  ADDWFC x1B,W
2594:  MOVWF  03
2596:  MOVF   01,W
2598:  ADDLW  1B
259A:  MOVWF  FE9
259C:  MOVLW  00
259E:  ADDWFC 03,W
25A0:  MOVWF  FEA
25A2:  MOVFF  FEC,03
25A6:  MOVF   FED,F
25A8:  MOVF   FEF,W
25AA:  SUBLW  FF
25AC:  BNZ   25B4
25AE:  INCFSZ 03,W
25B0:  BRA    25B4
25B2:  BRA    2814
25B4:  CLRF   19
25B6:  BTFSC  FF2.7
25B8:  BSF    19.7
25BA:  BCF    FF2.7
.................... 		adc=adc_get(1);
25BC:  MOVLW  01
25BE:  MOVWF  x2B
25C0:  MOVLB  0
25C2:  CALL   0594
25C6:  BTFSC  19.7
25C8:  BSF    FF2.7
25CA:  MOVFF  02,119
25CE:  MOVFF  01,118
.................... 
.................... 		if ( adc < config.ch[c].ltd_reconnect_adc ) {
25D2:  MOVLB  1
25D4:  MOVF   x17,W
25D6:  MULLW  24
25D8:  MOVF   FF3,W
25DA:  CLRF   x1B
25DC:  MOVWF  x1A
25DE:  MOVLW  18
25E0:  ADDWF  x1A,W
25E2:  MOVWF  01
25E4:  MOVLW  00
25E6:  ADDWFC x1B,W
25E8:  MOVWF  03
25EA:  MOVF   01,W
25EC:  ADDLW  1B
25EE:  MOVWF  FE9
25F0:  MOVLW  00
25F2:  ADDWFC 03,W
25F4:  MOVWF  FEA
25F6:  MOVFF  FEC,03
25FA:  MOVF   FED,F
25FC:  MOVFF  FEF,01
2600:  MOVF   x19,W
2602:  SUBWF  03,W
2604:  BNC   268E
2606:  BNZ   260E
2608:  MOVF   01,W
260A:  SUBWF  x18,W
260C:  BC    268E
.................... 			if ( channel[c].ltd_reconnect_delay_seconds > 0 ) {
260E:  MOVF   x17,W
2610:  MULLW  19
2612:  MOVF   FF3,W
2614:  CLRF   x1B
2616:  MOVWF  x1A
2618:  MOVLW  13
261A:  ADDWF  x1A,W
261C:  MOVWF  01
261E:  MOVLW  00
2620:  ADDWFC x1B,W
2622:  MOVWF  03
2624:  MOVF   01,W
2626:  ADDLW  D6
2628:  MOVWF  FE9
262A:  MOVLW  00
262C:  ADDWFC 03,W
262E:  MOVWF  FEA
2630:  MOVFF  FEC,11B
2634:  MOVF   FED,F
2636:  MOVFF  FEF,11A
263A:  MOVF   x1A,F
263C:  BNZ   2642
263E:  MOVF   x1B,F
2640:  BZ    2670
.................... 				channel[c].ltd_reconnect_delay_seconds--;
2642:  MOVF   x17,W
2644:  MULLW  19
2646:  MOVF   FF3,W
2648:  CLRF   x1B
264A:  MOVWF  x1A
264C:  MOVLW  13
264E:  ADDWF  x1A,W
2650:  MOVWF  01
2652:  MOVLW  00
2654:  ADDWFC x1B,W
2656:  MOVWF  03
2658:  MOVF   01,W
265A:  ADDLW  D6
265C:  MOVWF  FE9
265E:  MOVLW  00
2660:  ADDWFC 03,W
2662:  MOVWF  FEA
2664:  MOVLW  FF
2666:  ADDWF  FEF,F
2668:  BC    266E
266A:  MOVF   FEE,F
266C:  DECF   FED,F
.................... 			} else {
266E:  BRA    268C
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_LTD);
2670:  MOVF   x17,W
2672:  MULLW  19
2674:  MOVF   FF3,W
2676:  CLRF   x1B
2678:  MOVWF  x1A
267A:  MOVLW  D6
267C:  ADDWF  x1A,W
267E:  MOVWF  01
2680:  MOVLW  00
2682:  ADDWFC x1B,W
2684:  MOVFF  01,FE9
2688:  MOVWF  FEA
268A:  BCF    FEF.5
.................... 			}
.................... 		} else {
268C:  BRA    26F4
.................... 			channel[c].ltd_reconnect_delay_seconds=config.ch[c].ltd_reconnect_delay;
268E:  MOVF   x17,W
2690:  MULLW  19
2692:  MOVF   FF3,W
2694:  CLRF   x1B
2696:  MOVWF  x1A
2698:  MOVLW  13
269A:  ADDWF  x1A,W
269C:  MOVWF  01
269E:  MOVLW  00
26A0:  ADDWFC x1B,W
26A2:  MOVWF  03
26A4:  MOVF   01,W
26A6:  ADDLW  D6
26A8:  MOVWF  01
26AA:  MOVLW  00
26AC:  ADDWFC 03,F
26AE:  MOVFF  01,11A
26B2:  MOVFF  03,11B
26B6:  MOVF   x17,W
26B8:  MULLW  24
26BA:  MOVF   FF3,W
26BC:  CLRF   x1D
26BE:  MOVWF  x1C
26C0:  MOVLW  1A
26C2:  ADDWF  x1C,W
26C4:  MOVWF  01
26C6:  MOVLW  00
26C8:  ADDWFC x1D,W
26CA:  MOVWF  03
26CC:  MOVF   01,W
26CE:  ADDLW  1B
26D0:  MOVWF  FE9
26D2:  MOVLW  00
26D4:  ADDWFC 03,W
26D6:  MOVWF  FEA
26D8:  MOVFF  FEC,03
26DC:  MOVF   FED,F
26DE:  MOVFF  FEF,11C
26E2:  MOVFF  11B,FEA
26E6:  MOVFF  11A,FE9
26EA:  MOVFF  03,FEC
26EE:  MOVF   FED,F
26F0:  MOVFF  11C,FEF
.................... 		}
.................... 
.................... 		if ( adc > config.ch[c].ltd_disconnect_adc ) {
26F4:  MOVF   x17,W
26F6:  MULLW  24
26F8:  MOVF   FF3,W
26FA:  CLRF   x1B
26FC:  MOVWF  x1A
26FE:  MOVLW  14
2700:  ADDWF  x1A,W
2702:  MOVWF  01
2704:  MOVLW  00
2706:  ADDWFC x1B,W
2708:  MOVWF  03
270A:  MOVF   01,W
270C:  ADDLW  1B
270E:  MOVWF  FE9
2710:  MOVLW  00
2712:  ADDWFC 03,W
2714:  MOVWF  FEA
2716:  MOVFF  FEC,03
271A:  MOVF   FED,F
271C:  MOVFF  FEF,01
2720:  MOVF   03,W
2722:  SUBWF  x19,W
2724:  BNC   27AE
2726:  BNZ   272E
2728:  MOVF   x18,W
272A:  SUBWF  01,W
272C:  BC    27AE
.................... 			if ( channel[c].ltd_disconnect_delay_seconds > 0 ) {
272E:  MOVF   x17,W
2730:  MULLW  19
2732:  MOVF   FF3,W
2734:  CLRF   x1B
2736:  MOVWF  x1A
2738:  MOVLW  11
273A:  ADDWF  x1A,W
273C:  MOVWF  01
273E:  MOVLW  00
2740:  ADDWFC x1B,W
2742:  MOVWF  03
2744:  MOVF   01,W
2746:  ADDLW  D6
2748:  MOVWF  FE9
274A:  MOVLW  00
274C:  ADDWFC 03,W
274E:  MOVWF  FEA
2750:  MOVFF  FEC,11B
2754:  MOVF   FED,F
2756:  MOVFF  FEF,11A
275A:  MOVF   x1A,F
275C:  BNZ   2762
275E:  MOVF   x1B,F
2760:  BZ    2790
.................... 				channel[c].ltd_disconnect_delay_seconds--;
2762:  MOVF   x17,W
2764:  MULLW  19
2766:  MOVF   FF3,W
2768:  CLRF   x1B
276A:  MOVWF  x1A
276C:  MOVLW  11
276E:  ADDWF  x1A,W
2770:  MOVWF  01
2772:  MOVLW  00
2774:  ADDWFC x1B,W
2776:  MOVWF  03
2778:  MOVF   01,W
277A:  ADDLW  D6
277C:  MOVWF  FE9
277E:  MOVLW  00
2780:  ADDWFC 03,W
2782:  MOVWF  FEA
2784:  MOVLW  FF
2786:  ADDWF  FEF,F
2788:  BC    278E
278A:  MOVF   FEE,F
278C:  DECF   FED,F
.................... 			} else {
278E:  BRA    27AC
.................... 				bit_set(channel[c].state,CH_STATE_BIT_LTD);
2790:  MOVF   x17,W
2792:  MULLW  19
2794:  MOVF   FF3,W
2796:  CLRF   x1B
2798:  MOVWF  x1A
279A:  MOVLW  D6
279C:  ADDWF  x1A,W
279E:  MOVWF  01
27A0:  MOVLW  00
27A2:  ADDWFC x1B,W
27A4:  MOVFF  01,FE9
27A8:  MOVWF  FEA
27AA:  BSF    FEF.5
.................... 			}
.................... 		} else {
27AC:  BRA    2814
.................... 			channel[c].ltd_disconnect_delay_seconds=config.ch[c].ltd_disconnect_delay;
27AE:  MOVF   x17,W
27B0:  MULLW  19
27B2:  MOVF   FF3,W
27B4:  CLRF   x1B
27B6:  MOVWF  x1A
27B8:  MOVLW  11
27BA:  ADDWF  x1A,W
27BC:  MOVWF  01
27BE:  MOVLW  00
27C0:  ADDWFC x1B,W
27C2:  MOVWF  03
27C4:  MOVF   01,W
27C6:  ADDLW  D6
27C8:  MOVWF  01
27CA:  MOVLW  00
27CC:  ADDWFC 03,F
27CE:  MOVFF  01,11A
27D2:  MOVFF  03,11B
27D6:  MOVF   x17,W
27D8:  MULLW  24
27DA:  MOVF   FF3,W
27DC:  CLRF   x1D
27DE:  MOVWF  x1C
27E0:  MOVLW  16
27E2:  ADDWF  x1C,W
27E4:  MOVWF  01
27E6:  MOVLW  00
27E8:  ADDWFC x1D,W
27EA:  MOVWF  03
27EC:  MOVF   01,W
27EE:  ADDLW  1B
27F0:  MOVWF  FE9
27F2:  MOVLW  00
27F4:  ADDWFC 03,W
27F6:  MOVWF  FEA
27F8:  MOVFF  FEC,03
27FC:  MOVF   FED,F
27FE:  MOVFF  FEF,11C
2802:  MOVFF  11B,FEA
2806:  MOVFF  11A,FE9
280A:  MOVFF  03,FEC
280E:  MOVF   FED,F
2810:  MOVFF  11C,FEF
.................... 		}
.................... 	}
2814:  MOVLB  0
2816:  RETURN 0
.................... 
.................... 
.................... 	/* TODO: implement High Temperature Disconnect (HTD) */
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void periodic_millisecond(void) {
.................... 	static int8 uptimeticks=0;
.................... 	static int16 adcTicks=0;
.................... 	static int16 ticks=0;
.................... 
.................... 
.................... 	timers.now_millisecond=0;
*
2926:  BCF    xCF.2
.................... 
.................... 	/* LED control */
.................... 	if ( 0==timers.led_on_a ) {
2928:  MOVF   xD0,F
292A:  BNZ   2932
.................... 		output_low(LED_A);
292C:  BCF    F94.1
292E:  BCF    F8B.1
.................... 	} else {
2930:  BRA    2938
.................... 		output_high(LED_A);
2932:  BCF    F94.1
2934:  BSF    F8B.1
.................... 		timers.led_on_a--;
2936:  DECF   xD0,F
.................... 	}
.................... 	if ( 0==timers.led_on_b ) {
2938:  MOVF   xD1,F
293A:  BNZ   2942
.................... 		output_low(LED_B);
293C:  BCF    F94.2
293E:  BCF    F8B.2
.................... 	} else {
2940:  BRA    2948
.................... 		output_high(LED_B);
2942:  BCF    F94.2
2944:  BSF    F8B.2
.................... 		timers.led_on_b--;
2946:  DECF   xD1,F
.................... 	}
.................... 
.................... 	/* some other random stuff that we don't need to do every cycle in main */
.................... 	if ( current.interval_milliseconds < 65535 ) {
2948:  INCFSZ xC8,W
294A:  BRA    2952
294C:  INCFSZ xC9,W
294E:  BRA    2952
2950:  BRA    2958
.................... 		current.interval_milliseconds++;
2952:  INCF   xC8,F
2954:  BTFSC  FD8.2
2956:  INCF   xC9,F
.................... 	}
.................... 
.................... 
.................... 	/* contactor timeout */
.................... 	if ( 0 == timers.contactor_powersave[0] ) {
2958:  MOVF   xD4,F
295A:  BNZ   2966
.................... 		output_low(BRIDGE_A_A);
295C:  BCF    F94.3
295E:  BCF    F8B.3
.................... 		output_low(BRIDGE_A_B);
2960:  BCF    F94.4
2962:  BCF    F8B.4
.................... 	} else {
2964:  BRA    2968
.................... 		timers.contactor_powersave[0]--;
2966:  DECF   xD4,F
.................... 	}
.................... 	if ( 0 == timers.contactor_powersave[1] ) {
2968:  MOVF   xD5,F
296A:  BNZ   2976
.................... 		output_low(BRIDGE_B_A);
296C:  BCF    F94.5
296E:  BCF    F8B.5
.................... 		output_low(BRIDGE_B_B);
2970:  BCF    F94.6
2972:  BCF    F8B.6
.................... 	} else {
2974:  BRA    2978
.................... 		timers.contactor_powersave[1]--;
2976:  DECF   xD5,F
.................... 	}
.................... 
.................... 
.................... 
.................... 
.................... 	/* seconds */
.................... 	ticks++;
2978:  MOVLB  1
297A:  INCF   x12,F
297C:  BTFSC  FD8.2
297E:  INCF   x13,F
.................... 	if ( 1000 == ticks ) {
2980:  MOVF   x12,W
2982:  SUBLW  E8
2984:  BNZ   29D6
2986:  MOVF   x13,W
2988:  SUBLW  03
298A:  BNZ   29D6
.................... 		ticks=0;
298C:  CLRF   x13
298E:  CLRF   x12
.................... 
.................... 		/* set channe[n].state based on logic */
.................... 		contactor_logic(0);
2990:  CLRF   x17
2992:  MOVLB  0
2994:  CALL   1C68
.................... 		contactor_logic(1);
2998:  MOVLW  01
299A:  MOVLB  1
299C:  MOVWF  x17
299E:  MOVLB  0
29A0:  CALL   1C68
.................... 
.................... 		/* set contactor outputs based on their state bit field */
.................... 		contactor_set(0);
29A4:  MOVLB  1
29A6:  CLRF   x17
29A8:  MOVLB  0
29AA:  RCALL  28C4
.................... 		contactor_set(1);		
29AC:  MOVLW  01
29AE:  MOVLB  1
29B0:  MOVWF  x17
29B2:  MOVLB  0
29B4:  RCALL  28C4
.................... 
.................... 		/* uptime counter */
.................... 		uptimeTicks++;
29B6:  MOVLB  1
29B8:  INCF   x0F,F
.................... 		if ( 60 == uptimeTicks ) {
29BA:  MOVF   x0F,W
29BC:  SUBLW  3C
29BE:  BNZ   29D6
.................... 			uptimeTicks=0;
29C0:  CLRF   x0F
.................... 			if ( current.uptime_minutes < 65535 ) 
29C2:  MOVLB  0
29C4:  INCFSZ xC6,W
29C6:  BRA    29CE
29C8:  INCFSZ xC7,W
29CA:  BRA    29CE
29CC:  BRA    29D4
.................... 				current.uptime_minutes++;
29CE:  INCF   xC6,F
29D0:  BTFSC  FD8.2
29D2:  INCF   xC7,F
29D4:  MOVLB  1
.................... 		}
.................... 	}
.................... 
.................... 	/* ADC sample counter */
.................... 	if ( timers.now_adc_reset_count ) {
29D6:  MOVLB  0
29D8:  BTFSS  xCF.1
29DA:  BRA    29E6
.................... 		timers.now_adc_reset_count=0;
29DC:  BCF    xCF.1
.................... 		adcTicks=0;
29DE:  MOVLB  1
29E0:  CLRF   x11
29E2:  CLRF   x10
29E4:  MOVLB  0
.................... 	}
.................... 
.................... 	/* ADC sampling trigger */
.................... 	adcTicks++;
29E6:  MOVLB  1
29E8:  INCF   x10,F
29EA:  BTFSC  FD8.2
29EC:  INCF   x11,F
.................... 	if ( ADC_SAMPLE_TICKS == adcTicks ) {
29EE:  MOVF   x10,W
29F0:  SUBLW  14
29F2:  BNZ   2A02
29F4:  MOVF   x11,F
29F6:  BNZ   2A02
.................... 		adcTicks=0;
29F8:  CLRF   x11
29FA:  CLRF   x10
.................... 		timers.now_adc_sample=1;
29FC:  MOVLB  0
29FE:  BSF    xCF.0
2A00:  MOVLB  1
.................... 	}
2A02:  MOVLB  0
2A04:  GOTO   3ACC (RETURN)
.................... 
.................... }
.................... 
.................... void init(void) {
.................... 	int8 i;
.................... 	int8 buff[10];
.................... 	setup_oscillator(OSC_16MHZ);
*
1544:  MOVLW  70
1546:  MOVWF  FD3
1548:  BCF    F9B.6
154A:  BCF    F9B.7
.................... 
.................... 	setup_adc(ADC_CLOCK_DIV_16);
154C:  MOVF   FC0,W
154E:  ANDLW  C0
1550:  IORLW  05
1552:  MOVWF  FC0
1554:  BSF    FC0.7
1556:  BSF    FC2.0
.................... 	/* NTC thermistor on sAN2, input voltage divider on sAN4, DIP switch analog on sAN9
.................... 	voltage spans between 0 and Vdd */
.................... 	setup_adc_ports(sAN2 | sAN4 | sAN9,VSS_VDD);
1558:  MOVLW  14
155A:  MOVWF  F7E
155C:  BCF    FC1.0
155E:  BCF    FC1.1
1560:  BCF    FC1.2
1562:  BCF    FC1.3
1564:  MOVLW  02
1566:  MOVWF  F7F
.................... 
.................... 	setup_wdt(WDT_512MS);
1568:  BSF    FD1.0
.................... 
.................... 	set_tris_a(0b00111111);
156A:  MOVLW  3F
156C:  MOVWF  F92
.................... 	set_tris_b(0b01110000);
156E:  MOVLW  70
1570:  MOVWF  F93
.................... 	set_tris_c(0b10000001);
1572:  MOVLW  81
1574:  MOVWF  F94
.................... //               76543210
.................... 
.................... 	port_a_pullups(0b00110000);
1576:  MOVLW  30
1578:  MOVWF  F77
157A:  BCF    FF1.7
.................... 	port_b_pullups(0b00000000);
157C:  CLRF   F78
.................... //                   76543210
.................... 
.................... 	/* data structure initialization */
.................... 	/* all initialized to 0 on declaration. Just do this if need non-zero */
.................... 	for ( i=0 ; i<=1 ; i++ ) {
157E:  MOVLB  1
1580:  CLRF   x17
1582:  MOVF   x17,W
1584:  SUBLW  01
1586:  BNC   15DC
.................... 		channel[i].command_off_seconds=65535;
1588:  MOVF   x17,W
158A:  MULLW  19
158C:  MOVF   FF3,W
158E:  CLRF   x23
1590:  MOVWF  x22
1592:  MOVLW  05
1594:  ADDWF  x22,W
1596:  MOVWF  01
1598:  MOVLW  00
159A:  ADDWFC x23,W
159C:  MOVWF  03
159E:  MOVF   01,W
15A0:  ADDLW  D6
15A2:  MOVWF  FE9
15A4:  MOVLW  00
15A6:  ADDWFC 03,W
15A8:  MOVWF  FEA
15AA:  SETF   FEC
15AC:  MOVF   FED,F
15AE:  SETF   FEF
.................... 		channel[i].command_on_seconds =65535;
15B0:  MOVF   x17,W
15B2:  MULLW  19
15B4:  MOVF   FF3,W
15B6:  CLRF   x23
15B8:  MOVWF  x22
15BA:  MOVLW  01
15BC:  ADDWF  x22,W
15BE:  MOVWF  01
15C0:  MOVLW  00
15C2:  ADDWFC x23,W
15C4:  MOVWF  03
15C6:  MOVF   01,W
15C8:  ADDLW  D6
15CA:  MOVWF  FE9
15CC:  MOVLW  00
15CE:  ADDWFC 03,W
15D0:  MOVWF  FEA
15D2:  SETF   FEC
15D4:  MOVF   FED,F
15D6:  SETF   FEF
15D8:  INCF   x17,F
15DA:  BRA    1582
.................... 	}
.................... 
.................... 	/* get our compiled date from constant  
.................... 	'5-Feb-22'
.................... 	 01234567
.................... 
.................... 	'25-Feb-22'
.................... 	 012345678
.................... 	*/
.................... 	strcpy(buff,__DATE__);
15DC:  MOVLW  01
15DE:  MOVWF  FEA
15E0:  MOVLW  18
15E2:  MOVWF  FE9
15E4:  MOVLW  00
15E6:  MOVLB  0
15E8:  CALL   00BA
15EC:  TBLRD*-
15EE:  TBLRD*+
15F0:  MOVF   FF5,W
15F2:  MOVWF  FEE
15F4:  IORLW  00
15F6:  BNZ   15EE
.................... 	i=0;
15F8:  MOVLB  1
15FA:  CLRF   x17
.................... 	if ( '-' != buff[1] ) {
15FC:  MOVF   x19,W
15FE:  SUBLW  2D
1600:  BZ    1620
.................... 		/* day can be one or two digits */
.................... 		current.compile_day =(buff[i]-'0')*10;
1602:  CLRF   03
1604:  MOVF   x17,W
1606:  ADDLW  18
1608:  MOVWF  FE9
160A:  MOVLW  01
160C:  ADDWFC 03,W
160E:  MOVWF  FEA
1610:  MOVLW  30
1612:  SUBWF  FEF,W
1614:  MULLW  0A
1616:  MOVFF  FF3,CD
161A:  MOVLB  0
.................... 		i++;
161C:  MOVLB  1
161E:  INCF   x17,F
.................... 	}
.................... 	current.compile_day+=(buff[i]-'0');
1620:  CLRF   03
1622:  MOVF   x17,W
1624:  ADDLW  18
1626:  MOVWF  FE9
1628:  MOVLW  01
162A:  ADDWFC 03,W
162C:  MOVWF  FEA
162E:  MOVLW  30
1630:  SUBWF  FEF,W
1632:  MOVLB  0
1634:  ADDWF  xCD,F
.................... 	i+=2; /* now points to month */
1636:  MOVLW  02
1638:  MOVLB  1
163A:  ADDWF  x17,F
.................... 
.................... 	/* determine month ... how annoying */
.................... 	if ( 'J'==buff[i+0] ) {
163C:  CLRF   03
163E:  MOVF   x17,W
1640:  ADDLW  18
1642:  MOVWF  FE9
1644:  MOVLW  01
1646:  ADDWFC 03,W
1648:  MOVWF  FEA
164A:  MOVF   FEF,W
164C:  SUBLW  4A
164E:  BNZ   169A
.................... 		if ( 'A'==buff[i+1] )
1650:  MOVLW  01
1652:  ADDWF  x17,W
1654:  CLRF   03
1656:  ADDLW  18
1658:  MOVWF  FE9
165A:  MOVLW  01
165C:  ADDWFC 03,W
165E:  MOVWF  FEA
1660:  MOVF   FEF,W
1662:  SUBLW  41
1664:  BNZ   1670
.................... 			current.compile_month=1;
1666:  MOVLW  01
1668:  MOVLB  0
166A:  MOVWF  xCC
166C:  BRA    1696
166E:  MOVLB  1
.................... 		else if ( 'N'==buff[i+2] )
1670:  MOVLW  02
1672:  ADDWF  x17,W
1674:  CLRF   03
1676:  ADDLW  18
1678:  MOVWF  FE9
167A:  MOVLW  01
167C:  ADDWFC 03,W
167E:  MOVWF  FEA
1680:  MOVF   FEF,W
1682:  SUBLW  4E
1684:  BNZ   1690
.................... 			current.compile_month=6;
1686:  MOVLW  06
1688:  MOVLB  0
168A:  MOVWF  xCC
168C:  BRA    1696
168E:  MOVLB  1
.................... 		else
.................... 			current.compile_month=7;
1690:  MOVLW  07
1692:  MOVLB  0
1694:  MOVWF  xCC
.................... 	} else if ( 'A'==buff[i+0] ) {
1696:  BRA    17B0
1698:  MOVLB  1
169A:  CLRF   03
169C:  MOVF   x17,W
169E:  ADDLW  18
16A0:  MOVWF  FE9
16A2:  MOVLW  01
16A4:  ADDWFC 03,W
16A6:  MOVWF  FEA
16A8:  MOVF   FEF,W
16AA:  SUBLW  41
16AC:  BNZ   16D8
.................... 		if ( 'P'==buff[i+1] )
16AE:  MOVLW  01
16B0:  ADDWF  x17,W
16B2:  CLRF   03
16B4:  ADDLW  18
16B6:  MOVWF  FE9
16B8:  MOVLW  01
16BA:  ADDWFC 03,W
16BC:  MOVWF  FEA
16BE:  MOVF   FEF,W
16C0:  SUBLW  50
16C2:  BNZ   16CE
.................... 			current.compile_month=4;
16C4:  MOVLW  04
16C6:  MOVLB  0
16C8:  MOVWF  xCC
16CA:  BRA    16D4
16CC:  MOVLB  1
.................... 		else
.................... 			current.compile_month=8;
16CE:  MOVLW  08
16D0:  MOVLB  0
16D2:  MOVWF  xCC
.................... 	} else if ( 'M'==buff[i+0] ) {
16D4:  BRA    17B0
16D6:  MOVLB  1
16D8:  CLRF   03
16DA:  MOVF   x17,W
16DC:  ADDLW  18
16DE:  MOVWF  FE9
16E0:  MOVLW  01
16E2:  ADDWFC 03,W
16E4:  MOVWF  FEA
16E6:  MOVF   FEF,W
16E8:  SUBLW  4D
16EA:  BNZ   1716
.................... 		if ( 'R'==buff[i+2] )
16EC:  MOVLW  02
16EE:  ADDWF  x17,W
16F0:  CLRF   03
16F2:  ADDLW  18
16F4:  MOVWF  FE9
16F6:  MOVLW  01
16F8:  ADDWFC 03,W
16FA:  MOVWF  FEA
16FC:  MOVF   FEF,W
16FE:  SUBLW  52
1700:  BNZ   170C
.................... 			current.compile_month=3;
1702:  MOVLW  03
1704:  MOVLB  0
1706:  MOVWF  xCC
1708:  BRA    1712
170A:  MOVLB  1
.................... 		else
.................... 			current.compile_month=5;
170C:  MOVLW  05
170E:  MOVLB  0
1710:  MOVWF  xCC
.................... 	} else if ( 'F'==buff[i+0] ) {
1712:  BRA    17B0
1714:  MOVLB  1
1716:  CLRF   03
1718:  MOVF   x17,W
171A:  ADDLW  18
171C:  MOVWF  FE9
171E:  MOVLW  01
1720:  ADDWFC 03,W
1722:  MOVWF  FEA
1724:  MOVF   FEF,W
1726:  SUBLW  46
1728:  BNZ   1734
.................... 		current.compile_month=2;
172A:  MOVLW  02
172C:  MOVLB  0
172E:  MOVWF  xCC
.................... 	} else if ( 'S'==buff[i+0] ) {
1730:  BRA    17B0
1732:  MOVLB  1
1734:  CLRF   03
1736:  MOVF   x17,W
1738:  ADDLW  18
173A:  MOVWF  FE9
173C:  MOVLW  01
173E:  ADDWFC 03,W
1740:  MOVWF  FEA
1742:  MOVF   FEF,W
1744:  SUBLW  53
1746:  BNZ   1752
.................... 		current.compile_month=9;
1748:  MOVLW  09
174A:  MOVLB  0
174C:  MOVWF  xCC
.................... 	} else if ( 'O'==buff[i+0] ) {
174E:  BRA    17B0
1750:  MOVLB  1
1752:  CLRF   03
1754:  MOVF   x17,W
1756:  ADDLW  18
1758:  MOVWF  FE9
175A:  MOVLW  01
175C:  ADDWFC 03,W
175E:  MOVWF  FEA
1760:  MOVF   FEF,W
1762:  SUBLW  4F
1764:  BNZ   1770
.................... 		current.compile_month=10;
1766:  MOVLW  0A
1768:  MOVLB  0
176A:  MOVWF  xCC
.................... 	} else if ( 'N'==buff[i+0] ) {
176C:  BRA    17B0
176E:  MOVLB  1
1770:  CLRF   03
1772:  MOVF   x17,W
1774:  ADDLW  18
1776:  MOVWF  FE9
1778:  MOVLW  01
177A:  ADDWFC 03,W
177C:  MOVWF  FEA
177E:  MOVF   FEF,W
1780:  SUBLW  4E
1782:  BNZ   178E
.................... 		current.compile_month=11;
1784:  MOVLW  0B
1786:  MOVLB  0
1788:  MOVWF  xCC
.................... 	} else if ( 'D'==buff[i+0] ) {
178A:  BRA    17B0
178C:  MOVLB  1
178E:  CLRF   03
1790:  MOVF   x17,W
1792:  ADDLW  18
1794:  MOVWF  FE9
1796:  MOVLW  01
1798:  ADDWFC 03,W
179A:  MOVWF  FEA
179C:  MOVF   FEF,W
179E:  SUBLW  44
17A0:  BNZ   17AC
.................... 		current.compile_month=12;
17A2:  MOVLW  0C
17A4:  MOVLB  0
17A6:  MOVWF  xCC
.................... 	} else {
17A8:  BRA    17B0
17AA:  MOVLB  1
.................... 		/* error parsing, shouldn't happen */
.................... 		current.compile_month=255;
17AC:  MOVLB  0
17AE:  SETF   xCC
.................... 	}
.................... 	current.compile_year =(buff[i+4]-'0')*10;
17B0:  MOVLW  04
17B2:  MOVLB  1
17B4:  ADDWF  x17,W
17B6:  CLRF   03
17B8:  ADDLW  18
17BA:  MOVWF  FE9
17BC:  MOVLW  01
17BE:  ADDWFC 03,W
17C0:  MOVWF  FEA
17C2:  MOVLW  30
17C4:  SUBWF  FEF,W
17C6:  MULLW  0A
17C8:  MOVFF  FF3,CB
17CC:  MOVLB  0
.................... 	current.compile_year+=(buff[i+5]-'0');
17CE:  MOVLW  05
17D0:  MOVLB  1
17D2:  ADDWF  x17,W
17D4:  CLRF   03
17D6:  ADDLW  18
17D8:  MOVWF  FE9
17DA:  MOVLW  01
17DC:  ADDWFC 03,W
17DE:  MOVWF  FEA
17E0:  MOVLW  30
17E2:  SUBWF  FEF,W
17E4:  MOVLB  0
17E6:  ADDWF  xCB,F
.................... 
.................... 
.................... 	/* one periodic interrupt @ 1mS. Generated from system 16 MHz clock */
.................... 	/* prescale=16, match=249, postscale=1. Match is 249 because when match occurs, one cycle is lost */
.................... 	setup_timer_2(T2_DIV_BY_16,249,1);
17E8:  MOVLW  00
17EA:  IORLW  06
17EC:  MOVWF  FCA
17EE:  MOVLW  F9
17F0:  MOVWF  FCB
.................... 
.................... 	enable_interrupts(INT_TIMER2);
17F2:  BSF    F9D.1
.................... 
.................... 	/* set I2C slave address, which is always an even number */
.................... 	i2c_slaveaddr(STREAM_SLAVE,0x3e + (read_dip_switch()<<1) );
17F4:  BRA    14D2
17F6:  BCF    FD8.0
17F8:  RLCF   01,W
17FA:  ADDLW  3E
17FC:  MOVLB  1
17FE:  MOVWF  FC8
1800:  MOVLB  0
1802:  GOTO   3982 (RETURN)
.................... }
.................... 
.................... 
.................... void main(void) {
*
38F0:  CLRF   FF8
38F2:  BCF    FD0.7
38F4:  BSF    07.7
38F6:  BSF    F93.6
38F8:  BSF    F93.4
38FA:  CLRF   FC8
38FC:  MOVLW  36
38FE:  MOVWF  FC6
3900:  BSF    FC5.0
3902:  BSF    FC5.7
3904:  CLRF   1A
3906:  BSF    FB8.3
3908:  MOVLW  A0
390A:  MOVWF  FAF
390C:  MOVLW  01
390E:  MOVWF  FB0
3910:  MOVLW  A6
3912:  MOVWF  FAC
3914:  MOVLW  90
3916:  MOVWF  FAB
3918:  MOVLB  1
391A:  CLRF   x0E
391C:  CLRF   x0D
391E:  MOVLW  00
3920:  MOVWF  F7E
3922:  BCF    FC1.0
3924:  BCF    FC1.1
3926:  BCF    FC1.2
3928:  BCF    FC1.3
392A:  MOVWF  F7F
392C:  CLRF   F6C
392E:  CLRF   F6B
3930:  CLRF   F6D
3932:  BRA    393E
3934:  DATA F2,40
3936:  DATA 1B,00
3938:  DATA 05,41
393A:  DATA 0F,00
393C:  DATA 00,00
393E:  MOVLW  00
3940:  MOVWF  FF8
3942:  MOVLW  39
3944:  MOVWF  FF7
3946:  MOVLW  34
3948:  MOVWF  FF6
394A:  TBLRD*+
394C:  MOVF   FF5,W
394E:  MOVWF  00
3950:  XORLW  00
3952:  BZ    397A
3954:  TBLRD*+
3956:  MOVF   FF5,W
3958:  MOVWF  01
395A:  BTFSC  FE8.7
395C:  BRA    3968
395E:  ANDLW  3F
3960:  MOVWF  FEA
3962:  TBLRD*+
3964:  MOVFF  FF5,FE9
3968:  BTFSC  01.6
396A:  TBLRD*+
396C:  BTFSS  01.6
396E:  TBLRD*+
3970:  MOVFF  FF5,FEE
3974:  DCFSNZ 00,F
3976:  BRA    394A
3978:  BRA    396C
397A:  CLRF   FF8
.................... 	int8 i;
.................... 	int8 last_a, last_b;
.................... 
.................... 	init();
397C:  MOVLB  0
397E:  GOTO   1544
.................... 
.................... 
.................... 	/* read parameters from EEPROM and write defaults if CRC doesn't match */
.................... 	read_param_file();
3982:  GOTO   1B38
.................... 
.................... 
.................... 	/* flash on startup */
.................... 	for ( i=0 ; i<5 ; i++ ) {
3986:  MOVLB  1
3988:  CLRF   x14
398A:  MOVF   x14,W
398C:  SUBLW  04
398E:  BNC   39B6
.................... 		restart_wdt();
3990:  CLRWDT
.................... 		output_high(LED_A);
3992:  BCF    F94.1
3994:  BSF    F8B.1
.................... 		delay_ms(200);
3996:  MOVLW  C8
3998:  MOVWF  x24
399A:  MOVLB  0
399C:  CALL   14A8
.................... 		output_low(LED_A);
39A0:  BCF    F94.1
39A2:  BCF    F8B.1
.................... 		delay_ms(200);
39A4:  MOVLW  C8
39A6:  MOVLB  1
39A8:  MOVWF  x24
39AA:  MOVLB  0
39AC:  CALL   14A8
39B0:  MOVLB  1
39B2:  INCF   x14,F
39B4:  BRA    398A
.................... 	}
.................... 
.................... 	fprintf(STREAM_FTDI,"# dcswc_module_latching_contactor %s\r\n# ",__DATE__);
39B6:  MOVLW  FC
39B8:  MOVWF  FF6
39BA:  MOVLW  13
39BC:  MOVWF  FF7
39BE:  MOVLW  22
39C0:  MOVWF  x1B
39C2:  MOVLB  0
39C4:  CALL   1B7E
39C8:  MOVLW  26
39CA:  MOVWF  FF6
39CC:  MOVLW  14
39CE:  MOVWF  FF7
39D0:  CALL   1BA8
39D4:  MOVLW  20
39D6:  MOVWF  FF6
39D8:  MOVLW  14
39DA:  MOVWF  FF7
39DC:  MOVLW  04
39DE:  MOVLB  1
39E0:  MOVWF  x1B
39E2:  MOVLB  0
39E4:  CALL   1B7E
.................... 	switch ( restart_cause ) {
39E8:  MOVLW  07
39EA:  SUBWF  00,W
39EC:  BZ    3A12
39EE:  MOVLW  0B
39F0:  SUBWF  00,W
39F2:  BZ    3A20
39F4:  MOVLW  0F
39F6:  SUBWF  00,W
39F8:  BZ    3A2E
39FA:  MOVLW  0C
39FC:  SUBWF  00,W
39FE:  BZ    3A3C
3A00:  MOVLW  0E
3A02:  SUBWF  00,W
3A04:  BZ    3A4A
3A06:  MOVLW  03
3A08:  SUBWF  00,W
3A0A:  BZ    3A58
3A0C:  MOVF   00,F
3A0E:  BZ    3A66
3A10:  BRA    3A74
.................... 		case WDT_TIMEOUT:       fprintf(STREAM_FTDI,"WDT TIMEOUT"); break;
3A12:  MOVLW  30
3A14:  MOVWF  FF6
3A16:  MOVLW  14
3A18:  MOVWF  FF7
3A1A:  CALL   1BA8
3A1E:  BRA    3A80
.................... 		case MCLR_FROM_SLEEP:   fprintf(STREAM_FTDI,"MCLR FROM SLEEP"); break;
3A20:  MOVLW  3C
3A22:  MOVWF  FF6
3A24:  MOVLW  14
3A26:  MOVWF  FF7
3A28:  CALL   1BA8
3A2C:  BRA    3A80
.................... 		case MCLR_FROM_RUN:     fprintf(STREAM_FTDI,"MCLR FROM RUN"); break;
3A2E:  MOVLW  4C
3A30:  MOVWF  FF6
3A32:  MOVLW  14
3A34:  MOVWF  FF7
3A36:  CALL   1BA8
3A3A:  BRA    3A80
.................... 		case NORMAL_POWER_UP:   fprintf(STREAM_FTDI,"NORMAL POWER UP"); break;
3A3C:  MOVLW  5A
3A3E:  MOVWF  FF6
3A40:  MOVLW  14
3A42:  MOVWF  FF7
3A44:  CALL   1BA8
3A48:  BRA    3A80
.................... 		case BROWNOUT_RESTART:  fprintf(STREAM_FTDI,"BROWNOUT RESTART"); break;
3A4A:  MOVLW  6A
3A4C:  MOVWF  FF6
3A4E:  MOVLW  14
3A50:  MOVWF  FF7
3A52:  CALL   1BA8
3A56:  BRA    3A80
.................... 		case WDT_FROM_SLEEP:    fprintf(STREAM_FTDI,"WDT FROM SLEEP"); break;
3A58:  MOVLW  7C
3A5A:  MOVWF  FF6
3A5C:  MOVLW  14
3A5E:  MOVWF  FF7
3A60:  CALL   1BA8
3A64:  BRA    3A80
.................... 		case RESET_INSTRUCTION: fprintf(STREAM_FTDI,"RESET INSTRUCTION"); break;
3A66:  MOVLW  8C
3A68:  MOVWF  FF6
3A6A:  MOVLW  14
3A6C:  MOVWF  FF7
3A6E:  CALL   1BA8
3A72:  BRA    3A80
.................... 		default:                fprintf(STREAM_FTDI,"UNKNOWN!");
3A74:  MOVLW  9E
3A76:  MOVWF  FF6
3A78:  MOVLW  14
3A7A:  MOVWF  FF7
3A7C:  CALL   1BA8
.................... 	}
.................... 	fprintf(STREAM_FTDI,"\r\n");
3A80:  MOVLW  0D
3A82:  BTFSS  F9E.4
3A84:  BRA    3A82
3A86:  MOVWF  FAD
3A88:  MOVLW  0A
3A8A:  BTFSS  F9E.4
3A8C:  BRA    3A8A
3A8E:  MOVWF  FAD
.................... 
.................... 	timers.led_on_a=500;
3A90:  MOVLW  F4
3A92:  MOVWF  xD0
.................... 
.................... 	enable_interrupts(GLOBAL);
3A94:  MOVLW  C0
3A96:  IORWF  FF2,F
.................... 
.................... 	/* Prime ADC filter */
.................... 	for ( i=0 ; i<30 ; i++ ) {
3A98:  MOVLB  1
3A9A:  CLRF   x14
3A9C:  MOVF   x14,W
3A9E:  SUBLW  1D
3AA0:  BNC   3AAE
.................... 		adc_update();
3AA2:  MOVLB  0
3AA4:  CALL   1BCA
3AA8:  MOVLB  1
3AAA:  INCF   x14,F
3AAC:  BRA    3A9C
.................... 	}
.................... 
.................... 	last_a = ! input(SW_OVERRIDE_A);
3AAE:  BSF    F92.5
3AB0:  CLRF   x15
3AB2:  BTFSS  F80.5
3AB4:  INCF   x15,F
.................... 	last_b = ! input(SW_OVERRIDE_B);
3AB6:  BSF    F92.4
3AB8:  CLRF   x16
3ABA:  BTFSS  F80.4
3ABC:  INCF   x16,F
.................... 
.................... 
.................... 	/* enable I2C slave interrupt */
.................... 	enable_interrupts(INT_SSP);
3ABE:  BSF    F9D.3
.................... 
.................... 	for ( ; ; ) {
.................... 		restart_wdt();
3AC0:  CLRWDT
.................... 
.................... 		if ( timers.now_millisecond ) {
3AC2:  MOVLB  0
3AC4:  BTFSS  xCF.2
3AC6:  BRA    3ACC
.................... 			periodic_millisecond();
3AC8:  GOTO   2926
.................... 		}
.................... 
.................... 		if ( kbhit() ) {
3ACC:  BTFSS  F9E.5
3ACE:  BRA    3AD6
.................... 			getc();
3AD0:  GOTO   2A08
.................... 			timers.now_debug_dump=1;
3AD4:  BSF    xCF.5
.................... 		}
.................... 
.................... 		if ( timers.now_debug_dump ) {
3AD6:  BTFSS  xCF.5
3AD8:  BRA    3AE0
.................... 			timers.now_debug_dump=0;
3ADA:  BCF    xCF.5
.................... 
.................... 			debug_dump();
3ADC:  GOTO   2BC4
.................... 		}
.................... 
.................... #if 0
.................... 		if ( input(SW_OVERRIDE_A) != last_a ) {
.................... 			last_a=input(SW_OVERRIDE_A);
.................... 
.................... 			if ( last_a ) {
.................... 				timers.led_on_a=500;
.................... 				contactor_on_a();
.................... 			} else {
.................... 				timers.led_on_a=0;
.................... 				contactor_off_a();
.................... 			}
.................... 		}
.................... 
.................... 
.................... 		if ( input(SW_OVERRIDE_B) != last_b ) {
.................... 			last_B=input(SW_OVERRIDE_B);
.................... 
.................... 			if ( last_b ) {
.................... 				timers.led_on_b=500;
.................... 				contactor_on_b();
.................... 			} else {
.................... 				timers.led_on_b=0;
.................... 				contactor_off_b();
.................... 			}
.................... 		}
.................... #endif
.................... 
.................... 
.................... 		if ( timers.now_adc_sample ) {
3AE0:  BTFSS  xCF.0
3AE2:  BRA    3AEA
.................... 			timers.now_adc_sample=0;
3AE4:  BCF    xCF.0
.................... 			adc_update();
3AE6:  CALL   1BCA
.................... 		}
.................... 
.................... 		if ( timers.now_write_config ) {
3AEA:  BTFSS  xCF.3
3AEC:  BRA    3AF4
.................... 			timers.now_write_config=0;
3AEE:  BCF    xCF.3
.................... 			write_param_file();
3AF0:  CALL   1926
.................... 		}
.................... 		if ( timers.now_reset_config ) {
3AF4:  BTFSS  xCF.4
3AF6:  BRA    3AFE
.................... 			timers.now_reset_config=0;
3AF8:  BCF    xCF.4
.................... 			write_default_param_file();
3AFA:  CALL   1972
.................... 		}
3AFE:  MOVLB  1
3B00:  BRA    3AC0
.................... 
.................... 
.................... 	}
.................... 
.................... 
.................... }
3B02:  BRA    3B02

Configuration Fuses:
   Word  1: 2800   INTRC_IO NOPLLEN PCLKEN NOFCMEN NOIESO
   Word  2: 0E19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: 0000   NOHFOFST NOMCLR
   Word  4: 0009   STVREN NOLVP BBSIZ2K NOXINST DEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 40 00                                        ..@.
