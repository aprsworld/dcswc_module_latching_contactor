CCS PCH C Compiler, Version 5.090, 49113               05-Feb-22 16:35

               Filename:   C:\Users\James Jarvis\Desktop\planetPrecision\dcswc_module_latching_contactor\dcswc_module_latching_contactor.lst

               ROM used:   14446 bytes (93%)
                           Largest free fragment is 1102
               RAM used:   278 (54%) at main() level
                           325 (63%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 30

0000:  GOTO   360C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00D4
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   0E92
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "dcswc_module_latching_contactor.h"
.................... #include <18F14K22.h>
.................... //////////// Standard Header file for the PIC18F14K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F14K22
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 35,2D
00CC:  DATA 46,65
00CE:  DATA 62,2D
00D0:  DATA 32,32
00D2:  DATA 00,00
*
0F64:  DATA 23,20
0F66:  DATA 27,25
0F68:  DATA 73,27
0F6A:  DATA 0D,0A
0F6C:  DATA 00,00
0F6E:  DATA 23,20
0F70:  DATA 20,63
0F72:  DATA 6F,6D
0F74:  DATA 70,69
0F76:  DATA 6C,65
0F78:  DATA 5F,79
0F7A:  DATA 65,61
0F7C:  DATA 72,3D
0F7E:  DATA 25,75
0F80:  DATA 0D,0A
0F82:  DATA 00,00
0F84:  DATA 23,20
0F86:  DATA 63,6F
0F88:  DATA 6D,70
0F8A:  DATA 69,6C
0F8C:  DATA 65,5F
0F8E:  DATA 6D,6F
0F90:  DATA 6E,74
0F92:  DATA 68,3D
0F94:  DATA 25,75
0F96:  DATA 0D,0A
0F98:  DATA 00,00
0F9A:  DATA 23,20
0F9C:  DATA 20,20
0F9E:  DATA 63,6F
0FA0:  DATA 6D,70
0FA2:  DATA 69,6C
0FA4:  DATA 65,5F
0FA6:  DATA 64,61
0FA8:  DATA 79,3D
0FAA:  DATA 25,75
0FAC:  DATA 0D,0A
0FAE:  DATA 00,00
0FB0:  DATA 23,20
0FB2:  DATA 20,20
0FB4:  DATA 20,20
0FB6:  DATA 20,20
0FB8:  DATA 76,69
0FBA:  DATA 6E,20
0FBC:  DATA 61,64
0FBE:  DATA 63,3D
0FC0:  DATA 25,6C
0FC2:  DATA 75,0D
0FC4:  DATA 0A,00
0FC6:  DATA 23,20
0FC8:  DATA 20,20
0FCA:  DATA 20,20
0FCC:  DATA 20,74
0FCE:  DATA 65,6D
0FD0:  DATA 70,20
0FD2:  DATA 61,64
0FD4:  DATA 63,3D
0FD6:  DATA 25,6C
0FD8:  DATA 75,0D
0FDA:  DATA 0A,00
0FDC:  DATA 23,20
0FDE:  DATA 63,6F
0FE0:  DATA 6E,66
0FE2:  DATA 69,67
0FE4:  DATA 2E,63
0FE6:  DATA 68,5B
0FE8:  DATA 25,75
0FEA:  DATA 5D,0D
0FEC:  DATA 0A,00
0FEE:  DATA 23,20
0FF0:  DATA 63,6F
0FF2:  DATA 6D,6D
0FF4:  DATA 61,6E
0FF6:  DATA 64,5F
0FF8:  DATA 6F,66
0FFA:  DATA 66,5F
0FFC:  DATA 68,6F
0FFE:  DATA 6C,64
1000:  DATA 5F,74
1002:  DATA 69,6D
1004:  DATA 65,3D
1006:  DATA 25,6C
1008:  DATA 75,0D
100A:  DATA 0A,00
100C:  DATA 23,20
100E:  DATA 20,20
1010:  DATA 20,6C
1012:  DATA 76,64
1014:  DATA 5F,64
1016:  DATA 69,73
1018:  DATA 63,6F
101A:  DATA 6E,6E
101C:  DATA 65,63
101E:  DATA 74,5F
1020:  DATA 61,64
1022:  DATA 63,3D
1024:  DATA 25,6C
1026:  DATA 75,0D
1028:  DATA 0A,00
102A:  DATA 23,20
102C:  DATA 20,6C
102E:  DATA 76,64
1030:  DATA 5F,64
1032:  DATA 69,73
1034:  DATA 63,6F
1036:  DATA 6E,6E
1038:  DATA 65,63
103A:  DATA 74,5F
103C:  DATA 64,65
103E:  DATA 6C,61
1040:  DATA 79,3D
1042:  DATA 25,6C
1044:  DATA 75,0D
1046:  DATA 0A,00
1048:  DATA 23,20
104A:  DATA 20,20
104C:  DATA 20,20
104E:  DATA 6C,76
1050:  DATA 64,5F
1052:  DATA 72,65
1054:  DATA 63,6F
1056:  DATA 6E,6E
1058:  DATA 65,63
105A:  DATA 74,5F
105C:  DATA 61,64
105E:  DATA 63,3D
1060:  DATA 25,6C
1062:  DATA 75,0D
1064:  DATA 0A,00
1066:  DATA 23,20
1068:  DATA 20,20
106A:  DATA 6C,76
106C:  DATA 64,5F
106E:  DATA 72,65
1070:  DATA 63,6F
1072:  DATA 6E,6E
1074:  DATA 65,63
1076:  DATA 74,5F
1078:  DATA 64,65
107A:  DATA 6C,61
107C:  DATA 79,3D
107E:  DATA 25,6C
1080:  DATA 75,0D
1082:  DATA 0A,00
1084:  DATA 23,20
1086:  DATA 20,20
1088:  DATA 20,68
108A:  DATA 76,64
108C:  DATA 5F,64
108E:  DATA 69,73
1090:  DATA 63,6F
1092:  DATA 6E,6E
1094:  DATA 65,63
1096:  DATA 74,5F
1098:  DATA 61,64
109A:  DATA 63,3D
109C:  DATA 25,6C
109E:  DATA 75,0D
10A0:  DATA 0A,00
10A2:  DATA 23,20
10A4:  DATA 20,68
10A6:  DATA 76,64
10A8:  DATA 5F,64
10AA:  DATA 69,73
10AC:  DATA 63,6F
10AE:  DATA 6E,6E
10B0:  DATA 65,63
10B2:  DATA 74,5F
10B4:  DATA 64,65
10B6:  DATA 6C,61
10B8:  DATA 79,3D
10BA:  DATA 25,6C
10BC:  DATA 75,0D
10BE:  DATA 0A,00
10C0:  DATA 23,20
10C2:  DATA 20,20
10C4:  DATA 20,20
10C6:  DATA 68,76
10C8:  DATA 64,5F
10CA:  DATA 72,65
10CC:  DATA 63,6F
10CE:  DATA 6E,6E
10D0:  DATA 65,63
10D2:  DATA 74,5F
10D4:  DATA 61,64
10D6:  DATA 63,3D
10D8:  DATA 25,6C
10DA:  DATA 75,0D
10DC:  DATA 0A,00
10DE:  DATA 23,20
10E0:  DATA 20,20
10E2:  DATA 68,76
10E4:  DATA 64,5F
10E6:  DATA 72,65
10E8:  DATA 63,6F
10EA:  DATA 6E,6E
10EC:  DATA 65,63
10EE:  DATA 74,5F
10F0:  DATA 64,65
10F2:  DATA 6C,61
10F4:  DATA 79,3D
10F6:  DATA 25,6C
10F8:  DATA 75,0D
10FA:  DATA 0A,00
10FC:  DATA 23,20
10FE:  DATA 20,20
1100:  DATA 20,6C
1102:  DATA 74,64
1104:  DATA 5F,64
1106:  DATA 69,73
1108:  DATA 63,6F
110A:  DATA 6E,6E
110C:  DATA 65,63
110E:  DATA 74,5F
1110:  DATA 61,64
1112:  DATA 63,3D
1114:  DATA 25,6C
1116:  DATA 75,0D
1118:  DATA 0A,00
111A:  DATA 23,20
111C:  DATA 20,6C
111E:  DATA 74,64
1120:  DATA 5F,64
1122:  DATA 69,73
1124:  DATA 63,6F
1126:  DATA 6E,6E
1128:  DATA 65,63
112A:  DATA 74,5F
112C:  DATA 64,65
112E:  DATA 6C,61
1130:  DATA 79,3D
1132:  DATA 25,6C
1134:  DATA 75,0D
1136:  DATA 0A,00
1138:  DATA 23,20
113A:  DATA 20,20
113C:  DATA 20,20
113E:  DATA 6C,74
1140:  DATA 64,5F
1142:  DATA 72,65
1144:  DATA 63,6F
1146:  DATA 6E,6E
1148:  DATA 65,63
114A:  DATA 74,5F
114C:  DATA 61,64
114E:  DATA 63,3D
1150:  DATA 25,6C
1152:  DATA 75,0D
1154:  DATA 0A,00
1156:  DATA 23,20
1158:  DATA 20,20
115A:  DATA 6C,74
115C:  DATA 64,5F
115E:  DATA 72,65
1160:  DATA 63,6F
1162:  DATA 6E,6E
1164:  DATA 65,63
1166:  DATA 74,5F
1168:  DATA 64,65
116A:  DATA 6C,61
116C:  DATA 79,3D
116E:  DATA 25,6C
1170:  DATA 75,0D
1172:  DATA 0A,00
1174:  DATA 23,20
1176:  DATA 20,20
1178:  DATA 20,68
117A:  DATA 74,64
117C:  DATA 5F,64
117E:  DATA 69,73
1180:  DATA 63,6F
1182:  DATA 6E,6E
1184:  DATA 65,63
1186:  DATA 74,5F
1188:  DATA 61,64
118A:  DATA 63,3D
118C:  DATA 25,6C
118E:  DATA 75,0D
1190:  DATA 0A,00
1192:  DATA 23,20
1194:  DATA 20,68
1196:  DATA 74,64
1198:  DATA 5F,64
119A:  DATA 69,73
119C:  DATA 63,6F
119E:  DATA 6E,6E
11A0:  DATA 65,63
11A2:  DATA 74,5F
11A4:  DATA 64,65
11A6:  DATA 6C,61
11A8:  DATA 79,3D
11AA:  DATA 25,6C
11AC:  DATA 75,0D
11AE:  DATA 0A,00
11B0:  DATA 23,20
11B2:  DATA 20,20
11B4:  DATA 20,20
11B6:  DATA 68,74
11B8:  DATA 64,5F
11BA:  DATA 72,65
11BC:  DATA 63,6F
11BE:  DATA 6E,6E
11C0:  DATA 65,63
11C2:  DATA 74,5F
11C4:  DATA 61,64
11C6:  DATA 63,3D
11C8:  DATA 25,6C
11CA:  DATA 75,0D
11CC:  DATA 0A,00
11CE:  DATA 23,20
11D0:  DATA 20,20
11D2:  DATA 68,74
11D4:  DATA 64,5F
11D6:  DATA 72,65
11D8:  DATA 63,6F
11DA:  DATA 6E,6E
11DC:  DATA 65,63
11DE:  DATA 74,5F
11E0:  DATA 64,65
11E2:  DATA 6C,61
11E4:  DATA 79,3D
11E6:  DATA 25,6C
11E8:  DATA 75,0D
11EA:  DATA 0A,00
11EC:  DATA 23,20
11EE:  DATA 63,68
11F0:  DATA 61,6E
11F2:  DATA 6E,65
11F4:  DATA 6C,5B
11F6:  DATA 25,75
11F8:  DATA 5D,0D
11FA:  DATA 0A,00
11FC:  DATA 23,20
11FE:  DATA 20,20
1200:  DATA 20,20
1202:  DATA 20,20
1204:  DATA 20,20
1206:  DATA 20,20
1208:  DATA 20,20
120A:  DATA 20,20
120C:  DATA 20,20
120E:  DATA 20,20
1210:  DATA 20,20
1212:  DATA 20,20
1214:  DATA 20,73
1216:  DATA 74,61
1218:  DATA 74,65
121A:  DATA 3D,30
121C:  DATA 78,25
121E:  DATA 30,32
1220:  DATA 78,0D
1222:  DATA 0A,00
1224:  DATA 23,20
1226:  DATA 20,20
1228:  DATA 20,20
122A:  DATA 20,20
122C:  DATA 20,20
122E:  DATA 20,20
1230:  DATA 63,6F
1232:  DATA 6D,6D
1234:  DATA 61,6E
1236:  DATA 64,5F
1238:  DATA 6F,6E
123A:  DATA 5F,73
123C:  DATA 65,63
123E:  DATA 6F,6E
1240:  DATA 64,73
1242:  DATA 3D,25
1244:  DATA 6C,75
1246:  DATA 0D,0A
1248:  DATA 00,00
124A:  DATA 23,20
124C:  DATA 20,20
124E:  DATA 20,20
1250:  DATA 20,63
1252:  DATA 6F,6D
1254:  DATA 6D,61
1256:  DATA 6E,64
1258:  DATA 5F,6F
125A:  DATA 6E,5F
125C:  DATA 68,6F
125E:  DATA 6C,64
1260:  DATA 5F,73
1262:  DATA 65,63
1264:  DATA 6F,6E
1266:  DATA 64,73
1268:  DATA 3D,25
126A:  DATA 6C,75
126C:  DATA 0D,0A
126E:  DATA 00,00
1270:  DATA 23,20
1272:  DATA 20,20
1274:  DATA 20,20
1276:  DATA 20,20
1278:  DATA 20,20
127A:  DATA 20,63
127C:  DATA 6F,6D
127E:  DATA 6D,61
1280:  DATA 6E,64
1282:  DATA 5F,6F
1284:  DATA 66,66
1286:  DATA 5F,73
1288:  DATA 65,63
128A:  DATA 6F,6E
128C:  DATA 64,73
128E:  DATA 3D,25
1290:  DATA 6C,75
1292:  DATA 0D,0A
1294:  DATA 00,00
1296:  DATA 23,20
1298:  DATA 20,20
129A:  DATA 20,20
129C:  DATA 63,6F
129E:  DATA 6D,6D
12A0:  DATA 61,6E
12A2:  DATA 64,5F
12A4:  DATA 6F,66
12A6:  DATA 66,5F
12A8:  DATA 68,6F
12AA:  DATA 6C,64
12AC:  DATA 5F,73
12AE:  DATA 65,63
12B0:  DATA 6F,6E
12B2:  DATA 64,73
12B4:  DATA 3D,25
12B6:  DATA 6C,75
12B8:  DATA 0D,0A
12BA:  DATA 00,00
12BC:  DATA 23,20
12BE:  DATA 6C,76
12C0:  DATA 64,5F
12C2:  DATA 64,69
12C4:  DATA 73,63
12C6:  DATA 6F,6E
12C8:  DATA 6E,65
12CA:  DATA 63,74
12CC:  DATA 5F,64
12CE:  DATA 65,6C
12D0:  DATA 61,79
12D2:  DATA 5F,73
12D4:  DATA 65,63
12D6:  DATA 6F,6E
12D8:  DATA 64,73
12DA:  DATA 3D,25
12DC:  DATA 6C,75
12DE:  DATA 0D,0A
12E0:  DATA 00,00
12E2:  DATA 23,20
12E4:  DATA 20,6C
12E6:  DATA 76,64
12E8:  DATA 5F,72
12EA:  DATA 65,63
12EC:  DATA 6F,6E
12EE:  DATA 6E,65
12F0:  DATA 63,74
12F2:  DATA 5F,64
12F4:  DATA 65,6C
12F6:  DATA 61,79
12F8:  DATA 5F,73
12FA:  DATA 65,63
12FC:  DATA 6F,6E
12FE:  DATA 64,73
1300:  DATA 3D,25
1302:  DATA 6C,75
1304:  DATA 0D,0A
1306:  DATA 00,00
1308:  DATA 23,20
130A:  DATA 68,76
130C:  DATA 64,5F
130E:  DATA 64,69
1310:  DATA 73,63
1312:  DATA 6F,6E
1314:  DATA 6E,65
1316:  DATA 63,74
1318:  DATA 5F,64
131A:  DATA 65,6C
131C:  DATA 61,79
131E:  DATA 5F,73
1320:  DATA 65,63
1322:  DATA 6F,6E
1324:  DATA 64,73
1326:  DATA 3D,25
1328:  DATA 6C,75
132A:  DATA 0D,0A
132C:  DATA 00,00
132E:  DATA 23,20
1330:  DATA 20,68
1332:  DATA 76,64
1334:  DATA 5F,72
1336:  DATA 65,63
1338:  DATA 6F,6E
133A:  DATA 6E,65
133C:  DATA 63,74
133E:  DATA 5F,64
1340:  DATA 65,6C
1342:  DATA 61,79
1344:  DATA 5F,73
1346:  DATA 65,63
1348:  DATA 6F,6E
134A:  DATA 64,73
134C:  DATA 3D,25
134E:  DATA 6C,75
1350:  DATA 0D,0A
1352:  DATA 00,00
1354:  DATA 23,20
1356:  DATA 6C,74
1358:  DATA 64,5F
135A:  DATA 64,69
135C:  DATA 73,63
135E:  DATA 6F,6E
1360:  DATA 6E,65
1362:  DATA 63,74
1364:  DATA 5F,64
1366:  DATA 65,6C
1368:  DATA 61,79
136A:  DATA 5F,73
136C:  DATA 65,63
136E:  DATA 6F,6E
1370:  DATA 64,73
1372:  DATA 3D,25
1374:  DATA 6C,75
1376:  DATA 0D,0A
1378:  DATA 00,00
137A:  DATA 23,20
137C:  DATA 20,6C
137E:  DATA 74,64
1380:  DATA 5F,72
1382:  DATA 65,63
1384:  DATA 6F,6E
1386:  DATA 6E,65
1388:  DATA 63,74
138A:  DATA 5F,64
138C:  DATA 65,6C
138E:  DATA 61,79
1390:  DATA 5F,73
1392:  DATA 65,63
1394:  DATA 6F,6E
1396:  DATA 64,73
1398:  DATA 3D,25
139A:  DATA 6C,75
139C:  DATA 0D,0A
139E:  DATA 00,00
13A0:  DATA 23,20
13A2:  DATA 68,74
13A4:  DATA 64,5F
13A6:  DATA 64,69
13A8:  DATA 73,63
13AA:  DATA 6F,6E
13AC:  DATA 6E,65
13AE:  DATA 63,74
13B0:  DATA 5F,64
13B2:  DATA 65,6C
13B4:  DATA 61,79
13B6:  DATA 5F,73
13B8:  DATA 65,63
13BA:  DATA 6F,6E
13BC:  DATA 64,73
13BE:  DATA 3D,25
13C0:  DATA 6C,75
13C2:  DATA 0D,0A
13C4:  DATA 00,00
13C6:  DATA 23,20
13C8:  DATA 20,68
13CA:  DATA 74,64
13CC:  DATA 5F,72
13CE:  DATA 65,63
13D0:  DATA 6F,6E
13D2:  DATA 6E,65
13D4:  DATA 63,74
13D6:  DATA 5F,64
13D8:  DATA 65,6C
13DA:  DATA 61,79
13DC:  DATA 5F,73
13DE:  DATA 65,63
13E0:  DATA 6F,6E
13E2:  DATA 64,73
13E4:  DATA 3D,25
13E6:  DATA 6C,75
13E8:  DATA 0D,0A
13EA:  DATA 00,00
13EC:  DATA 23,20
13EE:  DATA 64,63
13F0:  DATA 73,77
13F2:  DATA 63,5F
13F4:  DATA 6D,6F
13F6:  DATA 64,75
13F8:  DATA 6C,65
13FA:  DATA 5F,6C
13FC:  DATA 61,74
13FE:  DATA 63,68
1400:  DATA 69,6E
1402:  DATA 67,5F
1404:  DATA 63,6F
1406:  DATA 6E,74
1408:  DATA 61,63
140A:  DATA 74,6F
140C:  DATA 72,20
140E:  DATA 25,73
1410:  DATA 0D,0A
1412:  DATA 23,20
1414:  DATA 00,00
1416:  DATA 35,2D
1418:  DATA 46,65
141A:  DATA 62,2D
141C:  DATA 32,32
141E:  DATA 00,00
1420:  DATA 57,44
1422:  DATA 54,20
1424:  DATA 54,49
1426:  DATA 4D,45
1428:  DATA 4F,55
142A:  DATA 54,00
142C:  DATA 4D,43
142E:  DATA 4C,52
1430:  DATA 20,46
1432:  DATA 52,4F
1434:  DATA 4D,20
1436:  DATA 53,4C
1438:  DATA 45,45
143A:  DATA 50,00
143C:  DATA 4D,43
143E:  DATA 4C,52
1440:  DATA 20,46
1442:  DATA 52,4F
1444:  DATA 4D,20
1446:  DATA 52,55
1448:  DATA 4E,00
144A:  DATA 4E,4F
144C:  DATA 52,4D
144E:  DATA 41,4C
1450:  DATA 20,50
1452:  DATA 4F,57
1454:  DATA 45,52
1456:  DATA 20,55
1458:  DATA 50,00
145A:  DATA 42,52
145C:  DATA 4F,57
145E:  DATA 4E,4F
1460:  DATA 55,54
1462:  DATA 20,52
1464:  DATA 45,53
1466:  DATA 54,41
1468:  DATA 52,54
146A:  DATA 00,00
146C:  DATA 57,44
146E:  DATA 54,20
1470:  DATA 46,52
1472:  DATA 4F,4D
1474:  DATA 20,53
1476:  DATA 4C,45
1478:  DATA 45,50
147A:  DATA 00,00
147C:  DATA 52,45
147E:  DATA 53,45
1480:  DATA 54,20
1482:  DATA 49,4E
1484:  DATA 53,54
1486:  DATA 52,55
1488:  DATA 43,54
148A:  DATA 49,4F
148C:  DATA 4E,00
148E:  DATA 55,4E
1490:  DATA 4B,4E
1492:  DATA 4F,57
1494:  DATA 4E,21
1496:  DATA 00,00
*
1982:  TBLRD*+
1984:  MOVFF  FF6,11A
1988:  MOVFF  FF7,11B
198C:  MOVF   FF5,W
198E:  BTFSS  F9E.4
1990:  BRA    198E
1992:  MOVWF  FAD
1994:  MOVFF  11A,FF6
1998:  MOVFF  11B,FF7
199C:  MOVLB  1
199E:  DECFSZ x19,F
19A0:  BRA    19A4
19A2:  BRA    19A8
19A4:  MOVLB  0
19A6:  BRA    1982
19A8:  MOVLB  0
19AA:  RETURN 0
19AC:  TBLRD*+
19AE:  MOVF   FF5,F
19B0:  BZ    19CC
19B2:  MOVFF  FF6,116
19B6:  MOVFF  FF7,117
19BA:  MOVF   FF5,W
19BC:  BTFSS  F9E.4
19BE:  BRA    19BC
19C0:  MOVWF  FAD
19C2:  MOVFF  116,FF6
19C6:  MOVFF  117,FF7
19CA:  BRA    19AC
19CC:  RETURN 0
*
26F8:  MOVLB  1
26FA:  MOVF   x19,W
26FC:  CLRF   01
26FE:  SUBWF  x18,W
2700:  BC    2708
2702:  MOVFF  118,00
2706:  BRA    2720
2708:  CLRF   00
270A:  MOVLW  08
270C:  MOVWF  x1A
270E:  RLCF   x18,F
2710:  RLCF   00,F
2712:  MOVF   x19,W
2714:  SUBWF  00,W
2716:  BTFSC  FD8.0
2718:  MOVWF  00
271A:  RLCF   01,F
271C:  DECFSZ x1A,F
271E:  BRA    270E
2720:  MOVLB  0
2722:  RETURN 0
2724:  MOVF   01,W
2726:  MOVFF  116,118
272A:  MOVLW  64
272C:  MOVLB  1
272E:  MOVWF  x19
2730:  MOVLB  0
2732:  RCALL  26F8
2734:  MOVFF  00,116
2738:  MOVF   01,W
273A:  MOVLW  30
273C:  BNZ   274E
273E:  MOVLB  1
2740:  BTFSS  x17.1
2742:  BRA    2760
2744:  BTFSC  x17.3
2746:  BRA    2760
2748:  BTFSC  x17.4
274A:  MOVLW  20
274C:  BRA    2756
274E:  MOVLB  1
2750:  BCF    x17.3
2752:  BCF    x17.4
2754:  BSF    x17.0
2756:  ADDWF  01,F
2758:  MOVF   01,W
275A:  BTFSS  F9E.4
275C:  BRA    275A
275E:  MOVWF  FAD
2760:  MOVFF  116,118
2764:  MOVLW  0A
2766:  MOVWF  x19
2768:  MOVLB  0
276A:  RCALL  26F8
276C:  MOVFF  00,116
2770:  MOVF   01,W
2772:  MOVLW  30
2774:  BNZ   2786
2776:  MOVLB  1
2778:  BTFSC  x17.3
277A:  BRA    2792
277C:  BTFSS  x17.0
277E:  BRA    2792
2780:  BTFSC  x17.4
2782:  MOVLW  20
2784:  MOVLB  0
2786:  ADDWF  01,F
2788:  MOVF   01,W
278A:  BTFSS  F9E.4
278C:  BRA    278A
278E:  MOVWF  FAD
2790:  MOVLB  1
2792:  MOVLW  30
2794:  ADDWF  x16,F
2796:  MOVF   x16,W
2798:  BTFSS  F9E.4
279A:  BRA    2798
279C:  MOVWF  FAD
279E:  MOVLB  0
27A0:  RETURN 0
27A2:  MOVFF  FEA,120
27A6:  MOVFF  FE9,11F
27AA:  MOVLB  1
27AC:  SWAPF  x19,W
27AE:  IORLW  F0
27B0:  MOVWF  x1B
27B2:  ADDWF  x1B,F
27B4:  ADDLW  E2
27B6:  MOVWF  x1C
27B8:  ADDLW  32
27BA:  MOVWF  x1E
27BC:  MOVF   x19,W
27BE:  ANDLW  0F
27C0:  ADDWF  x1C,F
27C2:  ADDWF  x1C,F
27C4:  ADDWF  x1E,F
27C6:  ADDLW  E9
27C8:  MOVWF  x1D
27CA:  ADDWF  x1D,F
27CC:  ADDWF  x1D,F
27CE:  SWAPF  x18,W
27D0:  ANDLW  0F
27D2:  ADDWF  x1D,F
27D4:  ADDWF  x1E,F
27D6:  RLCF   x1D,F
27D8:  RLCF   x1E,F
27DA:  COMF   x1E,F
27DC:  RLCF   x1E,F
27DE:  MOVF   x18,W
27E0:  ANDLW  0F
27E2:  ADDWF  x1E,F
27E4:  RLCF   x1B,F
27E6:  MOVLW  07
27E8:  MOVWF  x1A
27EA:  MOVLW  0A
27EC:  DECF   x1D,F
27EE:  ADDWF  x1E,F
27F0:  BNC   27EC
27F2:  DECF   x1C,F
27F4:  ADDWF  x1D,F
27F6:  BNC   27F2
27F8:  DECF   x1B,F
27FA:  ADDWF  x1C,F
27FC:  BNC   27F8
27FE:  DECF   x1A,F
2800:  ADDWF  x1B,F
2802:  BNC   27FE
2804:  MOVLW  01
2806:  MOVWF  FEA
2808:  MOVLW  1A
280A:  MOVWF  FE9
280C:  MOVLW  07
280E:  ANDWF  x1F,W
2810:  BCF    x1F.6
2812:  ADDWF  FE9,F
2814:  MOVLW  00
2816:  ADDWFC FEA,F
2818:  MOVF   FE9,W
281A:  SUBLW  1E
281C:  BNZ   2824
281E:  DECFSZ FEA,W
2820:  BRA    2824
2822:  BSF    x1F.6
2824:  MOVF   FEF,W
2826:  MOVWF  00
2828:  BNZ   283A
282A:  BTFSC  x1F.6
282C:  BRA    283A
282E:  BTFSC  x1F.4
2830:  BRA    284A
2832:  BTFSC  x1F.3
2834:  BRA    283A
2836:  MOVLW  20
2838:  BRA    2840
283A:  BSF    x1F.3
283C:  BCF    x1F.4
283E:  MOVLW  30
2840:  ADDWF  00,F
2842:  MOVF   00,W
2844:  BTFSS  F9E.4
2846:  BRA    2844
2848:  MOVWF  FAD
284A:  MOVF   FEE,W
284C:  BTFSS  x1F.6
284E:  BRA    2818
2850:  MOVLB  0
2852:  RETURN 0
2854:  MOVLB  1
2856:  BTFSC  x1A.7
2858:  BRA    287A
285A:  MOVLW  0F
285C:  MOVWF  00
285E:  SWAPF  x19,W
2860:  ANDWF  00,F
2862:  MOVLW  0A
2864:  SUBWF  00,W
2866:  BC    286E
2868:  MOVLW  30
286A:  ADDWF  00,F
286C:  BRA    2872
286E:  MOVF   x1A,W
2870:  ADDWF  00,F
2872:  MOVF   00,W
2874:  BTFSS  F9E.4
2876:  BRA    2874
2878:  MOVWF  FAD
287A:  MOVLW  0F
287C:  ANDWF  x19,F
287E:  MOVLW  0A
2880:  SUBWF  x19,W
2882:  BC    2888
2884:  MOVLW  30
2886:  BRA    288C
2888:  BCF    x1A.7
288A:  MOVF   x1A,W
288C:  ADDWF  x19,F
288E:  MOVF   x19,W
2890:  BTFSS  F9E.4
2892:  BRA    2890
2894:  MOVWF  FAD
2896:  MOVLB  0
2898:  GOTO   310C (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #device *=16
.................... #use delay(clock=16MHz)
*
1498:  MOVLW  01
149A:  MOVWF  FEA
149C:  MOVLW  37
149E:  MOVWF  FE9
14A0:  MOVF   FEF,W
14A2:  BZ    14C0
14A4:  MOVLW  05
14A6:  MOVWF  01
14A8:  CLRF   00
14AA:  DECFSZ 00,F
14AC:  BRA    14AA
14AE:  DECFSZ 01,F
14B0:  BRA    14A8
14B2:  MOVLW  2E
14B4:  MOVWF  00
14B6:  DECFSZ 00,F
14B8:  BRA    14B6
14BA:  BRA    14BC
14BC:  DECFSZ FEF,F
14BE:  BRA    14A4
14C0:  RETURN 0
.................... 
.................... /* hardware I2C port is slave and is connected to DCSWC bus */
.................... #use i2c(stream=STREAM_SLAVE,SLAVE, I2C1, FORCE_HW)
*
0E7C:  MOVF   FC9,W
0E7E:  MOVFF  13B,FC9
0E82:  BSF    FC6.4
0E84:  BCF    F9E.3
0E86:  BTFSC  FC7.0
0E88:  BRA    0E86
0E8A:  CLRF   01
0E8C:  BTFSS  FC5.6
0E8E:  INCF   01,F
0E90:  RETURN 0
.................... /* slave address set based on dip switch in init() */
.................... 
.................... 
.................... #fuses INTRC_IO
.................... #fuses NOPLLEN
.................... #fuses NOFCMEN
.................... #fuses NOIESO
.................... #fuses PUT
.................... #fuses BROWNOUT
.................... #fuses WDT512
.................... #fuses NOHFOFST
.................... #fuses NOMCLR
.................... #fuses STVREN
.................... #fuses NOLVP
.................... #fuses NOXINST
.................... #fuses NODEBUG
.................... #fuses NOPROTECT
.................... #fuses NOWRT
.................... #fuses NOWRTC 
.................... #fuses NOWRTB
.................... #fuses NOWRTD
.................... #fuses NOEBTR
.................... #fuses NOEBTRB
.................... 
.................... #use standard_io(ALL)
.................... 
.................... #use rs232(UART1,stream=STREAM_FTDI,baud=9600,errors)	
.................... 
.................... /* program config CRC of 0 and a serial_prefix of 'A' ... that will trigger a write default on first boot */
.................... #ROM 0xF00000 = { 0x00, 0x00, 0x40, 0x00 }
.................... 
.................... 
.................... 
.................... 
.................... #define SW_OVERRIDE_A        PIN_A5
.................... #define SW_OVERRIDE_B        PIN_A4
.................... #define BRIDGE_B_A           PIN_C5
.................... #define BRIDGE_A_B           PIN_C4
.................... #define BRIDGE_A_A           PIN_C3
.................... #define BRIDGE_B_B           PIN_C6
.................... #define AN_DIP               PIN_C7
.................... #define SER_TO_PC            PIN_B7
.................... #define AN_VTEMP             PIN_A2
.................... #define AN_IN_VOLTS          PIN_C0
.................... #define LED_A                PIN_C1
.................... #define LED_B                PIN_C2
.................... #define I2C_SDA              PIN_B4
.................... #define SER_FROM_PC          PIN_B5
.................... #define I2C_SCL              PIN_B6
.................... 
.................... 
.................... /* 
.................... Parameters are stored in EEPROM
.................... */
.................... #define PARAM_CRC_ADDRESS  0x00
.................... #define PARAM_ADDRESS      PARAM_CRC_ADDRESS+2
.................... 
.................... 
.................... 
.................... /* bit positions for a channel state byte */
.................... #define CH_STATE_BIT_FUTURE   7  /* reserved for future use */
.................... #define CH_STATE_BIT_HTD      6  /* high temperature disconnect */
.................... #define CH_STATE_BIT_LTD      5  /* low temperature disconnect */
.................... #define CH_STATE_BIT_HVD      4  /* high voltage disconnect */
.................... #define CH_STATE_BIT_LVD      3  /* low voltage disconnect */
.................... #define CH_STATE_BIT_CMD_OFF  2  /* commanded off */
.................... #define CH_STATE_BIT_CMD_ON   1  /* commanded on (takes presedence over commanded off) */
.................... #define CH_STATE_BIT_OVERRIDE 0  /* override switch */
.................... 
.................... /* _OVERRIDE or _CMD_ON set means output on */
.................... #define CH_STATE_MASK_ON     0b00000011 
.................... /* _CMD_OFF, _LVD, _HVD, _LTD, _HTD means output off, unless override by on mask */
.................... #define CH_STATE_MASK_OFF    0b01111100 
.................... 
.................... #define ADC_SAMPLE_TICKS              20
.................... #define CONTACTOR_POWER_SAVE_MS       200 /* milliseconds for contactor be on. Must be >0 and <= 255 */
.................... 
.................... 
.................... typedef struct {
.................... 	/* command on hold time */
.................... 	int16 command_on_hold_time;
.................... 
.................... 	/* command off hold time */
.................... 	int16 command_off_hold_time;
.................... 
.................... 	/* low voltage disconnect */
.................... 	int16 lvd_disconnect_adc;
.................... 	int16 lvd_disconnect_delay;
.................... 	int16 lvd_reconnect_adc;
.................... 	int16 lvd_reconnect_delay;
.................... 
.................... 	/* high voltage disconnect */
.................... 	int16 hvd_disconnect_adc;
.................... 	int16 hvd_disconnect_delay;
.................... 	int16 hvd_reconnect_adc;
.................... 	int16 hvd_reconnect_delay;
.................... 
.................... 	/* low temperature disconnect */
.................... 	int16 ltd_disconnect_adc;
.................... 	int16 ltd_disconnect_delay;
.................... 	int16 ltd_reconnect_adc;
.................... 	int16 ltd_reconnect_delay;
.................... 
.................... 	/* high temperature disconnect */
.................... 	int16 htd_disconnect_adc;
.................... 	int16 htd_disconnect_delay;
.................... 	int16 htd_reconnect_adc;
.................... 	int16 htd_reconnect_delay;
.................... } struct_config_channel;
.................... 
.................... typedef struct {
.................... 	/* not much going on here */
.................... 	struct_config_channel ch[2];
.................... } struct_config;
.................... 
.................... 
.................... typedef struct {
.................... 	int8 state;
.................... 
.................... 	int16 command_on_seconds;			/* counts down. Off at zero. */
.................... 	int16 command_on_hold_seconds;      /* counts down. Off at zero. */
.................... 
.................... 	int16 command_off_seconds;			/* counts down. Off at zero. */
.................... 	int16 command_off_hold_seconds;     /* counts down. Off at zero. */
.................... 
.................... 	int16 lvd_disconnect_delay_seconds;	/* counts down */
.................... 	int16  lvd_reconnect_delay_seconds;	/* counts down */
.................... 
.................... 	int16 hvd_disconnect_delay_seconds;	/* counts down */
.................... 	int16  hvd_reconnect_delay_seconds;	/* counts down */
.................... 
.................... 	int16 ltd_disconnect_delay_seconds; /* counts down */
.................... 	int16 ltd_reconnect_delay_seconds;  /* counts down */
.................... 
.................... 	int16 htd_disconnect_delay_seconds; /* counts down */
.................... 	int16 htd_reconnect_delay_seconds;  /* counts down */
.................... } struct_channel;
.................... 
.................... typedef struct {
.................... 	/* circular buffer for ADC readings */
.................... 	int16 adc_buffer[3][16];
.................... 	int8  adc_buffer_index;
.................... 
.................... 	int16 sequence_number;
.................... 	int16 uptime_minutes;
.................... 	int16 interval_milliseconds;
.................... 
.................... 	int8 factory_unlocked;
.................... 
.................... 
.................... 	int8 compile_year;
.................... 	int8 compile_month;
.................... 	int8 compile_day;
.................... 
.................... 
.................... 	int8 default_params_written;
.................... } struct_current;
.................... 
.................... typedef struct {
.................... 	/* action flags */
.................... 	int1 now_adc_sample;
.................... 	int1 now_adc_reset_count;
.................... 
.................... 	int1 now_millisecond;
.................... 
.................... 	int1 now_write_config;
.................... 	int1 now_reset_config;
.................... 
.................... 	int1 now_debug_dump;
.................... 
.................... 	/* contactor states */
.................... 	int1 contactor_a;
.................... 	int1 contactor_b;
.................... 
.................... 	/* timers */
.................... 	int8 led_on_a;
.................... 	int8 led_on_b;
.................... 
.................... 	int8  contactor_a_powersave;        /* counts down. Off at zero. */
.................... 	int8  contactor_b_powersave;        /* counts down. Off at zero. */
.................... } struct_time_keep;
.................... 
.................... /* global structures */
.................... struct_config config={0};
.................... struct_current current={0};
.................... struct_time_keep timers={0};
.................... struct_channel channel[2]={0};
.................... 
.................... #include "adc_dcswc_module_latching_contactor.c"
.................... int16 adc_get(int8 ch) {
.................... 	int16 sum;
.................... 	int8 i;
.................... 
.................... 	/* pre-compute address of channel adc buffer. Saves computing it 16 times in the loop below */
.................... 	int16 *p;
.................... 	p = current.adc_buffer[ch];
*
0594:  MOVLB  1
0596:  MOVF   x3D,W
0598:  MULLW  20
059A:  MOVF   FF3,W
059C:  CLRF   03
059E:  ADDLW  63
05A0:  MOVWF  01
05A2:  MOVLW  00
05A4:  ADDWFC 03,F
05A6:  MOVFF  01,141
05AA:  MOVFF  03,142
.................... 
.................... 	// Calculate the mean.  This is done by summing up the
.................... 	// values and dividing by the number of elements.
.................... 	sum = 0;
05AE:  CLRF   x3F
05B0:  CLRF   x3E
.................... 	for( i = 0; i < 16 ; i++ ) {
05B2:  CLRF   x40
05B4:  MOVF   x40,W
05B6:  SUBLW  0F
05B8:  BNC   05E4
.................... //		sum += current.adc_buffer[ch][i];
.................... 		sum += p[i];
05BA:  CLRF   03
05BC:  MOVFF  140,02
05C0:  BCF    FD8.0
05C2:  RLCF   02,F
05C4:  RLCF   03,F
05C6:  MOVF   02,W
05C8:  ADDWF  x41,W
05CA:  MOVWF  FE9
05CC:  MOVF   x42,W
05CE:  ADDWFC 03,W
05D0:  MOVWF  FEA
05D2:  MOVFF  FEC,03
05D6:  MOVF   FED,F
05D8:  MOVF   FEF,W
05DA:  ADDWF  x3E,F
05DC:  MOVF   03,W
05DE:  ADDWFC x3F,F
05E0:  INCF   x40,F
05E2:  BRA    05B4
.................... 	}
.................... 
.................... 	/* divide sum by our 16 samples and round by adding 8 */
.................... 	return ( (sum+8) >> 4 );
05E4:  MOVLW  08
05E6:  ADDWF  x3E,W
05E8:  MOVWF  x43
05EA:  MOVLW  00
05EC:  ADDWFC x3F,W
05EE:  MOVWF  x44
05F0:  RRCF   x44,W
05F2:  MOVWF  03
05F4:  RRCF   x43,W
05F6:  MOVWF  02
05F8:  RRCF   03,F
05FA:  RRCF   02,F
05FC:  RRCF   03,F
05FE:  RRCF   02,F
0600:  RRCF   03,F
0602:  RRCF   02,F
0604:  MOVLW  0F
0606:  ANDWF  03,F
0608:  MOVFF  02,01
060C:  MOVFF  03,02
0610:  MOVLB  0
0612:  RETURN 0
.................... }
.................... 
.................... 
.................... void adc_update(void) {
.................... 
.................... 	/* wrap buffer around */
.................... 	current.adc_buffer_index++;
*
19CE:  INCF   xC3,F
.................... 	if ( current.adc_buffer_index >= 16 )
19D0:  MOVF   xC3,W
19D2:  SUBLW  0F
19D4:  BC    19D8
.................... 		current.adc_buffer_index=0;
19D6:  CLRF   xC3
.................... 
.................... 	set_adc_channel(4);
19D8:  MOVLW  10
19DA:  MOVWF  01
19DC:  MOVF   FC2,W
19DE:  ANDLW  C3
19E0:  IORWF  01,W
19E2:  MOVWF  FC2
.................... 	current.adc_buffer[0][current.adc_buffer_index] = read_adc();
19E4:  BCF    FD8.0
19E6:  RLCF   xC3,W
19E8:  CLRF   03
19EA:  ADDLW  63
19EC:  MOVWF  FE9
19EE:  MOVLW  00
19F0:  ADDWFC 03,W
19F2:  MOVWF  FEA
19F4:  BSF    FC2.1
19F6:  BTFSC  FC2.1
19F8:  BRA    19F6
19FA:  MOVFF  FC3,FEF
19FE:  MOVFF  FC4,FEC
.................... 
.................... 
.................... 	set_adc_channel(2);
1A02:  MOVLW  08
1A04:  MOVWF  01
1A06:  MOVF   FC2,W
1A08:  ANDLW  C3
1A0A:  IORWF  01,W
1A0C:  MOVWF  FC2
.................... 	delay_ms(1);
1A0E:  MOVLW  01
1A10:  MOVLB  1
1A12:  MOVWF  x37
1A14:  MOVLB  0
1A16:  RCALL  1498
.................... 	current.adc_buffer[1][current.adc_buffer_index] = read_adc();
1A18:  BCF    FD8.0
1A1A:  RLCF   xC3,W
1A1C:  CLRF   03
1A1E:  ADDLW  83
1A20:  MOVWF  FE9
1A22:  MOVLW  00
1A24:  ADDWFC 03,W
1A26:  MOVWF  FEA
1A28:  BSF    FC2.1
1A2A:  BTFSC  FC2.1
1A2C:  BRA    1A2A
1A2E:  MOVFF  FC3,FEF
1A32:  MOVFF  FC4,FEC
.................... 
.................... 	set_adc_channel(9);
1A36:  MOVLW  24
1A38:  MOVWF  01
1A3A:  MOVF   FC2,W
1A3C:  ANDLW  C3
1A3E:  IORWF  01,W
1A40:  MOVWF  FC2
.................... 	delay_ms(1);
1A42:  MOVLW  01
1A44:  MOVLB  1
1A46:  MOVWF  x37
1A48:  MOVLB  0
1A4A:  RCALL  1498
.................... 	current.adc_buffer[2][current.adc_buffer_index] = read_adc();
1A4C:  BCF    FD8.0
1A4E:  RLCF   xC3,W
1A50:  CLRF   03
1A52:  ADDLW  A3
1A54:  MOVWF  FE9
1A56:  MOVLW  00
1A58:  ADDWFC 03,W
1A5A:  MOVWF  FEA
1A5C:  BSF    FC2.1
1A5E:  BTFSC  FC2.1
1A60:  BRA    1A5E
1A62:  MOVFF  FC3,FEF
1A66:  MOVFF  FC4,FEC
1A6A:  RETURN 0
.................... }
.................... 
.................... int8 read_dip_switch(void) {
.................... 	int16 adc;
.................... 
.................... 	set_adc_channel(9);
*
14C2:  MOVLW  24
14C4:  MOVWF  01
14C6:  MOVF   FC2,W
14C8:  ANDLW  C3
14CA:  IORWF  01,W
14CC:  MOVWF  FC2
.................... 	delay_ms(1);
14CE:  MOVLW  01
14D0:  MOVLB  1
14D2:  MOVWF  x37
14D4:  MOVLB  0
14D6:  RCALL  1498
.................... 	adc=read_adc();
14D8:  BSF    FC2.1
14DA:  BTFSC  FC2.1
14DC:  BRA    14DA
14DE:  MOVFF  FC4,136
14E2:  MOVFF  FC3,135
.................... 
.................... 	/* (note that table is sorted by vout reading 
.................... 	SW3.1 (LSB) SW3.2 (MSB) VALUE ADC
....................     OFF         OFF         0     1023
.................... 	OFF         ON          2     682
....................     ON          OFF         1     511
.................... 	ON          ON          3     409
.................... 	*/
.................... 
.................... 	if ( adc > (1023-64) )
14E6:  MOVLB  1
14E8:  MOVF   x36,W
14EA:  SUBLW  02
14EC:  BC    14FE
14EE:  XORLW  FF
14F0:  BNZ   14F8
14F2:  MOVF   x35,W
14F4:  SUBLW  BF
14F6:  BC    14FE
.................... 		return 0;
14F8:  MOVLW  00
14FA:  MOVWF  01
14FC:  BRA    152E
.................... 	if ( adc > (682-64) )
14FE:  MOVF   x36,W
1500:  SUBLW  01
1502:  BC    1514
1504:  XORLW  FF
1506:  BNZ   150E
1508:  MOVF   x35,W
150A:  SUBLW  6A
150C:  BC    1514
.................... 		return 2;
150E:  MOVLW  02
1510:  MOVWF  01
1512:  BRA    152E
.................... 	if ( adc > (511-64) )
1514:  MOVF   x36,W
1516:  SUBLW  00
1518:  BC    152A
151A:  XORLW  FF
151C:  BNZ   1524
151E:  MOVF   x35,W
1520:  SUBLW  BF
1522:  BC    152A
.................... 		return 1;
1524:  MOVLW  01
1526:  MOVWF  01
1528:  BRA    152E
.................... 
.................... 	return 3;
152A:  MOVLW  03
152C:  MOVWF  01
152E:  MOVLB  0
1530:  GOTO   169C (RETURN)
.................... }
.................... 
.................... #include "param_dcswc_module_latching_contactor.c"
.................... #inline
.................... char xor_crc(char oldcrc, char data) {
.................... 	return oldcrc ^ data;
*
1714:  MOVF   x22,W
1716:  XORWF  x23,W
1718:  MOVWF  01
*
1762:  MOVF   x22,W
1764:  XORWF  x23,W
1766:  MOVWF  01
.................... }
.................... 
.................... char EEPROMDataRead( int16 address, int8 *data, int16 count ) {
*
16AC:  MOVLB  1
16AE:  CLRF   x1E
.................... 	char crc=0;
.................... 
.................... 	while ( count-- != 0 ) {
16B0:  MOVFF  11D,120
16B4:  MOVF   x1C,W
16B6:  BTFSC  FD8.2
16B8:  DECF   x1D,F
16BA:  DECF   x1C,F
16BC:  MOVWF  x1F
16BE:  MOVF   x1F,F
16C0:  BNZ   16C6
16C2:  MOVF   x20,F
16C4:  BZ    1726
.................... 		*data = read_eeprom( address++ );
16C6:  MOVFF  11B,03
16CA:  MOVF   x1A,W
16CC:  MOVWF  FE9
16CE:  MOVFF  03,FEA
16D2:  MOVF   x19,W
16D4:  MOVWF  03
16D6:  MOVF   x18,W
16D8:  INCF   x18,F
16DA:  BTFSC  FD8.2
16DC:  INCF   x19,F
16DE:  MOVWF  x21
16E0:  MOVFF  03,122
16E4:  MOVFF  FF2,123
16E8:  BCF    FF2.7
16EA:  MOVFF  121,FA9
16EE:  BCF    FA6.6
16F0:  BCF    FA6.7
16F2:  BSF    FA6.0
16F4:  MOVF   FA8,W
16F6:  BTFSC  x23.7
16F8:  BSF    FF2.7
16FA:  MOVWF  FEF
.................... 		crc = xor_crc(crc,*data);
16FC:  MOVFF  11B,03
1700:  MOVF   x1A,W
1702:  MOVWF  FE9
1704:  MOVFF  03,FEA
1708:  MOVFF  FEF,11F
170C:  MOVFF  11E,122
1710:  MOVFF  11F,123
*
171A:  MOVFF  01,11E
.................... 		data++;
171E:  INCF   x1A,F
1720:  BTFSC  FD8.2
1722:  INCF   x1B,F
1724:  BRA    16B0
.................... 	}
.................... 	return crc;
1726:  MOVFF  11E,01
172A:  MOVLB  0
172C:  GOTO   1958 (RETURN)
.................... }
.................... 
.................... char EEPROMDataWrite( int16 address, int8 *data, int16 count ) {
1730:  MOVLB  1
1732:  CLRF   x20
.................... 	char crc=0;
.................... 
.................... 	while ( count-- != 0 ) {
1734:  MOVFF  11F,122
1738:  MOVF   x1E,W
173A:  BTFSC  FD8.2
173C:  DECF   x1F,F
173E:  DECF   x1E,F
1740:  MOVWF  x21
1742:  MOVF   x21,F
1744:  BNZ   174A
1746:  MOVF   x22,F
1748:  BZ    17C2
.................... 		/* restart_wdt() */
.................... 		crc = xor_crc(crc,*data);
174A:  MOVFF  11D,03
174E:  MOVF   x1C,W
1750:  MOVWF  FE9
1752:  MOVFF  03,FEA
1756:  MOVFF  FEF,121
175A:  MOVFF  120,122
175E:  MOVFF  121,123
*
1768:  MOVFF  01,120
.................... 		write_eeprom( address++, *data++ );
176C:  MOVF   x1B,W
176E:  MOVWF  03
1770:  MOVF   x1A,W
1772:  INCF   x1A,F
1774:  BTFSC  FD8.2
1776:  INCF   x1B,F
1778:  MOVWF  x21
177A:  MOVFF  03,122
177E:  MOVF   x1D,W
1780:  MOVWF  03
1782:  MOVF   x1C,W
1784:  INCF   x1C,F
1786:  BTFSC  FD8.2
1788:  INCF   x1D,F
178A:  MOVWF  FE9
178C:  MOVFF  03,FEA
1790:  MOVFF  FEF,123
1794:  MOVF   FF2,W
1796:  MOVWF  00
1798:  BCF    FF2.7
179A:  MOVFF  121,FA9
179E:  MOVFF  123,FA8
17A2:  BCF    FA6.6
17A4:  BCF    FA6.7
17A6:  BSF    FA6.2
17A8:  MOVLB  F
17AA:  MOVLW  55
17AC:  MOVWF  FA7
17AE:  MOVLW  AA
17B0:  MOVWF  FA7
17B2:  BSF    FA6.1
17B4:  BTFSC  FA6.1
17B6:  BRA    17B4
17B8:  BCF    FA6.2
17BA:  MOVF   00,W
17BC:  IORWF  FF2,F
17BE:  MOVLB  1
17C0:  BRA    1734
.................... 	}
.................... 
.................... 	return crc;
17C2:  MOVFF  120,01
17C6:  MOVLB  0
17C8:  GOTO   17E8 (RETURN)
.................... }
.................... 
.................... void write_param_file() {
.................... 	int8 crc;
.................... 
.................... 	/* write the config structure */
.................... 	crc = EEPROMDataWrite(PARAM_ADDRESS,(void *)&config,sizeof(config));
17CC:  MOVLB  1
17CE:  MOVLW  1B
17D0:  MOVWF  x18
17D2:  CLRF   x1B
17D4:  MOVLW  02
17D6:  MOVWF  x1A
17D8:  CLRF   x1D
17DA:  MOVFF  118,11C
17DE:  CLRF   x1F
17E0:  MOVLW  48
17E2:  MOVWF  x1E
17E4:  MOVLB  0
17E6:  BRA    1730
17E8:  MOVFF  01,117
.................... 	/* write the CRC was calculated on the structure */
.................... 	write_eeprom(PARAM_CRC_ADDRESS,crc);
17EC:  MOVF   FF2,W
17EE:  MOVWF  00
17F0:  BCF    FF2.7
17F2:  CLRF   FA9
17F4:  MOVFF  117,FA8
17F8:  BCF    FA6.6
17FA:  BCF    FA6.7
17FC:  BSF    FA6.2
17FE:  MOVLB  F
1800:  MOVLW  55
1802:  MOVWF  FA7
1804:  MOVLW  AA
1806:  MOVWF  FA7
1808:  BSF    FA6.1
180A:  BTFSC  FA6.1
180C:  BRA    180A
180E:  BCF    FA6.2
1810:  MOVF   00,W
1812:  IORWF  FF2,F
1814:  MOVLB  0
1816:  RETURN 0
.................... }
.................... 
.................... void write_default_param_file() {
.................... 	int8 i;
.................... 
.................... 	current.default_params_written=1;
1818:  MOVLW  01
181A:  MOVWF  xCE
.................... 
.................... 	/* both LEDs on */
.................... 	timers.led_on_a=150;
181C:  MOVLW  96
181E:  MOVWF  xD0
.................... 	timers.led_on_b=150;
1820:  MOVWF  xD1
.................... 
.................... 
.................... 	for ( i=0 ; i<2 ; i++ ) {
1822:  MOVLB  1
1824:  CLRF   x16
1826:  MOVF   x16,W
1828:  SUBLW  01
182A:  BTFSS  FD8.0
182C:  BRA    1936
.................... 		config.ch[i].lvd_disconnect_adc=303;
182E:  MOVF   x16,W
1830:  MULLW  24
1832:  MOVF   FF3,W
1834:  CLRF   x18
1836:  MOVWF  x17
1838:  MOVLW  04
183A:  ADDWF  x17,W
183C:  MOVWF  01
183E:  MOVLW  00
1840:  ADDWFC x18,W
1842:  MOVWF  03
1844:  MOVF   01,W
1846:  ADDLW  1B
1848:  MOVWF  FE9
184A:  MOVLW  00
184C:  ADDWFC 03,W
184E:  MOVWF  FEA
1850:  MOVLW  01
1852:  MOVWF  FEC
1854:  MOVF   FED,F
1856:  MOVLW  2F
1858:  MOVWF  FEF
.................... 		config.ch[i].lvd_disconnect_delay=40;
185A:  MOVF   x16,W
185C:  MULLW  24
185E:  MOVF   FF3,W
1860:  CLRF   x18
1862:  MOVWF  x17
1864:  MOVLW  06
1866:  ADDWF  x17,W
1868:  MOVWF  01
186A:  MOVLW  00
186C:  ADDWFC x18,W
186E:  MOVWF  03
1870:  MOVF   01,W
1872:  ADDLW  1B
1874:  MOVWF  FE9
1876:  MOVLW  00
1878:  ADDWFC 03,W
187A:  MOVWF  FEA
187C:  CLRF   FEC
187E:  MOVF   FED,F
1880:  MOVLW  28
1882:  MOVWF  FEF
.................... 		config.ch[i].lvd_reconnect_adc=308;
1884:  MOVF   x16,W
1886:  MULLW  24
1888:  MOVF   FF3,W
188A:  CLRF   x18
188C:  MOVWF  x17
188E:  MOVLW  08
1890:  ADDWF  x17,W
1892:  MOVWF  01
1894:  MOVLW  00
1896:  ADDWFC x18,W
1898:  MOVWF  03
189A:  MOVF   01,W
189C:  ADDLW  1B
189E:  MOVWF  FE9
18A0:  MOVLW  00
18A2:  ADDWFC 03,W
18A4:  MOVWF  FEA
18A6:  MOVLW  01
18A8:  MOVWF  FEC
18AA:  MOVF   FED,F
18AC:  MOVLW  34
18AE:  MOVWF  FEF
.................... 
.................... 		config.ch[i].hvd_disconnect_adc=410;
18B0:  MOVF   x16,W
18B2:  MULLW  24
18B4:  MOVF   FF3,W
18B6:  CLRF   x18
18B8:  MOVWF  x17
18BA:  MOVLW  0C
18BC:  ADDWF  x17,W
18BE:  MOVWF  01
18C0:  MOVLW  00
18C2:  ADDWFC x18,W
18C4:  MOVWF  03
18C6:  MOVF   01,W
18C8:  ADDLW  1B
18CA:  MOVWF  FE9
18CC:  MOVLW  00
18CE:  ADDWFC 03,W
18D0:  MOVWF  FEA
18D2:  MOVLW  01
18D4:  MOVWF  FEC
18D6:  MOVF   FED,F
18D8:  MOVLW  9A
18DA:  MOVWF  FEF
.................... 		config.ch[i].hvd_disconnect_delay=15;
18DC:  MOVF   x16,W
18DE:  MULLW  24
18E0:  MOVF   FF3,W
18E2:  CLRF   x18
18E4:  MOVWF  x17
18E6:  MOVLW  0E
18E8:  ADDWF  x17,W
18EA:  MOVWF  01
18EC:  MOVLW  00
18EE:  ADDWFC x18,W
18F0:  MOVWF  03
18F2:  MOVF   01,W
18F4:  ADDLW  1B
18F6:  MOVWF  FE9
18F8:  MOVLW  00
18FA:  ADDWFC 03,W
18FC:  MOVWF  FEA
18FE:  CLRF   FEC
1900:  MOVF   FED,F
1902:  MOVLW  0F
1904:  MOVWF  FEF
.................... 		config.ch[i].hvd_reconnect_adc=385;
1906:  MOVF   x16,W
1908:  MULLW  24
190A:  MOVF   FF3,W
190C:  CLRF   x18
190E:  MOVWF  x17
1910:  MOVLW  10
1912:  ADDWF  x17,W
1914:  MOVWF  01
1916:  MOVLW  00
1918:  ADDWFC x18,W
191A:  MOVWF  03
191C:  MOVF   01,W
191E:  ADDLW  1B
1920:  MOVWF  FE9
1922:  MOVLW  00
1924:  ADDWFC 03,W
1926:  MOVWF  FEA
1928:  MOVLW  01
192A:  MOVWF  FEC
192C:  MOVF   FED,F
192E:  MOVLW  81
1930:  MOVWF  FEF
1932:  INCF   x16,F
1934:  BRA    1826
.................... 	}
.................... 	
.................... 	/* write them so next time we use from EEPROM */
.................... 	write_param_file();
1936:  MOVLB  0
1938:  RCALL  17CC
193A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... void read_param_file() {
.................... 	int8 crc;
.................... 
.................... 	crc = EEPROMDataRead(PARAM_ADDRESS, (void *)&config, sizeof(config)); 
193C:  MOVLB  1
193E:  MOVLW  1B
1940:  MOVWF  x16
1942:  CLRF   x19
1944:  MOVLW  02
1946:  MOVWF  x18
1948:  CLRF   x1B
194A:  MOVFF  116,11A
194E:  CLRF   x1D
1950:  MOVLW  48
1952:  MOVWF  x1C
1954:  MOVLB  0
1956:  BRA    16AC
1958:  MOVFF  01,115
.................... 		
.................... 	if ( crc != read_eeprom(PARAM_CRC_ADDRESS) ) {
195C:  MOVFF  FF2,116
1960:  BCF    FF2.7
1962:  CLRF   FA9
1964:  BCF    FA6.6
1966:  BCF    FA6.7
1968:  BSF    FA6.0
196A:  MOVF   FA8,W
196C:  MOVLB  1
196E:  BTFSC  x16.7
1970:  BSF    FF2.7
1972:  SUBWF  x15,W
1974:  BZ    197C
.................... 		write_default_param_file();
1976:  MOVLB  0
1978:  RCALL  1818
197A:  MOVLB  1
.................... 	}
197C:  MOVLB  0
197E:  GOTO   36A2 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #include "i2c_handler_dcswc_module_latching_contactor.c"
.................... #include "registers_dcswc_module_latching_contactor.h"
.................... 
.................... /* first two or three registers will give enough information for telemetry */
.................... /* 10 bit input voltage ADC averaged value */
.................... #define I2C_REG_VOLTAGE_INPUT_AVG             0  
.................... /* two 8 bit channel states (A is MSB / B is LSB) */
.................... #define I2C_REG_STATE_CONTACTORS              1 
.................... /* 10 bit NTC thermistor ADC averaged value */
.................... #define I2C_REG_TEMPERATURE_BOARD_AVG         2
.................... 
....................   
.................... /* channel 0 / A */
.................... /* command can only come from I2C interface */
.................... #define I2C_REG_CH0_COMMAND_ON                3 /* R/W seconds */
.................... #define I2C_REG_CH0_COMMAND_ON_HOLD           4
.................... 
.................... #define I2C_REG_CH0_COMMAND_OFF               5 /* R/W seconds */
.................... #define I2C_REG_CH0_COMMAND_OFF_HOLD          6
.................... 
.................... /* low voltage disconnect */
.................... #define I2C_REG_CH0_LVD_DISCONNECT            7  /* R seconds */
.................... #define I2C_REG_CH0_LVD_RECONNECT             8 
.................... 
.................... /* high voltage disconnect */
.................... #define I2C_REG_CH0_HVD_DISCONNECT            9 /* R seconds */
.................... #define I2C_REG_CH0_HVD_RECONNECT             10
.................... 
.................... /* low temperature disconnect */
.................... #define I2C_REG_CH0_LTD_DISCONNECT            11  /* R seconds */
.................... #define I2C_REG_CH0_LTD_RECONNECT             12
.................... 
.................... /* high temperature disconnect */
.................... #define I2C_REG_CH0_HTD_DISCONNECT            13 /* R seconds */
.................... #define I2C_REG_CH0_HTD_RECONNECT             14
.................... 
.................... /* reserved for future, unimplemented */
.................... #define I2C_REG_CH0_FUT_DISCONNECT            15 /* R seconds */
.................... #define I2C_REG_CH0_FUT_RECONNECT             16
.................... 
.................... /* channel 1 / B */
.................... /* command can only come from I2C interface */
.................... #define I2C_REG_CH1_COMMAND_ON                17 /* R/W seconds */
.................... #define I2C_REG_CH1_COMMAND_ON_HOLD           18
.................... 
.................... #define I2C_REG_CH1_COMMAND_OFF               19 /* R/W seconds */
.................... #define I2C_REG_CH1_COMMAND_OFF_HOLD          20
.................... 
.................... /* low voltage disconnect */
.................... #define I2C_REG_CH1_LVD_DISCONNECT            21 /* R seconds */
.................... #define I2C_REG_CH1_LVD_RECONNECT             22 
.................... 
.................... /* high voltage disconnect */
.................... #define I2C_REG_CH1_HVD_DISCONNECT            23 /* R seconds */
.................... #define I2C_REG_CH1_HVD_RECONNECT             24
.................... 
.................... /* low temperature disconnect */
.................... #define I2C_REG_CH1_LTD_DISCONNECT            25  /* R seconds */
.................... #define I2C_REG_CH1_LTD_RECONNECT             26
.................... 
.................... /* high temperature disconnect */
.................... #define I2C_REG_CH1_HTD_DISCONNECT            27 /* R seconds */
.................... #define I2C_REG_CH1_HTD_RECONNECT             28
.................... 
.................... /* reserved for future, unimplemented */
.................... #define I2C_REG_CH1_FUT_DISCONNECT            29 /* R seconds */
.................... #define I2C_REG_CH1_FUT_RECONNECT             30
.................... 
.................... /* meta */
.................... #define I2C_REG_SEQUENCE_NUMBER               31 /* R */
.................... #define I2C_REG_TIME_INTERVAL_MILLISECONDS    32
.................... #define I2C_REG_TIME_UPTIME_MINUTES           33
.................... #define I2C_REG_DEFAULT_PARAMS_WRITTEN        34
.................... 
.................... /* channel configuration */
.................... /* channel 0 / A */
.................... #define I2C_REG_CH0_COMMAND_ON_HOLD_INITIAL   64
.................... 
.................... #define I2C_REG_CH0_COMMAND_OFF_HOLD_INITIAL  65
.................... 
.................... #define I2C_REG_CH0_LVD_DISCONNECT_ADC        66
.................... #define I2C_REG_CH0_LVD_DISCONNECT_DELAY      67
.................... #define I2C_REG_CH0_LVD_RECONNECT_ADC         68
.................... #define I2C_REG_CH0_LVD_RECONNECT_DELAY       69
.................... 
.................... #define I2C_REG_CH0_HVD_DISCONNECT_ADC        70
.................... #define I2C_REG_CH0_HVD_DISCONNECT_DELAY      71
.................... #define I2C_REG_CH0_HVD_RECONNECT_ADC         72
.................... #define I2C_REG_CH0_HVD_RECONNECT_DELAY       73
.................... 
.................... #define I2C_REG_CH0_LTD_DISCONNECT_ADC        74
.................... #define I2C_REG_CH0_LTD_DISCONNECT_DELAY      75
.................... #define I2C_REG_CH0_LTD_RECONNECT_ADC         76
.................... #define I2C_REG_CH0_LTD_RECONNECT_DELAY       77
.................... 
.................... #define I2C_REG_CH0_HTD_DISCONNECT_ADC        78
.................... #define I2C_REG_CH0_HTD_DISCONNECT_DELAY      79
.................... #define I2C_REG_CH0_HTD_RECONNECT_ADC         80
.................... #define I2C_REG_CH0_HTD_RECONNECT_DELAY       81
.................... 
.................... #define I2C_REG_CH0_FUT_DISCONNECT_VALUE      82
.................... #define I2C_REG_CH0_FUT_DISCONNECT_DELAY      83
.................... #define I2C_REG_CH0_FUT_RECONNECT_VALUE       84
.................... #define I2C_REG_CH0_FUT_RECONNECT_DELAY       85
.................... 
.................... /* channel 1 / B */
.................... #define I2C_REG_CH1_COMMAND_ON_HOLD_INITIAL   86
.................... 
.................... #define I2C_REG_CH1_COMMAND_OFF_HOLD_INITIAL  87
.................... 
.................... #define I2C_REG_CH1_LVD_DISCONNECT_ADC        88
.................... #define I2C_REG_CH1_LVD_DISCONNECT_DELAY      89
.................... #define I2C_REG_CH1_LVD_RECONNECT_ADC         90
.................... #define I2C_REG_CH1_LVD_RECONNECT_DELAY       91
.................... 
.................... #define I2C_REG_CH1_HVD_DISCONNECT_ADC        92
.................... #define I2C_REG_CH1_HVD_DISCONNECT_DELAY      93
.................... #define I2C_REG_CH1_HVD_RECONNECT_ADC         94
.................... #define I2C_REG_CH1_HVD_RECONNECT_DELAY       95
.................... 
.................... #define I2C_REG_CH1_LTD_DISCONNECT_ADC        96
.................... #define I2C_REG_CH1_LTD_DISCONNECT_DELAY      97
.................... #define I2C_REG_CH1_LTD_RECONNECT_ADC         98
.................... #define I2C_REG_CH1_LTD_RECONNECT_DELAY       99
.................... 
.................... #define I2C_REG_CH1_HTD_DISCONNECT_ADC        100
.................... #define I2C_REG_CH1_HTD_DISCONNECT_DELAY      101
.................... #define I2C_REG_CH1_HTD_RECONNECT_ADC         102
.................... #define I2C_REG_CH1_HTD_RECONNECT_DELAY       103
.................... 
.................... #define I2C_REG_CH1_FUT_DISCONNECT_VALUE      104
.................... #define I2C_REG_CH1_FUT_DISCONNECT_DELAY      105
.................... #define I2C_REG_CH1_FUT_RECONNECT_VALUE       106
.................... #define I2C_REG_CH1_FUT_RECONNECT_DELAY       107
.................... 
.................... 
.................... /* configuration */
.................... #define I2C_REG_CONFIG_HARDWARE_MODEL              128 /* R */
.................... #define I2C_REG_CONFIG_HARDWARE_VERSION            129
.................... #define I2C_REG_CONFIG_SOFTWARE_MODEL              130
.................... #define I2C_REG_CONFIG_SOFTWARE_VERSION            131
.................... #define I2C_REG_CONFIG_SOFTWARE_YEAR               132
.................... #define I2C_REG_CONFIG_SOFTWARE_MONTH              133
.................... #define I2C_REG_CONFIG_SOFTWARE_DAY                134
.................... 
.................... #define I2C_REG_CONFIG_PARAM_WRITE                 135 /* R / W */
.................... 
.................... 
.................... 
.................... void write_i2c(int8 addr, int16 value) {
.................... 	int8 c;
.................... 
.................... 	/* c is the channel we are accessing based on register range */
.................... 	if ( addr >= I2C_REG_CH1_COMMAND_ON && addr <= I2C_REG_CH1_FUT_RECONNECT ) {
*
00DC:  MOVLB  1
00DE:  MOVF   x3D,W
00E0:  SUBLW  10
00E2:  BC    00F4
00E4:  MOVF   x3D,W
00E6:  SUBLW  1E
00E8:  BNC   00F4
.................... 		/* channel 1 status region */
.................... 		c=1;
00EA:  MOVLW  01
00EC:  MOVWF  x40
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON - I2C_REG_CH0_COMMAND_ON);
00EE:  MOVLW  0E
00F0:  SUBWF  x3D,F
.................... 	} else if ( addr >= I2C_REG_CH1_COMMAND_ON_HOLD && addr <= I2C_REG_CH1_FUT_RECONNECT_DELAY ) {
00F2:  BRA    010C
00F4:  MOVF   x3D,W
00F6:  SUBLW  11
00F8:  BC    010A
00FA:  MOVF   x3D,W
00FC:  SUBLW  6B
00FE:  BNC   010A
.................... 		/* channel 1 configuration region */
.................... 		c=1;
0100:  MOVLW  01
0102:  MOVWF  x40
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON_HOLD - I2C_REG_CH0_COMMAND_ON_HOLD );
0104:  MOVLW  0E
0106:  SUBWF  x3D,F
.................... 	} else {
0108:  BRA    010C
.................... 		c=0;
010A:  CLRF   x40
.................... 	}
.................... 
.................... 	switch ( addr ) {
010C:  MOVF   x3D,W
010E:  XORLW  03
0110:  MOVLB  0
0112:  BZ    018A
0114:  XORLW  07
0116:  BZ    01BA
0118:  XORLW  01
011A:  BZ    01EA
011C:  XORLW  03
011E:  BTFSC  FD8.2
0120:  BRA    021A
0122:  XORLW  44
0124:  BTFSC  FD8.2
0126:  BRA    024A
0128:  XORLW  01
012A:  BTFSC  FD8.2
012C:  BRA    027A
012E:  XORLW  07
0130:  BTFSC  FD8.2
0132:  BRA    02AA
0134:  XORLW  01
0136:  BTFSC  FD8.2
0138:  BRA    02DA
013A:  XORLW  03
013C:  BTFSC  FD8.2
013E:  BRA    030A
0140:  XORLW  01
0142:  BTFSC  FD8.2
0144:  BRA    033A
0146:  XORLW  0F
0148:  BTFSC  FD8.2
014A:  BRA    036A
014C:  XORLW  01
014E:  BTFSC  FD8.2
0150:  BRA    039A
0152:  XORLW  03
0154:  BTFSC  FD8.2
0156:  BRA    03CA
0158:  XORLW  01
015A:  BTFSC  FD8.2
015C:  BRA    03FA
015E:  XORLW  07
0160:  BTFSC  FD8.2
0162:  BRA    042A
0164:  XORLW  01
0166:  BTFSC  FD8.2
0168:  BRA    045A
016A:  XORLW  03
016C:  BTFSC  FD8.2
016E:  BRA    048A
0170:  XORLW  01
0172:  BTFSC  FD8.2
0174:  BRA    04BA
0176:  XORLW  1F
0178:  BTFSC  FD8.2
017A:  BRA    04EA
017C:  XORLW  01
017E:  BTFSC  FD8.2
0180:  BRA    051A
0182:  XORLW  D6
0184:  BTFSC  FD8.2
0186:  BRA    054A
0188:  BRA    0590
.................... 		case I2C_REG_CH0_COMMAND_ON:
.................... 			channel[c].command_on_seconds=value;
018A:  MOVLB  1
018C:  MOVF   x40,W
018E:  MULLW  19
0190:  MOVF   FF3,W
0192:  CLRF   x42
0194:  MOVWF  x41
0196:  MOVLW  01
0198:  ADDWF  x41,W
019A:  MOVWF  01
019C:  MOVLW  00
019E:  ADDWFC x42,W
01A0:  MOVWF  03
01A2:  MOVF   01,W
01A4:  ADDLW  D4
01A6:  MOVWF  FE9
01A8:  MOVLW  00
01AA:  ADDWFC 03,W
01AC:  MOVWF  FEA
01AE:  MOVFF  13F,FEC
01B2:  MOVF   FED,F
01B4:  MOVFF  13E,FEF
01B8:  MOVLB  0
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD:
.................... 			channel[c].command_on_hold_seconds=value;
01BA:  MOVLB  1
01BC:  MOVF   x40,W
01BE:  MULLW  19
01C0:  MOVF   FF3,W
01C2:  CLRF   x42
01C4:  MOVWF  x41
01C6:  MOVLW  03
01C8:  ADDWF  x41,W
01CA:  MOVWF  01
01CC:  MOVLW  00
01CE:  ADDWFC x42,W
01D0:  MOVWF  03
01D2:  MOVF   01,W
01D4:  ADDLW  D4
01D6:  MOVWF  FE9
01D8:  MOVLW  00
01DA:  ADDWFC 03,W
01DC:  MOVWF  FEA
01DE:  MOVFF  13F,FEC
01E2:  MOVF   FED,F
01E4:  MOVFF  13E,FEF
01E8:  MOVLB  0
.................... 	
.................... 		case I2C_REG_CH0_COMMAND_OFF:
.................... 			channel[c].command_off_seconds=value;
01EA:  MOVLB  1
01EC:  MOVF   x40,W
01EE:  MULLW  19
01F0:  MOVF   FF3,W
01F2:  CLRF   x42
01F4:  MOVWF  x41
01F6:  MOVLW  05
01F8:  ADDWF  x41,W
01FA:  MOVWF  01
01FC:  MOVLW  00
01FE:  ADDWFC x42,W
0200:  MOVWF  03
0202:  MOVF   01,W
0204:  ADDLW  D4
0206:  MOVWF  FE9
0208:  MOVLW  00
020A:  ADDWFC 03,W
020C:  MOVWF  FEA
020E:  MOVFF  13F,FEC
0212:  MOVF   FED,F
0214:  MOVFF  13E,FEF
0218:  MOVLB  0
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD:
.................... 			channel[c].command_off_hold_seconds=value;
021A:  MOVLB  1
021C:  MOVF   x40,W
021E:  MULLW  19
0220:  MOVF   FF3,W
0222:  CLRF   x42
0224:  MOVWF  x41
0226:  MOVLW  07
0228:  ADDWF  x41,W
022A:  MOVWF  01
022C:  MOVLW  00
022E:  ADDWFC x42,W
0230:  MOVWF  03
0232:  MOVF   01,W
0234:  ADDLW  D4
0236:  MOVWF  FE9
0238:  MOVLW  00
023A:  ADDWFC 03,W
023C:  MOVWF  FEA
023E:  MOVFF  13F,FEC
0242:  MOVF   FED,F
0244:  MOVFF  13E,FEF
0248:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_ADC:
.................... 			config.ch[c].lvd_disconnect_adc=value;
024A:  MOVLB  1
024C:  MOVF   x40,W
024E:  MULLW  24
0250:  MOVF   FF3,W
0252:  CLRF   x42
0254:  MOVWF  x41
0256:  MOVLW  04
0258:  ADDWF  x41,W
025A:  MOVWF  01
025C:  MOVLW  00
025E:  ADDWFC x42,W
0260:  MOVWF  03
0262:  MOVF   01,W
0264:  ADDLW  1B
0266:  MOVWF  FE9
0268:  MOVLW  00
026A:  ADDWFC 03,W
026C:  MOVWF  FEA
026E:  MOVFF  13F,FEC
0272:  MOVF   FED,F
0274:  MOVFF  13E,FEF
0278:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_DELAY:
.................... 			config.ch[c].lvd_disconnect_delay=value;
027A:  MOVLB  1
027C:  MOVF   x40,W
027E:  MULLW  24
0280:  MOVF   FF3,W
0282:  CLRF   x42
0284:  MOVWF  x41
0286:  MOVLW  06
0288:  ADDWF  x41,W
028A:  MOVWF  01
028C:  MOVLW  00
028E:  ADDWFC x42,W
0290:  MOVWF  03
0292:  MOVF   01,W
0294:  ADDLW  1B
0296:  MOVWF  FE9
0298:  MOVLW  00
029A:  ADDWFC 03,W
029C:  MOVWF  FEA
029E:  MOVFF  13F,FEC
02A2:  MOVF   FED,F
02A4:  MOVFF  13E,FEF
02A8:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_RECONNECT_ADC:
.................... 			config.ch[c].lvd_reconnect_adc=value;
02AA:  MOVLB  1
02AC:  MOVF   x40,W
02AE:  MULLW  24
02B0:  MOVF   FF3,W
02B2:  CLRF   x42
02B4:  MOVWF  x41
02B6:  MOVLW  08
02B8:  ADDWF  x41,W
02BA:  MOVWF  01
02BC:  MOVLW  00
02BE:  ADDWFC x42,W
02C0:  MOVWF  03
02C2:  MOVF   01,W
02C4:  ADDLW  1B
02C6:  MOVWF  FE9
02C8:  MOVLW  00
02CA:  ADDWFC 03,W
02CC:  MOVWF  FEA
02CE:  MOVFF  13F,FEC
02D2:  MOVF   FED,F
02D4:  MOVFF  13E,FEF
02D8:  MOVLB  0
.................... 		case I2C_REG_CH0_LVD_RECONNECT_DELAY:
.................... 			config.ch[c].lvd_reconnect_delay=value;
02DA:  MOVLB  1
02DC:  MOVF   x40,W
02DE:  MULLW  24
02E0:  MOVF   FF3,W
02E2:  CLRF   x42
02E4:  MOVWF  x41
02E6:  MOVLW  0A
02E8:  ADDWF  x41,W
02EA:  MOVWF  01
02EC:  MOVLW  00
02EE:  ADDWFC x42,W
02F0:  MOVWF  03
02F2:  MOVF   01,W
02F4:  ADDLW  1B
02F6:  MOVWF  FE9
02F8:  MOVLW  00
02FA:  ADDWFC 03,W
02FC:  MOVWF  FEA
02FE:  MOVFF  13F,FEC
0302:  MOVF   FED,F
0304:  MOVFF  13E,FEF
0308:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_ADC:
.................... 			config.ch[c].hvd_disconnect_adc=value;
030A:  MOVLB  1
030C:  MOVF   x40,W
030E:  MULLW  24
0310:  MOVF   FF3,W
0312:  CLRF   x42
0314:  MOVWF  x41
0316:  MOVLW  0C
0318:  ADDWF  x41,W
031A:  MOVWF  01
031C:  MOVLW  00
031E:  ADDWFC x42,W
0320:  MOVWF  03
0322:  MOVF   01,W
0324:  ADDLW  1B
0326:  MOVWF  FE9
0328:  MOVLW  00
032A:  ADDWFC 03,W
032C:  MOVWF  FEA
032E:  MOVFF  13F,FEC
0332:  MOVF   FED,F
0334:  MOVFF  13E,FEF
0338:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_DELAY:
.................... 			config.ch[c].hvd_disconnect_delay=value;
033A:  MOVLB  1
033C:  MOVF   x40,W
033E:  MULLW  24
0340:  MOVF   FF3,W
0342:  CLRF   x42
0344:  MOVWF  x41
0346:  MOVLW  0E
0348:  ADDWF  x41,W
034A:  MOVWF  01
034C:  MOVLW  00
034E:  ADDWFC x42,W
0350:  MOVWF  03
0352:  MOVF   01,W
0354:  ADDLW  1B
0356:  MOVWF  FE9
0358:  MOVLW  00
035A:  ADDWFC 03,W
035C:  MOVWF  FEA
035E:  MOVFF  13F,FEC
0362:  MOVF   FED,F
0364:  MOVFF  13E,FEF
0368:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_RECONNECT_ADC:
.................... 			config.ch[c].hvd_reconnect_adc=value;
036A:  MOVLB  1
036C:  MOVF   x40,W
036E:  MULLW  24
0370:  MOVF   FF3,W
0372:  CLRF   x42
0374:  MOVWF  x41
0376:  MOVLW  10
0378:  ADDWF  x41,W
037A:  MOVWF  01
037C:  MOVLW  00
037E:  ADDWFC x42,W
0380:  MOVWF  03
0382:  MOVF   01,W
0384:  ADDLW  1B
0386:  MOVWF  FE9
0388:  MOVLW  00
038A:  ADDWFC 03,W
038C:  MOVWF  FEA
038E:  MOVFF  13F,FEC
0392:  MOVF   FED,F
0394:  MOVFF  13E,FEF
0398:  MOVLB  0
.................... 		case I2C_REG_CH0_HVD_RECONNECT_DELAY:
.................... 			config.ch[c].hvd_reconnect_delay=value;
039A:  MOVLB  1
039C:  MOVF   x40,W
039E:  MULLW  24
03A0:  MOVF   FF3,W
03A2:  CLRF   x42
03A4:  MOVWF  x41
03A6:  MOVLW  12
03A8:  ADDWF  x41,W
03AA:  MOVWF  01
03AC:  MOVLW  00
03AE:  ADDWFC x42,W
03B0:  MOVWF  03
03B2:  MOVF   01,W
03B4:  ADDLW  1B
03B6:  MOVWF  FE9
03B8:  MOVLW  00
03BA:  ADDWFC 03,W
03BC:  MOVWF  FEA
03BE:  MOVFF  13F,FEC
03C2:  MOVF   FED,F
03C4:  MOVFF  13E,FEF
03C8:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_ADC:
.................... 			config.ch[c].ltd_disconnect_adc=value;
03CA:  MOVLB  1
03CC:  MOVF   x40,W
03CE:  MULLW  24
03D0:  MOVF   FF3,W
03D2:  CLRF   x42
03D4:  MOVWF  x41
03D6:  MOVLW  14
03D8:  ADDWF  x41,W
03DA:  MOVWF  01
03DC:  MOVLW  00
03DE:  ADDWFC x42,W
03E0:  MOVWF  03
03E2:  MOVF   01,W
03E4:  ADDLW  1B
03E6:  MOVWF  FE9
03E8:  MOVLW  00
03EA:  ADDWFC 03,W
03EC:  MOVWF  FEA
03EE:  MOVFF  13F,FEC
03F2:  MOVF   FED,F
03F4:  MOVFF  13E,FEF
03F8:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_DELAY:
.................... 			config.ch[c].ltd_disconnect_delay=value;
03FA:  MOVLB  1
03FC:  MOVF   x40,W
03FE:  MULLW  24
0400:  MOVF   FF3,W
0402:  CLRF   x42
0404:  MOVWF  x41
0406:  MOVLW  16
0408:  ADDWF  x41,W
040A:  MOVWF  01
040C:  MOVLW  00
040E:  ADDWFC x42,W
0410:  MOVWF  03
0412:  MOVF   01,W
0414:  ADDLW  1B
0416:  MOVWF  FE9
0418:  MOVLW  00
041A:  ADDWFC 03,W
041C:  MOVWF  FEA
041E:  MOVFF  13F,FEC
0422:  MOVF   FED,F
0424:  MOVFF  13E,FEF
0428:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_RECONNECT_ADC:
.................... 			config.ch[c].ltd_reconnect_adc=value;
042A:  MOVLB  1
042C:  MOVF   x40,W
042E:  MULLW  24
0430:  MOVF   FF3,W
0432:  CLRF   x42
0434:  MOVWF  x41
0436:  MOVLW  18
0438:  ADDWF  x41,W
043A:  MOVWF  01
043C:  MOVLW  00
043E:  ADDWFC x42,W
0440:  MOVWF  03
0442:  MOVF   01,W
0444:  ADDLW  1B
0446:  MOVWF  FE9
0448:  MOVLW  00
044A:  ADDWFC 03,W
044C:  MOVWF  FEA
044E:  MOVFF  13F,FEC
0452:  MOVF   FED,F
0454:  MOVFF  13E,FEF
0458:  MOVLB  0
.................... 		case I2C_REG_CH0_LTD_RECONNECT_DELAY:
.................... 			config.ch[c].ltd_reconnect_delay=value;
045A:  MOVLB  1
045C:  MOVF   x40,W
045E:  MULLW  24
0460:  MOVF   FF3,W
0462:  CLRF   x42
0464:  MOVWF  x41
0466:  MOVLW  1A
0468:  ADDWF  x41,W
046A:  MOVWF  01
046C:  MOVLW  00
046E:  ADDWFC x42,W
0470:  MOVWF  03
0472:  MOVF   01,W
0474:  ADDLW  1B
0476:  MOVWF  FE9
0478:  MOVLW  00
047A:  ADDWFC 03,W
047C:  MOVWF  FEA
047E:  MOVFF  13F,FEC
0482:  MOVF   FED,F
0484:  MOVFF  13E,FEF
0488:  MOVLB  0
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_ADC:
.................... 			config.ch[c].htd_disconnect_adc=value;
048A:  MOVLB  1
048C:  MOVF   x40,W
048E:  MULLW  24
0490:  MOVF   FF3,W
0492:  CLRF   x42
0494:  MOVWF  x41
0496:  MOVLW  1C
0498:  ADDWF  x41,W
049A:  MOVWF  01
049C:  MOVLW  00
049E:  ADDWFC x42,W
04A0:  MOVWF  03
04A2:  MOVF   01,W
04A4:  ADDLW  1B
04A6:  MOVWF  FE9
04A8:  MOVLW  00
04AA:  ADDWFC 03,W
04AC:  MOVWF  FEA
04AE:  MOVFF  13F,FEC
04B2:  MOVF   FED,F
04B4:  MOVFF  13E,FEF
04B8:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_DELAY:
.................... 			config.ch[c].htd_disconnect_delay=value;
04BA:  MOVLB  1
04BC:  MOVF   x40,W
04BE:  MULLW  24
04C0:  MOVF   FF3,W
04C2:  CLRF   x42
04C4:  MOVWF  x41
04C6:  MOVLW  1E
04C8:  ADDWF  x41,W
04CA:  MOVWF  01
04CC:  MOVLW  00
04CE:  ADDWFC x42,W
04D0:  MOVWF  03
04D2:  MOVF   01,W
04D4:  ADDLW  1B
04D6:  MOVWF  FE9
04D8:  MOVLW  00
04DA:  ADDWFC 03,W
04DC:  MOVWF  FEA
04DE:  MOVFF  13F,FEC
04E2:  MOVF   FED,F
04E4:  MOVFF  13E,FEF
04E8:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_RECONNECT_ADC:
.................... 			config.ch[c].htd_reconnect_adc=value;
04EA:  MOVLB  1
04EC:  MOVF   x40,W
04EE:  MULLW  24
04F0:  MOVF   FF3,W
04F2:  CLRF   x42
04F4:  MOVWF  x41
04F6:  MOVLW  20
04F8:  ADDWF  x41,W
04FA:  MOVWF  01
04FC:  MOVLW  00
04FE:  ADDWFC x42,W
0500:  MOVWF  03
0502:  MOVF   01,W
0504:  ADDLW  1B
0506:  MOVWF  FE9
0508:  MOVLW  00
050A:  ADDWFC 03,W
050C:  MOVWF  FEA
050E:  MOVFF  13F,FEC
0512:  MOVF   FED,F
0514:  MOVFF  13E,FEF
0518:  MOVLB  0
.................... 		case I2C_REG_CH0_HTD_RECONNECT_DELAY:
.................... 			config.ch[c].htd_reconnect_delay=value;
051A:  MOVLB  1
051C:  MOVF   x40,W
051E:  MULLW  24
0520:  MOVF   FF3,W
0522:  CLRF   x42
0524:  MOVWF  x41
0526:  MOVLW  22
0528:  ADDWF  x41,W
052A:  MOVWF  01
052C:  MOVLW  00
052E:  ADDWFC x42,W
0530:  MOVWF  03
0532:  MOVF   01,W
0534:  ADDLW  1B
0536:  MOVWF  FE9
0538:  MOVLW  00
053A:  ADDWFC 03,W
053C:  MOVWF  FEA
053E:  MOVFF  13F,FEC
0542:  MOVF   FED,F
0544:  MOVFF  13E,FEF
0548:  MOVLB  0
.................... 
.................... 		/* don't need to implement FUT ... there is nowhere for it to go anyhow */
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			if ( 1 == value ) {
054A:  MOVLB  1
054C:  DECFSZ x3E,W
054E:  BRA    055C
0550:  MOVF   x3F,F
0552:  BNZ   055C
.................... 				timers.now_write_config=1;
0554:  MOVLB  0
0556:  BSF    xCF.3
.................... 			} else if ( 2 == value ) {
0558:  BRA    0590
055A:  MOVLB  1
055C:  MOVF   x3E,W
055E:  SUBLW  02
0560:  BNZ   056E
0562:  MOVF   x3F,F
0564:  BNZ   056E
.................... 				timers.now_reset_config=1;
0566:  MOVLB  0
0568:  BSF    xCF.4
.................... 			} else if ( 1802 == value ) {
056A:  BRA    0590
056C:  MOVLB  1
056E:  MOVF   x3E,W
0570:  SUBLW  0A
0572:  BNZ   0584
0574:  MOVF   x3F,W
0576:  SUBLW  07
0578:  BNZ   0584
.................... 				current.factory_unlocked =1;
057A:  MOVLW  01
057C:  MOVLB  0
057E:  MOVWF  xCA
.................... 			} else if ( 65535 == value ) {
0580:  BRA    0590
0582:  MOVLB  1
0584:  INCFSZ x3E,W
0586:  BRA    058E
0588:  INCFSZ x3F,W
058A:  BRA    058E
.................... 				reset_cpu();
058C:  RESET
058E:  MOVLB  0
.................... 			}
.................... 			break;
.................... 		default:
.................... 			/* do nothing */
.................... 	}
0590:  GOTO   0F1C (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... int16 map_i2c(int8 addr) {
.................... 	int8 c;
.................... 
.................... 	/* c is the channel we are accessing based on register range */
.................... 	if ( addr >= I2C_REG_CH1_COMMAND_ON && addr <= I2C_REG_CH1_FUT_RECONNECT ) {
*
0614:  MOVLB  1
0616:  MOVF   x3B,W
0618:  SUBLW  10
061A:  BC    062C
061C:  MOVF   x3B,W
061E:  SUBLW  1E
0620:  BNC   062C
.................... 		/* channel 1 status region */
.................... 		c=1;
0622:  MOVLW  01
0624:  MOVWF  x3C
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON - I2C_REG_CH0_COMMAND_ON);
0626:  MOVLW  0E
0628:  SUBWF  x3B,F
.................... 	} else if ( addr >= I2C_REG_CH1_COMMAND_ON_HOLD && addr <= I2C_REG_CH1_FUT_RECONNECT_DELAY ) {
062A:  BRA    0644
062C:  MOVF   x3B,W
062E:  SUBLW  11
0630:  BC    0642
0632:  MOVF   x3B,W
0634:  SUBLW  6B
0636:  BNC   0642
.................... 		/* channel 1 configuration region */
.................... 		c=1;
0638:  MOVLW  01
063A:  MOVWF  x3C
.................... 		/* remap down to channel 0 region */
.................... 		addr -= (I2C_REG_CH1_COMMAND_ON_HOLD - I2C_REG_CH0_COMMAND_ON_HOLD );
063C:  MOVLW  0E
063E:  SUBWF  x3B,F
.................... 	} else {
0640:  BRA    0644
.................... 		c=0;
0642:  CLRF   x3C
.................... 	}
.................... 
.................... 	timers.led_on_a=100;
0644:  MOVLW  64
0646:  MOVLB  0
0648:  MOVWF  xD0
.................... 
.................... 	switch ( addr ) {
064A:  MOVLB  1
064C:  MOVF   x3B,W
064E:  XORLW  00
0650:  MOVLB  0
0652:  BTFSC  FD8.2
0654:  BRA    0784
0656:  XORLW  01
0658:  BTFSC  FD8.2
065A:  BRA    0790
065C:  XORLW  03
065E:  BTFSC  FD8.2
0660:  BRA    079E
0662:  XORLW  01
0664:  BTFSC  FD8.2
0666:  BRA    07AC
0668:  XORLW  07
066A:  BTFSC  FD8.2
066C:  BRA    07E2
066E:  XORLW  01
0670:  BTFSC  FD8.2
0672:  BRA    0818
0674:  XORLW  03
0676:  BTFSC  FD8.2
0678:  BRA    084E
067A:  XORLW  01
067C:  BTFSC  FD8.2
067E:  BRA    0884
0680:  XORLW  0F
0682:  BTFSC  FD8.2
0684:  BRA    08BA
0686:  XORLW  01
0688:  BTFSC  FD8.2
068A:  BRA    08F0
068C:  XORLW  03
068E:  BTFSC  FD8.2
0690:  BRA    0926
0692:  XORLW  01
0694:  BTFSC  FD8.2
0696:  BRA    095C
0698:  XORLW  07
069A:  BTFSC  FD8.2
069C:  BRA    0992
069E:  XORLW  01
06A0:  BTFSC  FD8.2
06A2:  BRA    09C8
06A4:  XORLW  03
06A6:  BTFSC  FD8.2
06A8:  BRA    09FE
06AA:  XORLW  01
06AC:  BTFSC  FD8.2
06AE:  BRA    0A34
06B0:  XORLW  1F
06B2:  BTFSC  FD8.2
06B4:  BRA    0A34
06B6:  XORLW  0F
06B8:  BTFSC  FD8.2
06BA:  BRA    0A3C
06BC:  XORLW  3F
06BE:  BTFSC  FD8.2
06C0:  BRA    0A46
06C2:  XORLW  01
06C4:  BTFSC  FD8.2
06C6:  BRA    0A50
06C8:  XORLW  03
06CA:  BTFSC  FD8.2
06CC:  BRA    0A5A
06CE:  XORLW  62
06D0:  BTFSC  FD8.2
06D2:  BRA    0A62
06D4:  XORLW  01
06D6:  BTFSC  FD8.2
06D8:  BRA    0A8C
06DA:  XORLW  03
06DC:  BTFSC  FD8.2
06DE:  BRA    0AC2
06E0:  XORLW  01
06E2:  BTFSC  FD8.2
06E4:  BRA    0AF8
06E6:  XORLW  07
06E8:  BTFSC  FD8.2
06EA:  BRA    0B2E
06EC:  XORLW  01
06EE:  BTFSC  FD8.2
06F0:  BRA    0B64
06F2:  XORLW  03
06F4:  BTFSC  FD8.2
06F6:  BRA    0B9A
06F8:  XORLW  01
06FA:  BTFSC  FD8.2
06FC:  BRA    0BD0
06FE:  XORLW  0F
0700:  BTFSC  FD8.2
0702:  BRA    0C06
0704:  XORLW  01
0706:  BTFSC  FD8.2
0708:  BRA    0C3C
070A:  XORLW  03
070C:  BTFSC  FD8.2
070E:  BRA    0C72
0710:  XORLW  01
0712:  BTFSC  FD8.2
0714:  BRA    0CA8
0716:  XORLW  07
0718:  BTFSC  FD8.2
071A:  BRA    0CDE
071C:  XORLW  01
071E:  BTFSC  FD8.2
0720:  BRA    0D14
0722:  XORLW  03
0724:  BTFSC  FD8.2
0726:  BRA    0D4A
0728:  XORLW  01
072A:  BTFSC  FD8.2
072C:  BRA    0D80
072E:  XORLW  1F
0730:  BTFSC  FD8.2
0732:  BRA    0DB6
0734:  XORLW  01
0736:  BTFSC  FD8.2
0738:  BRA    0DEC
073A:  XORLW  03
073C:  BTFSC  FD8.2
073E:  BRA    0E22
0740:  XORLW  01
0742:  BTFSC  FD8.2
0744:  BRA    0E22
0746:  XORLW  07
0748:  BTFSC  FD8.2
074A:  BRA    0E22
074C:  XORLW  01
074E:  BTFSC  FD8.2
0750:  BRA    0E22
0752:  XORLW  D5
0754:  BTFSC  FD8.2
0756:  BRA    0E2A
0758:  XORLW  01
075A:  BTFSC  FD8.2
075C:  BRA    0E34
075E:  XORLW  03
0760:  BTFSC  FD8.2
0762:  BRA    0E3E
0764:  XORLW  01
0766:  BTFSC  FD8.2
0768:  BRA    0E48
076A:  XORLW  07
076C:  BTFSC  FD8.2
076E:  BRA    0E52
0770:  XORLW  01
0772:  BTFSC  FD8.2
0774:  BRA    0E5A
0776:  XORLW  03
0778:  BTFSC  FD8.2
077A:  BRA    0E62
077C:  XORLW  01
077E:  BTFSC  FD8.2
0780:  BRA    0E6A
0782:  BRA    0E72
.................... 		/* not channel based */
.................... 		case I2C_REG_VOLTAGE_INPUT_AVG: 
.................... 			return (int16) adc_get(0);
0784:  MOVLB  1
0786:  CLRF   x3D
0788:  MOVLB  0
078A:  RCALL  0594
078C:  MOVF   02,W
078E:  BRA    0E78
.................... 		case I2C_REG_STATE_CONTACTORS:
.................... 			return (int16) make16(channel[0].state,channel[1].state);
0790:  MOVFF  D4,03
0794:  MOVFF  ED,01
0798:  MOVFF  D4,02
079C:  BRA    0E78
.................... 		case I2C_REG_TEMPERATURE_BOARD_AVG: 
.................... 			return (int16) adc_get(1);
079E:  MOVLW  01
07A0:  MOVLB  1
07A2:  MOVWF  x3D
07A4:  MOVLB  0
07A6:  RCALL  0594
07A8:  MOVF   02,W
07AA:  BRA    0E78
.................... 
.................... 		/* status based on channel value c */
.................... 		case I2C_REG_CH0_COMMAND_ON :
.................... 			return (int16) channel[c].command_on_seconds;
07AC:  MOVLB  1
07AE:  MOVF   x3C,W
07B0:  MULLW  19
07B2:  MOVF   FF3,W
07B4:  CLRF   x3E
07B6:  MOVWF  x3D
07B8:  MOVLW  01
07BA:  ADDWF  x3D,W
07BC:  MOVWF  01
07BE:  MOVLW  00
07C0:  ADDWFC x3E,W
07C2:  MOVWF  03
07C4:  MOVF   01,W
07C6:  ADDLW  D4
07C8:  MOVWF  FE9
07CA:  MOVLW  00
07CC:  ADDWFC 03,W
07CE:  MOVWF  FEA
07D0:  MOVFF  FEC,03
07D4:  MOVF   FED,F
07D6:  MOVFF  FEF,01
07DA:  MOVFF  03,02
07DE:  MOVLB  0
07E0:  BRA    0E78
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD:
.................... 			return (int16) channel[c].command_on_hold_seconds;
07E2:  MOVLB  1
07E4:  MOVF   x3C,W
07E6:  MULLW  19
07E8:  MOVF   FF3,W
07EA:  CLRF   x3E
07EC:  MOVWF  x3D
07EE:  MOVLW  03
07F0:  ADDWF  x3D,W
07F2:  MOVWF  01
07F4:  MOVLW  00
07F6:  ADDWFC x3E,W
07F8:  MOVWF  03
07FA:  MOVF   01,W
07FC:  ADDLW  D4
07FE:  MOVWF  FE9
0800:  MOVLW  00
0802:  ADDWFC 03,W
0804:  MOVWF  FEA
0806:  MOVFF  FEC,03
080A:  MOVF   FED,F
080C:  MOVFF  FEF,01
0810:  MOVFF  03,02
0814:  MOVLB  0
0816:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_COMMAND_OFF:
.................... 			return (int16) channel[c].command_off_seconds;
0818:  MOVLB  1
081A:  MOVF   x3C,W
081C:  MULLW  19
081E:  MOVF   FF3,W
0820:  CLRF   x3E
0822:  MOVWF  x3D
0824:  MOVLW  05
0826:  ADDWF  x3D,W
0828:  MOVWF  01
082A:  MOVLW  00
082C:  ADDWFC x3E,W
082E:  MOVWF  03
0830:  MOVF   01,W
0832:  ADDLW  D4
0834:  MOVWF  FE9
0836:  MOVLW  00
0838:  ADDWFC 03,W
083A:  MOVWF  FEA
083C:  MOVFF  FEC,03
0840:  MOVF   FED,F
0842:  MOVFF  FEF,01
0846:  MOVFF  03,02
084A:  MOVLB  0
084C:  BRA    0E78
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD:
.................... 			return (int16) channel[c].command_off_hold_seconds;
084E:  MOVLB  1
0850:  MOVF   x3C,W
0852:  MULLW  19
0854:  MOVF   FF3,W
0856:  CLRF   x3E
0858:  MOVWF  x3D
085A:  MOVLW  07
085C:  ADDWF  x3D,W
085E:  MOVWF  01
0860:  MOVLW  00
0862:  ADDWFC x3E,W
0864:  MOVWF  03
0866:  MOVF   01,W
0868:  ADDLW  D4
086A:  MOVWF  FE9
086C:  MOVLW  00
086E:  ADDWFC 03,W
0870:  MOVWF  FEA
0872:  MOVFF  FEC,03
0876:  MOVF   FED,F
0878:  MOVFF  FEF,01
087C:  MOVFF  03,02
0880:  MOVLB  0
0882:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT:
.................... 			return (int16) channel[c].lvd_disconnect_delay_seconds;
0884:  MOVLB  1
0886:  MOVF   x3C,W
0888:  MULLW  19
088A:  MOVF   FF3,W
088C:  CLRF   x3E
088E:  MOVWF  x3D
0890:  MOVLW  09
0892:  ADDWF  x3D,W
0894:  MOVWF  01
0896:  MOVLW  00
0898:  ADDWFC x3E,W
089A:  MOVWF  03
089C:  MOVF   01,W
089E:  ADDLW  D4
08A0:  MOVWF  FE9
08A2:  MOVLW  00
08A4:  ADDWFC 03,W
08A6:  MOVWF  FEA
08A8:  MOVFF  FEC,03
08AC:  MOVF   FED,F
08AE:  MOVFF  FEF,01
08B2:  MOVFF  03,02
08B6:  MOVLB  0
08B8:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT:
.................... 			return (int16) channel[c].lvd_reconnect_delay_seconds;
08BA:  MOVLB  1
08BC:  MOVF   x3C,W
08BE:  MULLW  19
08C0:  MOVF   FF3,W
08C2:  CLRF   x3E
08C4:  MOVWF  x3D
08C6:  MOVLW  0B
08C8:  ADDWF  x3D,W
08CA:  MOVWF  01
08CC:  MOVLW  00
08CE:  ADDWFC x3E,W
08D0:  MOVWF  03
08D2:  MOVF   01,W
08D4:  ADDLW  D4
08D6:  MOVWF  FE9
08D8:  MOVLW  00
08DA:  ADDWFC 03,W
08DC:  MOVWF  FEA
08DE:  MOVFF  FEC,03
08E2:  MOVF   FED,F
08E4:  MOVFF  FEF,01
08E8:  MOVFF  03,02
08EC:  MOVLB  0
08EE:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT:
.................... 			return (int16) channel[c].hvd_disconnect_delay_seconds;
08F0:  MOVLB  1
08F2:  MOVF   x3C,W
08F4:  MULLW  19
08F6:  MOVF   FF3,W
08F8:  CLRF   x3E
08FA:  MOVWF  x3D
08FC:  MOVLW  0D
08FE:  ADDWF  x3D,W
0900:  MOVWF  01
0902:  MOVLW  00
0904:  ADDWFC x3E,W
0906:  MOVWF  03
0908:  MOVF   01,W
090A:  ADDLW  D4
090C:  MOVWF  FE9
090E:  MOVLW  00
0910:  ADDWFC 03,W
0912:  MOVWF  FEA
0914:  MOVFF  FEC,03
0918:  MOVF   FED,F
091A:  MOVFF  FEF,01
091E:  MOVFF  03,02
0922:  MOVLB  0
0924:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT:
.................... 			return (int16) channel[c].hvd_reconnect_delay_seconds;
0926:  MOVLB  1
0928:  MOVF   x3C,W
092A:  MULLW  19
092C:  MOVF   FF3,W
092E:  CLRF   x3E
0930:  MOVWF  x3D
0932:  MOVLW  0F
0934:  ADDWF  x3D,W
0936:  MOVWF  01
0938:  MOVLW  00
093A:  ADDWFC x3E,W
093C:  MOVWF  03
093E:  MOVF   01,W
0940:  ADDLW  D4
0942:  MOVWF  FE9
0944:  MOVLW  00
0946:  ADDWFC 03,W
0948:  MOVWF  FEA
094A:  MOVFF  FEC,03
094E:  MOVF   FED,F
0950:  MOVFF  FEF,01
0954:  MOVFF  03,02
0958:  MOVLB  0
095A:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT:
.................... 			return (int16) channel[c].ltd_disconnect_delay_seconds;
095C:  MOVLB  1
095E:  MOVF   x3C,W
0960:  MULLW  19
0962:  MOVF   FF3,W
0964:  CLRF   x3E
0966:  MOVWF  x3D
0968:  MOVLW  11
096A:  ADDWF  x3D,W
096C:  MOVWF  01
096E:  MOVLW  00
0970:  ADDWFC x3E,W
0972:  MOVWF  03
0974:  MOVF   01,W
0976:  ADDLW  D4
0978:  MOVWF  FE9
097A:  MOVLW  00
097C:  ADDWFC 03,W
097E:  MOVWF  FEA
0980:  MOVFF  FEC,03
0984:  MOVF   FED,F
0986:  MOVFF  FEF,01
098A:  MOVFF  03,02
098E:  MOVLB  0
0990:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT:
.................... 			return (int16) channel[c].ltd_reconnect_delay_seconds;
0992:  MOVLB  1
0994:  MOVF   x3C,W
0996:  MULLW  19
0998:  MOVF   FF3,W
099A:  CLRF   x3E
099C:  MOVWF  x3D
099E:  MOVLW  13
09A0:  ADDWF  x3D,W
09A2:  MOVWF  01
09A4:  MOVLW  00
09A6:  ADDWFC x3E,W
09A8:  MOVWF  03
09AA:  MOVF   01,W
09AC:  ADDLW  D4
09AE:  MOVWF  FE9
09B0:  MOVLW  00
09B2:  ADDWFC 03,W
09B4:  MOVWF  FEA
09B6:  MOVFF  FEC,03
09BA:  MOVF   FED,F
09BC:  MOVFF  FEF,01
09C0:  MOVFF  03,02
09C4:  MOVLB  0
09C6:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT:
.................... 			return (int16) channel[c].htd_disconnect_delay_seconds;
09C8:  MOVLB  1
09CA:  MOVF   x3C,W
09CC:  MULLW  19
09CE:  MOVF   FF3,W
09D0:  CLRF   x3E
09D2:  MOVWF  x3D
09D4:  MOVLW  15
09D6:  ADDWF  x3D,W
09D8:  MOVWF  01
09DA:  MOVLW  00
09DC:  ADDWFC x3E,W
09DE:  MOVWF  03
09E0:  MOVF   01,W
09E2:  ADDLW  D4
09E4:  MOVWF  FE9
09E6:  MOVLW  00
09E8:  ADDWFC 03,W
09EA:  MOVWF  FEA
09EC:  MOVFF  FEC,03
09F0:  MOVF   FED,F
09F2:  MOVFF  FEF,01
09F6:  MOVFF  03,02
09FA:  MOVLB  0
09FC:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT:
.................... 			return (int16) channel[c].htd_reconnect_delay_seconds;
09FE:  MOVLB  1
0A00:  MOVF   x3C,W
0A02:  MULLW  19
0A04:  MOVF   FF3,W
0A06:  CLRF   x3E
0A08:  MOVWF  x3D
0A0A:  MOVLW  17
0A0C:  ADDWF  x3D,W
0A0E:  MOVWF  01
0A10:  MOVLW  00
0A12:  ADDWFC x3E,W
0A14:  MOVWF  03
0A16:  MOVF   01,W
0A18:  ADDLW  D4
0A1A:  MOVWF  FE9
0A1C:  MOVLW  00
0A1E:  ADDWFC 03,W
0A20:  MOVWF  FEA
0A22:  MOVFF  FEC,03
0A26:  MOVF   FED,F
0A28:  MOVFF  FEF,01
0A2C:  MOVFF  03,02
0A30:  MOVLB  0
0A32:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_FUT_DISCONNECT:
.................... 		case I2C_REG_CH0_FUT_RECONNECT:
.................... 			return (int16) 0xffff; /* not yet implemented */
0A34:  MOVLW  FF
0A36:  MOVWF  01
0A38:  MOVWF  02
0A3A:  BRA    0E78
.................... 
.................... 
.................... 		/* non-channel based meta */
.................... 		case I2C_REG_SEQUENCE_NUMBER:
.................... 			return (int16) current.sequence_number;
0A3C:  MOVFF  C4,01
0A40:  MOVFF  C5,02
0A44:  BRA    0E78
.................... 		case I2C_REG_TIME_INTERVAL_MILLISECONDS:
.................... 			return (int16) current.interval_milliseconds;
0A46:  MOVFF  C8,01
0A4A:  MOVFF  C9,02
0A4E:  BRA    0E78
.................... 		case I2C_REG_TIME_UPTIME_MINUTES:
.................... 			return (int16) current.uptime_minutes;
0A50:  MOVFF  C6,01
0A54:  MOVFF  C7,02
0A58:  BRA    0E78
.................... 		case I2C_REG_DEFAULT_PARAMS_WRITTEN:
.................... 			return (int16) current.default_params_written;
0A5A:  MOVFF  CE,01
0A5E:  CLRF   02
0A60:  BRA    0E78
.................... 
.................... 		/* channel based configuration */
.................... 		case I2C_REG_CH0_COMMAND_ON_HOLD_INITIAL:
.................... 			return (int16) config.ch[c].command_on_hold_time;
0A62:  MOVLB  1
0A64:  MOVF   x3C,W
0A66:  MULLW  24
0A68:  MOVF   FF3,W
0A6A:  CLRF   x3E
0A6C:  MOVWF  x3D
0A6E:  MOVLW  1B
0A70:  ADDWF  x3D,W
0A72:  MOVWF  FE9
0A74:  MOVLW  00
0A76:  ADDWFC x3E,W
0A78:  MOVWF  FEA
0A7A:  MOVFF  FEC,03
0A7E:  MOVF   FED,F
0A80:  MOVFF  FEF,01
0A84:  MOVFF  03,02
0A88:  MOVLB  0
0A8A:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_COMMAND_OFF_HOLD_INITIAL:
.................... 			return (int16) config.ch[c].command_off_hold_time;
0A8C:  MOVLB  1
0A8E:  MOVF   x3C,W
0A90:  MULLW  24
0A92:  MOVF   FF3,W
0A94:  CLRF   x3E
0A96:  MOVWF  x3D
0A98:  MOVLW  02
0A9A:  ADDWF  x3D,W
0A9C:  MOVWF  01
0A9E:  MOVLW  00
0AA0:  ADDWFC x3E,W
0AA2:  MOVWF  03
0AA4:  MOVF   01,W
0AA6:  ADDLW  1B
0AA8:  MOVWF  FE9
0AAA:  MOVLW  00
0AAC:  ADDWFC 03,W
0AAE:  MOVWF  FEA
0AB0:  MOVFF  FEC,03
0AB4:  MOVF   FED,F
0AB6:  MOVFF  FEF,01
0ABA:  MOVFF  03,02
0ABE:  MOVLB  0
0AC0:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].lvd_disconnect_adc;
0AC2:  MOVLB  1
0AC4:  MOVF   x3C,W
0AC6:  MULLW  24
0AC8:  MOVF   FF3,W
0ACA:  CLRF   x3E
0ACC:  MOVWF  x3D
0ACE:  MOVLW  04
0AD0:  ADDWF  x3D,W
0AD2:  MOVWF  01
0AD4:  MOVLW  00
0AD6:  ADDWFC x3E,W
0AD8:  MOVWF  03
0ADA:  MOVF   01,W
0ADC:  ADDLW  1B
0ADE:  MOVWF  FE9
0AE0:  MOVLW  00
0AE2:  ADDWFC 03,W
0AE4:  MOVWF  FEA
0AE6:  MOVFF  FEC,03
0AEA:  MOVF   FED,F
0AEC:  MOVFF  FEF,01
0AF0:  MOVFF  03,02
0AF4:  MOVLB  0
0AF6:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].lvd_disconnect_delay;
0AF8:  MOVLB  1
0AFA:  MOVF   x3C,W
0AFC:  MULLW  24
0AFE:  MOVF   FF3,W
0B00:  CLRF   x3E
0B02:  MOVWF  x3D
0B04:  MOVLW  06
0B06:  ADDWF  x3D,W
0B08:  MOVWF  01
0B0A:  MOVLW  00
0B0C:  ADDWFC x3E,W
0B0E:  MOVWF  03
0B10:  MOVF   01,W
0B12:  ADDLW  1B
0B14:  MOVWF  FE9
0B16:  MOVLW  00
0B18:  ADDWFC 03,W
0B1A:  MOVWF  FEA
0B1C:  MOVFF  FEC,03
0B20:  MOVF   FED,F
0B22:  MOVFF  FEF,01
0B26:  MOVFF  03,02
0B2A:  MOVLB  0
0B2C:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].lvd_reconnect_adc;
0B2E:  MOVLB  1
0B30:  MOVF   x3C,W
0B32:  MULLW  24
0B34:  MOVF   FF3,W
0B36:  CLRF   x3E
0B38:  MOVWF  x3D
0B3A:  MOVLW  08
0B3C:  ADDWF  x3D,W
0B3E:  MOVWF  01
0B40:  MOVLW  00
0B42:  ADDWFC x3E,W
0B44:  MOVWF  03
0B46:  MOVF   01,W
0B48:  ADDLW  1B
0B4A:  MOVWF  FE9
0B4C:  MOVLW  00
0B4E:  ADDWFC 03,W
0B50:  MOVWF  FEA
0B52:  MOVFF  FEC,03
0B56:  MOVF   FED,F
0B58:  MOVFF  FEF,01
0B5C:  MOVFF  03,02
0B60:  MOVLB  0
0B62:  BRA    0E78
.................... 		case I2C_REG_CH0_LVD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].lvd_reconnect_delay;
0B64:  MOVLB  1
0B66:  MOVF   x3C,W
0B68:  MULLW  24
0B6A:  MOVF   FF3,W
0B6C:  CLRF   x3E
0B6E:  MOVWF  x3D
0B70:  MOVLW  0A
0B72:  ADDWF  x3D,W
0B74:  MOVWF  01
0B76:  MOVLW  00
0B78:  ADDWFC x3E,W
0B7A:  MOVWF  03
0B7C:  MOVF   01,W
0B7E:  ADDLW  1B
0B80:  MOVWF  FE9
0B82:  MOVLW  00
0B84:  ADDWFC 03,W
0B86:  MOVWF  FEA
0B88:  MOVFF  FEC,03
0B8C:  MOVF   FED,F
0B8E:  MOVFF  FEF,01
0B92:  MOVFF  03,02
0B96:  MOVLB  0
0B98:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].hvd_disconnect_adc;
0B9A:  MOVLB  1
0B9C:  MOVF   x3C,W
0B9E:  MULLW  24
0BA0:  MOVF   FF3,W
0BA2:  CLRF   x3E
0BA4:  MOVWF  x3D
0BA6:  MOVLW  0C
0BA8:  ADDWF  x3D,W
0BAA:  MOVWF  01
0BAC:  MOVLW  00
0BAE:  ADDWFC x3E,W
0BB0:  MOVWF  03
0BB2:  MOVF   01,W
0BB4:  ADDLW  1B
0BB6:  MOVWF  FE9
0BB8:  MOVLW  00
0BBA:  ADDWFC 03,W
0BBC:  MOVWF  FEA
0BBE:  MOVFF  FEC,03
0BC2:  MOVF   FED,F
0BC4:  MOVFF  FEF,01
0BC8:  MOVFF  03,02
0BCC:  MOVLB  0
0BCE:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].hvd_disconnect_delay;
0BD0:  MOVLB  1
0BD2:  MOVF   x3C,W
0BD4:  MULLW  24
0BD6:  MOVF   FF3,W
0BD8:  CLRF   x3E
0BDA:  MOVWF  x3D
0BDC:  MOVLW  0E
0BDE:  ADDWF  x3D,W
0BE0:  MOVWF  01
0BE2:  MOVLW  00
0BE4:  ADDWFC x3E,W
0BE6:  MOVWF  03
0BE8:  MOVF   01,W
0BEA:  ADDLW  1B
0BEC:  MOVWF  FE9
0BEE:  MOVLW  00
0BF0:  ADDWFC 03,W
0BF2:  MOVWF  FEA
0BF4:  MOVFF  FEC,03
0BF8:  MOVF   FED,F
0BFA:  MOVFF  FEF,01
0BFE:  MOVFF  03,02
0C02:  MOVLB  0
0C04:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].hvd_reconnect_adc;
0C06:  MOVLB  1
0C08:  MOVF   x3C,W
0C0A:  MULLW  24
0C0C:  MOVF   FF3,W
0C0E:  CLRF   x3E
0C10:  MOVWF  x3D
0C12:  MOVLW  10
0C14:  ADDWF  x3D,W
0C16:  MOVWF  01
0C18:  MOVLW  00
0C1A:  ADDWFC x3E,W
0C1C:  MOVWF  03
0C1E:  MOVF   01,W
0C20:  ADDLW  1B
0C22:  MOVWF  FE9
0C24:  MOVLW  00
0C26:  ADDWFC 03,W
0C28:  MOVWF  FEA
0C2A:  MOVFF  FEC,03
0C2E:  MOVF   FED,F
0C30:  MOVFF  FEF,01
0C34:  MOVFF  03,02
0C38:  MOVLB  0
0C3A:  BRA    0E78
.................... 		case I2C_REG_CH0_HVD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].hvd_reconnect_delay;
0C3C:  MOVLB  1
0C3E:  MOVF   x3C,W
0C40:  MULLW  24
0C42:  MOVF   FF3,W
0C44:  CLRF   x3E
0C46:  MOVWF  x3D
0C48:  MOVLW  12
0C4A:  ADDWF  x3D,W
0C4C:  MOVWF  01
0C4E:  MOVLW  00
0C50:  ADDWFC x3E,W
0C52:  MOVWF  03
0C54:  MOVF   01,W
0C56:  ADDLW  1B
0C58:  MOVWF  FE9
0C5A:  MOVLW  00
0C5C:  ADDWFC 03,W
0C5E:  MOVWF  FEA
0C60:  MOVFF  FEC,03
0C64:  MOVF   FED,F
0C66:  MOVFF  FEF,01
0C6A:  MOVFF  03,02
0C6E:  MOVLB  0
0C70:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_disconnect_adc;
0C72:  MOVLB  1
0C74:  MOVF   x3C,W
0C76:  MULLW  24
0C78:  MOVF   FF3,W
0C7A:  CLRF   x3E
0C7C:  MOVWF  x3D
0C7E:  MOVLW  14
0C80:  ADDWF  x3D,W
0C82:  MOVWF  01
0C84:  MOVLW  00
0C86:  ADDWFC x3E,W
0C88:  MOVWF  03
0C8A:  MOVF   01,W
0C8C:  ADDLW  1B
0C8E:  MOVWF  FE9
0C90:  MOVLW  00
0C92:  ADDWFC 03,W
0C94:  MOVWF  FEA
0C96:  MOVFF  FEC,03
0C9A:  MOVF   FED,F
0C9C:  MOVFF  FEF,01
0CA0:  MOVFF  03,02
0CA4:  MOVLB  0
0CA6:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_disconnect_delay;
0CA8:  MOVLB  1
0CAA:  MOVF   x3C,W
0CAC:  MULLW  24
0CAE:  MOVF   FF3,W
0CB0:  CLRF   x3E
0CB2:  MOVWF  x3D
0CB4:  MOVLW  16
0CB6:  ADDWF  x3D,W
0CB8:  MOVWF  01
0CBA:  MOVLW  00
0CBC:  ADDWFC x3E,W
0CBE:  MOVWF  03
0CC0:  MOVF   01,W
0CC2:  ADDLW  1B
0CC4:  MOVWF  FE9
0CC6:  MOVLW  00
0CC8:  ADDWFC 03,W
0CCA:  MOVWF  FEA
0CCC:  MOVFF  FEC,03
0CD0:  MOVF   FED,F
0CD2:  MOVFF  FEF,01
0CD6:  MOVFF  03,02
0CDA:  MOVLB  0
0CDC:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_reconnect_adc;
0CDE:  MOVLB  1
0CE0:  MOVF   x3C,W
0CE2:  MULLW  24
0CE4:  MOVF   FF3,W
0CE6:  CLRF   x3E
0CE8:  MOVWF  x3D
0CEA:  MOVLW  18
0CEC:  ADDWF  x3D,W
0CEE:  MOVWF  01
0CF0:  MOVLW  00
0CF2:  ADDWFC x3E,W
0CF4:  MOVWF  03
0CF6:  MOVF   01,W
0CF8:  ADDLW  1B
0CFA:  MOVWF  FE9
0CFC:  MOVLW  00
0CFE:  ADDWFC 03,W
0D00:  MOVWF  FEA
0D02:  MOVFF  FEC,03
0D06:  MOVF   FED,F
0D08:  MOVFF  FEF,01
0D0C:  MOVFF  03,02
0D10:  MOVLB  0
0D12:  BRA    0E78
.................... 		case I2C_REG_CH0_LTD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_reconnect_delay;
0D14:  MOVLB  1
0D16:  MOVF   x3C,W
0D18:  MULLW  24
0D1A:  MOVF   FF3,W
0D1C:  CLRF   x3E
0D1E:  MOVWF  x3D
0D20:  MOVLW  1A
0D22:  ADDWF  x3D,W
0D24:  MOVWF  01
0D26:  MOVLW  00
0D28:  ADDWFC x3E,W
0D2A:  MOVWF  03
0D2C:  MOVF   01,W
0D2E:  ADDLW  1B
0D30:  MOVWF  FE9
0D32:  MOVLW  00
0D34:  ADDWFC 03,W
0D36:  MOVWF  FEA
0D38:  MOVFF  FEC,03
0D3C:  MOVF   FED,F
0D3E:  MOVFF  FEF,01
0D42:  MOVFF  03,02
0D46:  MOVLB  0
0D48:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_disconnect_adc;
0D4A:  MOVLB  1
0D4C:  MOVF   x3C,W
0D4E:  MULLW  24
0D50:  MOVF   FF3,W
0D52:  CLRF   x3E
0D54:  MOVWF  x3D
0D56:  MOVLW  14
0D58:  ADDWF  x3D,W
0D5A:  MOVWF  01
0D5C:  MOVLW  00
0D5E:  ADDWFC x3E,W
0D60:  MOVWF  03
0D62:  MOVF   01,W
0D64:  ADDLW  1B
0D66:  MOVWF  FE9
0D68:  MOVLW  00
0D6A:  ADDWFC 03,W
0D6C:  MOVWF  FEA
0D6E:  MOVFF  FEC,03
0D72:  MOVF   FED,F
0D74:  MOVFF  FEF,01
0D78:  MOVFF  03,02
0D7C:  MOVLB  0
0D7E:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_DISCONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_disconnect_delay;
0D80:  MOVLB  1
0D82:  MOVF   x3C,W
0D84:  MULLW  24
0D86:  MOVF   FF3,W
0D88:  CLRF   x3E
0D8A:  MOVWF  x3D
0D8C:  MOVLW  16
0D8E:  ADDWF  x3D,W
0D90:  MOVWF  01
0D92:  MOVLW  00
0D94:  ADDWFC x3E,W
0D96:  MOVWF  03
0D98:  MOVF   01,W
0D9A:  ADDLW  1B
0D9C:  MOVWF  FE9
0D9E:  MOVLW  00
0DA0:  ADDWFC 03,W
0DA2:  MOVWF  FEA
0DA4:  MOVFF  FEC,03
0DA8:  MOVF   FED,F
0DAA:  MOVFF  FEF,01
0DAE:  MOVFF  03,02
0DB2:  MOVLB  0
0DB4:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT_ADC:
.................... 			return (int16) config.ch[c].ltd_reconnect_adc;
0DB6:  MOVLB  1
0DB8:  MOVF   x3C,W
0DBA:  MULLW  24
0DBC:  MOVF   FF3,W
0DBE:  CLRF   x3E
0DC0:  MOVWF  x3D
0DC2:  MOVLW  18
0DC4:  ADDWF  x3D,W
0DC6:  MOVWF  01
0DC8:  MOVLW  00
0DCA:  ADDWFC x3E,W
0DCC:  MOVWF  03
0DCE:  MOVF   01,W
0DD0:  ADDLW  1B
0DD2:  MOVWF  FE9
0DD4:  MOVLW  00
0DD6:  ADDWFC 03,W
0DD8:  MOVWF  FEA
0DDA:  MOVFF  FEC,03
0DDE:  MOVF   FED,F
0DE0:  MOVFF  FEF,01
0DE4:  MOVFF  03,02
0DE8:  MOVLB  0
0DEA:  BRA    0E78
.................... 		case I2C_REG_CH0_HTD_RECONNECT_DELAY:
.................... 			return (int16) config.ch[c].ltd_reconnect_delay;	
0DEC:  MOVLB  1
0DEE:  MOVF   x3C,W
0DF0:  MULLW  24
0DF2:  MOVF   FF3,W
0DF4:  CLRF   x3E
0DF6:  MOVWF  x3D
0DF8:  MOVLW  1A
0DFA:  ADDWF  x3D,W
0DFC:  MOVWF  01
0DFE:  MOVLW  00
0E00:  ADDWFC x3E,W
0E02:  MOVWF  03
0E04:  MOVF   01,W
0E06:  ADDLW  1B
0E08:  MOVWF  FE9
0E0A:  MOVLW  00
0E0C:  ADDWFC 03,W
0E0E:  MOVWF  FEA
0E10:  MOVFF  FEC,03
0E14:  MOVF   FED,F
0E16:  MOVFF  FEF,01
0E1A:  MOVFF  03,02
0E1E:  MOVLB  0
0E20:  BRA    0E78
.................... 
.................... 		case I2C_REG_CH0_FUT_DISCONNECT_VALUE:
.................... 		case I2C_REG_CH0_FUT_DISCONNECT_DELAY:
.................... 		case I2C_REG_CH0_FUT_RECONNECT_VALUE:
.................... 		case I2C_REG_CH0_FUT_RECONNECT_DELAY:
.................... 			return (int16) 0xffff; /* not yet implemented */
0E22:  MOVLW  FF
0E24:  MOVWF  01
0E26:  MOVWF  02
0E28:  BRA    0E78
.................... 		
.................... 		/* configuration */
.................... 		case I2C_REG_CONFIG_HARDWARE_MODEL: 
.................... 			return (int16) 'D';
0E2A:  MOVLW  44
0E2C:  MOVWF  01
0E2E:  MOVLW  00
0E30:  MOVWF  02
0E32:  BRA    0E78
.................... 		case I2C_REG_CONFIG_HARDWARE_VERSION: 
.................... 			return (int16) '2';
0E34:  MOVLW  32
0E36:  MOVWF  01
0E38:  MOVLW  00
0E3A:  MOVWF  02
0E3C:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_MODEL: 
.................... 			return (int16) 'L';
0E3E:  MOVLW  4C
0E40:  MOVWF  01
0E42:  MOVLW  00
0E44:  MOVWF  02
0E46:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_VERSION: 
.................... 			return (int16) '0';
0E48:  MOVLW  30
0E4A:  MOVWF  01
0E4C:  MOVLW  00
0E4E:  MOVWF  02
0E50:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_YEAR:
.................... 			return (int16) current.compile_year;
0E52:  MOVFF  CB,01
0E56:  CLRF   02
0E58:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_MONTH:
.................... 			return (int16) current.compile_month;
0E5A:  MOVFF  CC,01
0E5E:  CLRF   02
0E60:  BRA    0E78
.................... 		case I2C_REG_CONFIG_SOFTWARE_DAY:
.................... 			return (int16) current.compile_day;
0E62:  MOVFF  CD,01
0E66:  CLRF   02
0E68:  BRA    0E78
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			/* 1 if factory unlocked */ 
.................... 			return (int16) current.factory_unlocked; 	
0E6A:  MOVFF  CA,01
0E6E:  CLRF   02
0E70:  BRA    0E78
.................... 
.................... 		/* we should have range checked, and never gotten here ... or read unimplemented (future) register */
.................... 		default: return (int16) 0xffff;
0E72:  MOVLW  FF
0E74:  MOVWF  01
0E76:  MOVWF  02
.................... 	}
0E78:  GOTO   0F36 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "interrupt_dcswc_module_latching_contactor.c"
.................... #int_timer2
.................... void isr_timer2() {
.................... 	timers.now_millisecond=1;
*
00D4:  BSF    xCF.2
.................... }
.................... 
.................... 
.................... 
.................... /* I2C slave interrupt */
00D6:  BCF    F9E.1
00D8:  GOTO   006C
.................... #byte SSPSTAT=GETENV("SFR:SSPSTAT")
.................... #INT_SSP
.................... void ssp_interrupt () {
.................... 	static int8 sstate;
.................... 	int8 state;
.................... 	int8 incoming;
.................... 	static int16 lastValue;
.................... 	static int8 lastMSB;
.................... 
.................... 	static int8 address; 
.................... 
.................... 	/* 
.................... 	our implementation of i2c_isr_state() that won't overflow and switch states
.................... 	but it will quit counting at 127 bytes. 
.................... 	If more bytes are needed, external counting variables can be used or the size of state can be made larger
.................... 	*/
.................... 
.................... 
.................... 	if ( ! bit_test(SSPSTAT,5) ) {
*
0E92:  BTFSC  FC7.5
0E94:  BRA    0EA2
.................... 		/* address */
.................... 		sstate=0;
0E96:  MOVLB  1
0E98:  CLRF   x06
.................... 
.................... 		if ( bit_test(SSPSTAT,2) ) {
0E9A:  BTFSS  FC7.2
0E9C:  BRA    0EA0
.................... 			/* set high bit if read */
.................... 			bit_set(sstate,7);
0E9E:  BSF    x06.7
.................... 		}
.................... 	} else {
0EA0:  MOVLB  0
.................... 		/* data */
.................... 	}
.................... 
.................... 	/* state variable used below is not incremented */
.................... 	state=sstate;
0EA2:  MOVFF  106,138
.................... 
.................... 	/* increment the state counter for next pass through unless it will overflow us into another state */
.................... 	if ( sstate != 0x7f && sstate != 0xff) {
0EA6:  MOVLB  1
0EA8:  MOVF   x06,W
0EAA:  SUBLW  7F
0EAC:  BZ    0EB6
0EAE:  INCFSZ x06,W
0EB0:  BRA    0EB4
0EB2:  BRA    0EB6
.................... 		sstate++;
0EB4:  INCF   x06,F
.................... 	}
.................... 
.................... 	
.................... 	/* i2c_isr_state() return an 8 bit int
.................... 		0 - Address match received with R/W bit clear, perform i2c_read( ) to read the I2C address.
.................... 		1-0x7F - Master has written data; i2c_read() will immediately return the data
.................... 		0x80 - Address match received with R/W bit set; perform i2c_read( ) to read the I2C address,
.................... 		and use i2c_write( ) to pre-load the transmit buffer for the next transaction (next I2C read
.................... 		performed by master will read this byte).
.................... 		0x81-0xFF - Transmission completed and acknowledged; respond with i2c_write() to pre-load
.................... 		the transmit buffer for the next transition (the next I2C read performed by master will read this
.................... 		byte).
.................... 		Function:
.................... 		Returns the state of I2C communications in I2C slave mode after an SSP interrupt. The return
.................... 		value increments with each byte received or sent.
.................... 		If 0x00 or 0x80 is returned, an i2C_read( ) needs to be performed to read the I2C address that
.................... 		was sent (it will match the address configured by #USE I2C so this value can be ignored)
.................... 	*/
.................... 
.................... 	if ( state <= 0x80 ) {                      
0EB6:  MOVF   x38,W
0EB8:  SUBLW  80
0EBA:  BNC   0F1E
.................... 		/* I2C master is sending us data */
.................... 		if ( 0x80 == state ) {
0EBC:  MOVF   x38,W
0EBE:  SUBLW  80
0EC0:  BNZ   0EC8
.................... 			/* i2c_read(2) casues the function to read the SSPBUF without releasing the clock */
.................... 			incoming = i2c_read(STREAM_SLAVE,2);
0EC2:  MOVFF  FC9,139
.................... 		} else {
0EC6:  BRA    0ED4
.................... 			incoming = i2c_read(STREAM_SLAVE);
0EC8:  BCF    FC6.6
0ECA:  BTFSS  FC7.0
0ECC:  BRA    0ECA
0ECE:  MOVF   FC9,W
0ED0:  BSF    FC6.4
0ED2:  MOVWF  x39
.................... 		}
.................... 
.................... 		if ( 1 == state ) {             
0ED4:  DECFSZ x38,W
0ED6:  BRA    0EE0
.................... 			address = incoming<<1;
0ED8:  BCF    FD8.0
0EDA:  RLCF   x39,W
0EDC:  MOVWF  x0A
.................... 		} else if ( state >= 2 && 0x80 != state ) {
0EDE:  BRA    0F1E
0EE0:  MOVF   x38,W
0EE2:  SUBLW  01
0EE4:  BC    0F1E
0EE6:  MOVF   x38,W
0EE8:  SUBLW  80
0EEA:  BZ    0F1E
.................... 			/* received byte is data */
.................... 		
.................... 			/* save MSB and we'll process it on next */
.................... 			if ( 2 == state ) {
0EEC:  MOVF   x38,W
0EEE:  SUBLW  02
0EF0:  BNZ   0EF8
.................... 				lastMSB=incoming;
0EF2:  MOVFF  139,109
.................... 			} else if ( 3 == state ) {
0EF6:  BRA    0F1E
0EF8:  MOVF   x38,W
0EFA:  SUBLW  03
0EFC:  BNZ   0F1E
.................... 				/* 16 bit value made of previous byte and this byte */
.................... 				write_i2c(address>>1,make16(lastMSB,incoming));
0EFE:  BCF    FD8.0
0F00:  RRCF   x0A,W
0F02:  MOVWF  x3A
0F04:  MOVFF  109,13C
0F08:  MOVFF  139,13B
0F0C:  MOVWF  x3D
0F0E:  MOVFF  109,13F
0F12:  MOVFF  139,13E
0F16:  MOVLB  0
0F18:  GOTO   00DC
0F1C:  MOVLB  1
.................... 
.................... 				/* this write only works for a single register per I2C transaction */
.................... 				/* this is not a BUG, but it would need to be implemented if this functionality is needed */
.................... 			}
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	if ( state >= 0x80 ) {
0F1E:  MOVF   x38,W
0F20:  SUBLW  7F
0F22:  BC    0F5C
.................... 		/* I2C master is requesting data from us */
.................... 
.................... 		if ( ! bit_test(address,0) ) {
0F24:  BTFSC  x0A.0
0F26:  BRA    0F4C
.................... 			/* read 16 bit register (register address half of I2C address) on even address */
.................... 			lastValue=map_i2c(address>>1);
0F28:  BCF    FD8.0
0F2A:  RRCF   x0A,W
0F2C:  MOVWF  x3A
0F2E:  MOVWF  x3B
0F30:  MOVLB  0
0F32:  GOTO   0614
0F36:  MOVFF  02,108
0F3A:  MOVFF  01,107
.................... 
.................... 			/* send the MSB */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,1));
0F3E:  MOVFF  108,13A
0F42:  MOVFF  108,13B
0F46:  RCALL  0E7C
.................... 		} else {
0F48:  BRA    0F58
0F4A:  MOVLB  1
.................... 			/* send LSB of 16 bit register on odd address */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,0));
0F4C:  MOVFF  107,13A
0F50:  MOVFF  107,13B
0F54:  MOVLB  0
0F56:  RCALL  0E7C
.................... 		}
.................... 		address++;
0F58:  MOVLB  1
0F5A:  INCF   x0A,F
.................... 	}
.................... }
.................... 
.................... 
.................... 
.................... 
0F5C:  BCF    F9E.3
0F5E:  MOVLB  0
0F60:  GOTO   006C
.................... #include "debug_dcswc_module_latching_contactor.c"
.................... void debug_dump(void) {
.................... 	int8 i;
.................... 	
.................... 	restart_wdt();
*
289C:  CLRWDT
.................... 	fprintf(STREAM_FTDI,"# '%s'\r\n",__DATE__);
289E:  MOVLW  64
28A0:  MOVWF  FF6
28A2:  MOVLW  0F
28A4:  MOVWF  FF7
28A6:  MOVLW  03
28A8:  MOVLB  1
28AA:  MOVWF  x19
28AC:  MOVLB  0
28AE:  CALL   1982
28B2:  MOVLW  CA
28B4:  MOVWF  FF6
28B6:  MOVLW  00
28B8:  MOVWF  FF7
28BA:  CALL   19AC
28BE:  MOVLW  69
28C0:  MOVWF  FF6
28C2:  MOVLW  0F
28C4:  MOVWF  FF7
28C6:  MOVLW  03
28C8:  MOVLB  1
28CA:  MOVWF  x19
28CC:  MOVLB  0
28CE:  CALL   1982
.................... 	fprintf(STREAM_FTDI,"#  compile_year=%u\r\n",current.compile_year);
28D2:  MOVLW  6E
28D4:  MOVWF  FF6
28D6:  MOVLW  0F
28D8:  MOVWF  FF7
28DA:  MOVLW  10
28DC:  MOVLB  1
28DE:  MOVWF  x19
28E0:  MOVLB  0
28E2:  CALL   1982
28E6:  MOVFF  CB,116
28EA:  MOVLW  1B
28EC:  MOVLB  1
28EE:  MOVWF  x17
28F0:  MOVLB  0
28F2:  RCALL  2724
28F4:  MOVLW  0D
28F6:  BTFSS  F9E.4
28F8:  BRA    28F6
28FA:  MOVWF  FAD
28FC:  MOVLW  0A
28FE:  BTFSS  F9E.4
2900:  BRA    28FE
2902:  MOVWF  FAD
.................... 	fprintf(STREAM_FTDI,"# compile_month=%u\r\n",current.compile_month);
2904:  MOVLW  84
2906:  MOVWF  FF6
2908:  MOVLW  0F
290A:  MOVWF  FF7
290C:  MOVLW  10
290E:  MOVLB  1
2910:  MOVWF  x19
2912:  MOVLB  0
2914:  CALL   1982
2918:  MOVFF  CC,116
291C:  MOVLW  1B
291E:  MOVLB  1
2920:  MOVWF  x17
2922:  MOVLB  0
2924:  RCALL  2724
2926:  MOVLW  0D
2928:  BTFSS  F9E.4
292A:  BRA    2928
292C:  MOVWF  FAD
292E:  MOVLW  0A
2930:  BTFSS  F9E.4
2932:  BRA    2930
2934:  MOVWF  FAD
.................... 	fprintf(STREAM_FTDI,"#   compile_day=%u\r\n",current.compile_day);
2936:  MOVLW  9A
2938:  MOVWF  FF6
293A:  MOVLW  0F
293C:  MOVWF  FF7
293E:  MOVLW  10
2940:  MOVLB  1
2942:  MOVWF  x19
2944:  MOVLB  0
2946:  CALL   1982
294A:  MOVFF  CD,116
294E:  MOVLW  1B
2950:  MOVLB  1
2952:  MOVWF  x17
2954:  MOVLB  0
2956:  RCALL  2724
2958:  MOVLW  0D
295A:  BTFSS  F9E.4
295C:  BRA    295A
295E:  MOVWF  FAD
2960:  MOVLW  0A
2962:  BTFSS  F9E.4
2964:  BRA    2962
2966:  MOVWF  FAD
2968:  CLRF   19
296A:  BTFSC  FF2.7
296C:  BSF    19.7
296E:  BCF    FF2.7
.................... 	fprintf(STREAM_FTDI,"#       vin adc=%lu\r\n",adc_get(0));
2970:  MOVLB  1
2972:  CLRF   x3D
2974:  MOVLB  0
2976:  CALL   0594
297A:  BTFSC  19.7
297C:  BSF    FF2.7
297E:  MOVFF  02,117
2982:  MOVFF  01,116
2986:  MOVLW  B0
2988:  MOVWF  FF6
298A:  MOVLW  0F
298C:  MOVWF  FF7
298E:  MOVLW  10
2990:  MOVLB  1
2992:  MOVWF  x19
2994:  MOVLB  0
2996:  CALL   1982
299A:  MOVLW  10
299C:  MOVWF  FE9
299E:  MOVFF  117,119
29A2:  MOVFF  116,118
29A6:  RCALL  27A2
29A8:  MOVLW  0D
29AA:  BTFSS  F9E.4
29AC:  BRA    29AA
29AE:  MOVWF  FAD
29B0:  MOVLW  0A
29B2:  BTFSS  F9E.4
29B4:  BRA    29B2
29B6:  MOVWF  FAD
29B8:  CLRF   19
29BA:  BTFSC  FF2.7
29BC:  BSF    19.7
29BE:  BCF    FF2.7
.................... 	fprintf(STREAM_FTDI,"#      temp adc=%lu\r\n",adc_get(1));
29C0:  MOVLW  01
29C2:  MOVLB  1
29C4:  MOVWF  x3D
29C6:  MOVLB  0
29C8:  CALL   0594
29CC:  BTFSC  19.7
29CE:  BSF    FF2.7
29D0:  MOVFF  02,117
29D4:  MOVFF  01,116
29D8:  MOVLW  C6
29DA:  MOVWF  FF6
29DC:  MOVLW  0F
29DE:  MOVWF  FF7
29E0:  MOVLW  10
29E2:  MOVLB  1
29E4:  MOVWF  x19
29E6:  MOVLB  0
29E8:  CALL   1982
29EC:  MOVLW  10
29EE:  MOVWF  FE9
29F0:  MOVFF  117,119
29F4:  MOVFF  116,118
29F8:  RCALL  27A2
29FA:  MOVLW  0D
29FC:  BTFSS  F9E.4
29FE:  BRA    29FC
2A00:  MOVWF  FAD
2A02:  MOVLW  0A
2A04:  BTFSS  F9E.4
2A06:  BRA    2A04
2A08:  MOVWF  FAD
.................... //	fprintf(STREAM_FTDI,"# read_dip_sw()=%u\r\n",read_dip_switch());
.................... //	fprintf(STREAM_FTDI,"#    dip sw adc=%lu\r\n",adc_get(2));
.................... 
.................... 	for ( i=0 ; i<2 ; i++ ) {
2A0A:  MOVLB  1
2A0C:  CLRF   x15
2A0E:  MOVF   x15,W
2A10:  SUBLW  01
2A12:  BTFSS  FD8.0
2A14:  GOTO   35A6
.................... 		restart_wdt();
2A18:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# config.ch[%u]\r\n",i);
2A1A:  MOVLW  DC
2A1C:  MOVWF  FF6
2A1E:  MOVLW  0F
2A20:  MOVWF  FF7
2A22:  MOVLW  0C
2A24:  MOVWF  x19
2A26:  MOVLB  0
2A28:  CALL   1982
2A2C:  MOVFF  115,116
2A30:  MOVLW  1B
2A32:  MOVLB  1
2A34:  MOVWF  x17
2A36:  MOVLB  0
2A38:  RCALL  2724
2A3A:  MOVLW  EA
2A3C:  MOVWF  FF6
2A3E:  MOVLW  0F
2A40:  MOVWF  FF7
2A42:  MOVLW  03
2A44:  MOVLB  1
2A46:  MOVWF  x19
2A48:  MOVLB  0
2A4A:  CALL   1982
.................... 		fprintf(STREAM_FTDI,"# command_off_hold_time=%lu\r\n",config.ch[i].command_off_hold_time);
2A4E:  MOVLB  1
2A50:  MOVF   x15,W
2A52:  MULLW  24
2A54:  MOVF   FF3,W
2A56:  CLRF   x17
2A58:  MOVWF  x16
2A5A:  MOVLW  02
2A5C:  ADDWF  x16,W
2A5E:  MOVWF  01
2A60:  MOVLW  00
2A62:  ADDWFC x17,W
2A64:  MOVWF  03
2A66:  MOVF   01,W
2A68:  ADDLW  1B
2A6A:  MOVWF  FE9
2A6C:  MOVLW  00
2A6E:  ADDWFC 03,W
2A70:  MOVWF  FEA
2A72:  MOVFF  FEC,117
2A76:  MOVF   FED,F
2A78:  MOVFF  FEF,116
2A7C:  MOVLW  EE
2A7E:  MOVWF  FF6
2A80:  MOVLW  0F
2A82:  MOVWF  FF7
2A84:  MOVLW  18
2A86:  MOVWF  x19
2A88:  MOVLB  0
2A8A:  CALL   1982
2A8E:  MOVLW  10
2A90:  MOVWF  FE9
2A92:  MOVFF  117,119
2A96:  MOVFF  116,118
2A9A:  RCALL  27A2
2A9C:  MOVLW  0D
2A9E:  BTFSS  F9E.4
2AA0:  BRA    2A9E
2AA2:  MOVWF  FAD
2AA4:  MOVLW  0A
2AA6:  BTFSS  F9E.4
2AA8:  BRA    2AA6
2AAA:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    lvd_disconnect_adc=%lu\r\n",config.ch[i].lvd_disconnect_adc);
2AAC:  MOVLB  1
2AAE:  MOVF   x15,W
2AB0:  MULLW  24
2AB2:  MOVF   FF3,W
2AB4:  CLRF   x17
2AB6:  MOVWF  x16
2AB8:  MOVLW  04
2ABA:  ADDWF  x16,W
2ABC:  MOVWF  01
2ABE:  MOVLW  00
2AC0:  ADDWFC x17,W
2AC2:  MOVWF  03
2AC4:  MOVF   01,W
2AC6:  ADDLW  1B
2AC8:  MOVWF  FE9
2ACA:  MOVLW  00
2ACC:  ADDWFC 03,W
2ACE:  MOVWF  FEA
2AD0:  MOVFF  FEC,117
2AD4:  MOVF   FED,F
2AD6:  MOVFF  FEF,116
2ADA:  MOVLW  0C
2ADC:  MOVWF  FF6
2ADE:  MOVLW  10
2AE0:  MOVWF  FF7
2AE2:  MOVLW  18
2AE4:  MOVWF  x19
2AE6:  MOVLB  0
2AE8:  CALL   1982
2AEC:  MOVLW  10
2AEE:  MOVWF  FE9
2AF0:  MOVFF  117,119
2AF4:  MOVFF  116,118
2AF8:  RCALL  27A2
2AFA:  MOVLW  0D
2AFC:  BTFSS  F9E.4
2AFE:  BRA    2AFC
2B00:  MOVWF  FAD
2B02:  MOVLW  0A
2B04:  BTFSS  F9E.4
2B06:  BRA    2B04
2B08:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  lvd_disconnect_delay=%lu\r\n",config.ch[i].lvd_disconnect_delay);
2B0A:  MOVLB  1
2B0C:  MOVF   x15,W
2B0E:  MULLW  24
2B10:  MOVF   FF3,W
2B12:  CLRF   x17
2B14:  MOVWF  x16
2B16:  MOVLW  06
2B18:  ADDWF  x16,W
2B1A:  MOVWF  01
2B1C:  MOVLW  00
2B1E:  ADDWFC x17,W
2B20:  MOVWF  03
2B22:  MOVF   01,W
2B24:  ADDLW  1B
2B26:  MOVWF  FE9
2B28:  MOVLW  00
2B2A:  ADDWFC 03,W
2B2C:  MOVWF  FEA
2B2E:  MOVFF  FEC,117
2B32:  MOVF   FED,F
2B34:  MOVFF  FEF,116
2B38:  MOVLW  2A
2B3A:  MOVWF  FF6
2B3C:  MOVLW  10
2B3E:  MOVWF  FF7
2B40:  MOVLW  18
2B42:  MOVWF  x19
2B44:  MOVLB  0
2B46:  CALL   1982
2B4A:  MOVLW  10
2B4C:  MOVWF  FE9
2B4E:  MOVFF  117,119
2B52:  MOVFF  116,118
2B56:  RCALL  27A2
2B58:  MOVLW  0D
2B5A:  BTFSS  F9E.4
2B5C:  BRA    2B5A
2B5E:  MOVWF  FAD
2B60:  MOVLW  0A
2B62:  BTFSS  F9E.4
2B64:  BRA    2B62
2B66:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     lvd_reconnect_adc=%lu\r\n",config.ch[i].lvd_reconnect_adc);
2B68:  MOVLB  1
2B6A:  MOVF   x15,W
2B6C:  MULLW  24
2B6E:  MOVF   FF3,W
2B70:  CLRF   x17
2B72:  MOVWF  x16
2B74:  MOVLW  08
2B76:  ADDWF  x16,W
2B78:  MOVWF  01
2B7A:  MOVLW  00
2B7C:  ADDWFC x17,W
2B7E:  MOVWF  03
2B80:  MOVF   01,W
2B82:  ADDLW  1B
2B84:  MOVWF  FE9
2B86:  MOVLW  00
2B88:  ADDWFC 03,W
2B8A:  MOVWF  FEA
2B8C:  MOVFF  FEC,117
2B90:  MOVF   FED,F
2B92:  MOVFF  FEF,116
2B96:  MOVLW  48
2B98:  MOVWF  FF6
2B9A:  MOVLW  10
2B9C:  MOVWF  FF7
2B9E:  MOVLW  18
2BA0:  MOVWF  x19
2BA2:  MOVLB  0
2BA4:  CALL   1982
2BA8:  MOVLW  10
2BAA:  MOVWF  FE9
2BAC:  MOVFF  117,119
2BB0:  MOVFF  116,118
2BB4:  RCALL  27A2
2BB6:  MOVLW  0D
2BB8:  BTFSS  F9E.4
2BBA:  BRA    2BB8
2BBC:  MOVWF  FAD
2BBE:  MOVLW  0A
2BC0:  BTFSS  F9E.4
2BC2:  BRA    2BC0
2BC4:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   lvd_reconnect_delay=%lu\r\n",config.ch[i].lvd_reconnect_delay);
2BC6:  MOVLB  1
2BC8:  MOVF   x15,W
2BCA:  MULLW  24
2BCC:  MOVF   FF3,W
2BCE:  CLRF   x17
2BD0:  MOVWF  x16
2BD2:  MOVLW  0A
2BD4:  ADDWF  x16,W
2BD6:  MOVWF  01
2BD8:  MOVLW  00
2BDA:  ADDWFC x17,W
2BDC:  MOVWF  03
2BDE:  MOVF   01,W
2BE0:  ADDLW  1B
2BE2:  MOVWF  FE9
2BE4:  MOVLW  00
2BE6:  ADDWFC 03,W
2BE8:  MOVWF  FEA
2BEA:  MOVFF  FEC,117
2BEE:  MOVF   FED,F
2BF0:  MOVFF  FEF,116
2BF4:  MOVLW  66
2BF6:  MOVWF  FF6
2BF8:  MOVLW  10
2BFA:  MOVWF  FF7
2BFC:  MOVLW  18
2BFE:  MOVWF  x19
2C00:  MOVLB  0
2C02:  CALL   1982
2C06:  MOVLW  10
2C08:  MOVWF  FE9
2C0A:  MOVFF  117,119
2C0E:  MOVFF  116,118
2C12:  RCALL  27A2
2C14:  MOVLW  0D
2C16:  BTFSS  F9E.4
2C18:  BRA    2C16
2C1A:  MOVWF  FAD
2C1C:  MOVLW  0A
2C1E:  BTFSS  F9E.4
2C20:  BRA    2C1E
2C22:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    hvd_disconnect_adc=%lu\r\n",config.ch[i].hvd_disconnect_adc);
2C24:  MOVLB  1
2C26:  MOVF   x15,W
2C28:  MULLW  24
2C2A:  MOVF   FF3,W
2C2C:  CLRF   x17
2C2E:  MOVWF  x16
2C30:  MOVLW  0C
2C32:  ADDWF  x16,W
2C34:  MOVWF  01
2C36:  MOVLW  00
2C38:  ADDWFC x17,W
2C3A:  MOVWF  03
2C3C:  MOVF   01,W
2C3E:  ADDLW  1B
2C40:  MOVWF  FE9
2C42:  MOVLW  00
2C44:  ADDWFC 03,W
2C46:  MOVWF  FEA
2C48:  MOVFF  FEC,117
2C4C:  MOVF   FED,F
2C4E:  MOVFF  FEF,116
2C52:  MOVLW  84
2C54:  MOVWF  FF6
2C56:  MOVLW  10
2C58:  MOVWF  FF7
2C5A:  MOVLW  18
2C5C:  MOVWF  x19
2C5E:  MOVLB  0
2C60:  CALL   1982
2C64:  MOVLW  10
2C66:  MOVWF  FE9
2C68:  MOVFF  117,119
2C6C:  MOVFF  116,118
2C70:  RCALL  27A2
2C72:  MOVLW  0D
2C74:  BTFSS  F9E.4
2C76:  BRA    2C74
2C78:  MOVWF  FAD
2C7A:  MOVLW  0A
2C7C:  BTFSS  F9E.4
2C7E:  BRA    2C7C
2C80:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  hvd_disconnect_delay=%lu\r\n",config.ch[i].hvd_disconnect_delay);
2C82:  MOVLB  1
2C84:  MOVF   x15,W
2C86:  MULLW  24
2C88:  MOVF   FF3,W
2C8A:  CLRF   x17
2C8C:  MOVWF  x16
2C8E:  MOVLW  0E
2C90:  ADDWF  x16,W
2C92:  MOVWF  01
2C94:  MOVLW  00
2C96:  ADDWFC x17,W
2C98:  MOVWF  03
2C9A:  MOVF   01,W
2C9C:  ADDLW  1B
2C9E:  MOVWF  FE9
2CA0:  MOVLW  00
2CA2:  ADDWFC 03,W
2CA4:  MOVWF  FEA
2CA6:  MOVFF  FEC,117
2CAA:  MOVF   FED,F
2CAC:  MOVFF  FEF,116
2CB0:  MOVLW  A2
2CB2:  MOVWF  FF6
2CB4:  MOVLW  10
2CB6:  MOVWF  FF7
2CB8:  MOVLW  18
2CBA:  MOVWF  x19
2CBC:  MOVLB  0
2CBE:  CALL   1982
2CC2:  MOVLW  10
2CC4:  MOVWF  FE9
2CC6:  MOVFF  117,119
2CCA:  MOVFF  116,118
2CCE:  RCALL  27A2
2CD0:  MOVLW  0D
2CD2:  BTFSS  F9E.4
2CD4:  BRA    2CD2
2CD6:  MOVWF  FAD
2CD8:  MOVLW  0A
2CDA:  BTFSS  F9E.4
2CDC:  BRA    2CDA
2CDE:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     hvd_reconnect_adc=%lu\r\n",config.ch[i].hvd_reconnect_adc);
2CE0:  MOVLB  1
2CE2:  MOVF   x15,W
2CE4:  MULLW  24
2CE6:  MOVF   FF3,W
2CE8:  CLRF   x17
2CEA:  MOVWF  x16
2CEC:  MOVLW  10
2CEE:  ADDWF  x16,W
2CF0:  MOVWF  01
2CF2:  MOVLW  00
2CF4:  ADDWFC x17,W
2CF6:  MOVWF  03
2CF8:  MOVF   01,W
2CFA:  ADDLW  1B
2CFC:  MOVWF  FE9
2CFE:  MOVLW  00
2D00:  ADDWFC 03,W
2D02:  MOVWF  FEA
2D04:  MOVFF  FEC,117
2D08:  MOVF   FED,F
2D0A:  MOVFF  FEF,116
2D0E:  MOVLW  C0
2D10:  MOVWF  FF6
2D12:  MOVLW  10
2D14:  MOVWF  FF7
2D16:  MOVLW  18
2D18:  MOVWF  x19
2D1A:  MOVLB  0
2D1C:  CALL   1982
2D20:  MOVLW  10
2D22:  MOVWF  FE9
2D24:  MOVFF  117,119
2D28:  MOVFF  116,118
2D2C:  RCALL  27A2
2D2E:  MOVLW  0D
2D30:  BTFSS  F9E.4
2D32:  BRA    2D30
2D34:  MOVWF  FAD
2D36:  MOVLW  0A
2D38:  BTFSS  F9E.4
2D3A:  BRA    2D38
2D3C:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   hvd_reconnect_delay=%lu\r\n",config.ch[i].hvd_reconnect_delay);
2D3E:  MOVLB  1
2D40:  MOVF   x15,W
2D42:  MULLW  24
2D44:  MOVF   FF3,W
2D46:  CLRF   x17
2D48:  MOVWF  x16
2D4A:  MOVLW  12
2D4C:  ADDWF  x16,W
2D4E:  MOVWF  01
2D50:  MOVLW  00
2D52:  ADDWFC x17,W
2D54:  MOVWF  03
2D56:  MOVF   01,W
2D58:  ADDLW  1B
2D5A:  MOVWF  FE9
2D5C:  MOVLW  00
2D5E:  ADDWFC 03,W
2D60:  MOVWF  FEA
2D62:  MOVFF  FEC,117
2D66:  MOVF   FED,F
2D68:  MOVFF  FEF,116
2D6C:  MOVLW  DE
2D6E:  MOVWF  FF6
2D70:  MOVLW  10
2D72:  MOVWF  FF7
2D74:  MOVLW  18
2D76:  MOVWF  x19
2D78:  MOVLB  0
2D7A:  CALL   1982
2D7E:  MOVLW  10
2D80:  MOVWF  FE9
2D82:  MOVFF  117,119
2D86:  MOVFF  116,118
2D8A:  RCALL  27A2
2D8C:  MOVLW  0D
2D8E:  BTFSS  F9E.4
2D90:  BRA    2D8E
2D92:  MOVWF  FAD
2D94:  MOVLW  0A
2D96:  BTFSS  F9E.4
2D98:  BRA    2D96
2D9A:  MOVWF  FAD
.................... 
.................... 		restart_wdt();
2D9C:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"#    ltd_disconnect_adc=%lu\r\n",config.ch[i].ltd_disconnect_adc);
2D9E:  MOVLB  1
2DA0:  MOVF   x15,W
2DA2:  MULLW  24
2DA4:  MOVF   FF3,W
2DA6:  CLRF   x17
2DA8:  MOVWF  x16
2DAA:  MOVLW  14
2DAC:  ADDWF  x16,W
2DAE:  MOVWF  01
2DB0:  MOVLW  00
2DB2:  ADDWFC x17,W
2DB4:  MOVWF  03
2DB6:  MOVF   01,W
2DB8:  ADDLW  1B
2DBA:  MOVWF  FE9
2DBC:  MOVLW  00
2DBE:  ADDWFC 03,W
2DC0:  MOVWF  FEA
2DC2:  MOVFF  FEC,117
2DC6:  MOVF   FED,F
2DC8:  MOVFF  FEF,116
2DCC:  MOVLW  FC
2DCE:  MOVWF  FF6
2DD0:  MOVLW  10
2DD2:  MOVWF  FF7
2DD4:  MOVLW  18
2DD6:  MOVWF  x19
2DD8:  MOVLB  0
2DDA:  CALL   1982
2DDE:  MOVLW  10
2DE0:  MOVWF  FE9
2DE2:  MOVFF  117,119
2DE6:  MOVFF  116,118
2DEA:  RCALL  27A2
2DEC:  MOVLW  0D
2DEE:  BTFSS  F9E.4
2DF0:  BRA    2DEE
2DF2:  MOVWF  FAD
2DF4:  MOVLW  0A
2DF6:  BTFSS  F9E.4
2DF8:  BRA    2DF6
2DFA:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  ltd_disconnect_delay=%lu\r\n",config.ch[i].ltd_disconnect_delay);
2DFC:  MOVLB  1
2DFE:  MOVF   x15,W
2E00:  MULLW  24
2E02:  MOVF   FF3,W
2E04:  CLRF   x17
2E06:  MOVWF  x16
2E08:  MOVLW  16
2E0A:  ADDWF  x16,W
2E0C:  MOVWF  01
2E0E:  MOVLW  00
2E10:  ADDWFC x17,W
2E12:  MOVWF  03
2E14:  MOVF   01,W
2E16:  ADDLW  1B
2E18:  MOVWF  FE9
2E1A:  MOVLW  00
2E1C:  ADDWFC 03,W
2E1E:  MOVWF  FEA
2E20:  MOVFF  FEC,117
2E24:  MOVF   FED,F
2E26:  MOVFF  FEF,116
2E2A:  MOVLW  1A
2E2C:  MOVWF  FF6
2E2E:  MOVLW  11
2E30:  MOVWF  FF7
2E32:  MOVLW  18
2E34:  MOVWF  x19
2E36:  MOVLB  0
2E38:  CALL   1982
2E3C:  MOVLW  10
2E3E:  MOVWF  FE9
2E40:  MOVFF  117,119
2E44:  MOVFF  116,118
2E48:  RCALL  27A2
2E4A:  MOVLW  0D
2E4C:  BTFSS  F9E.4
2E4E:  BRA    2E4C
2E50:  MOVWF  FAD
2E52:  MOVLW  0A
2E54:  BTFSS  F9E.4
2E56:  BRA    2E54
2E58:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     ltd_reconnect_adc=%lu\r\n",config.ch[i].ltd_reconnect_adc);
2E5A:  MOVLB  1
2E5C:  MOVF   x15,W
2E5E:  MULLW  24
2E60:  MOVF   FF3,W
2E62:  CLRF   x17
2E64:  MOVWF  x16
2E66:  MOVLW  18
2E68:  ADDWF  x16,W
2E6A:  MOVWF  01
2E6C:  MOVLW  00
2E6E:  ADDWFC x17,W
2E70:  MOVWF  03
2E72:  MOVF   01,W
2E74:  ADDLW  1B
2E76:  MOVWF  FE9
2E78:  MOVLW  00
2E7A:  ADDWFC 03,W
2E7C:  MOVWF  FEA
2E7E:  MOVFF  FEC,117
2E82:  MOVF   FED,F
2E84:  MOVFF  FEF,116
2E88:  MOVLW  38
2E8A:  MOVWF  FF6
2E8C:  MOVLW  11
2E8E:  MOVWF  FF7
2E90:  MOVLW  18
2E92:  MOVWF  x19
2E94:  MOVLB  0
2E96:  CALL   1982
2E9A:  MOVLW  10
2E9C:  MOVWF  FE9
2E9E:  MOVFF  117,119
2EA2:  MOVFF  116,118
2EA6:  RCALL  27A2
2EA8:  MOVLW  0D
2EAA:  BTFSS  F9E.4
2EAC:  BRA    2EAA
2EAE:  MOVWF  FAD
2EB0:  MOVLW  0A
2EB2:  BTFSS  F9E.4
2EB4:  BRA    2EB2
2EB6:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   ltd_reconnect_delay=%lu\r\n",config.ch[i].ltd_reconnect_delay);
2EB8:  MOVLB  1
2EBA:  MOVF   x15,W
2EBC:  MULLW  24
2EBE:  MOVF   FF3,W
2EC0:  CLRF   x17
2EC2:  MOVWF  x16
2EC4:  MOVLW  1A
2EC6:  ADDWF  x16,W
2EC8:  MOVWF  01
2ECA:  MOVLW  00
2ECC:  ADDWFC x17,W
2ECE:  MOVWF  03
2ED0:  MOVF   01,W
2ED2:  ADDLW  1B
2ED4:  MOVWF  FE9
2ED6:  MOVLW  00
2ED8:  ADDWFC 03,W
2EDA:  MOVWF  FEA
2EDC:  MOVFF  FEC,117
2EE0:  MOVF   FED,F
2EE2:  MOVFF  FEF,116
2EE6:  MOVLW  56
2EE8:  MOVWF  FF6
2EEA:  MOVLW  11
2EEC:  MOVWF  FF7
2EEE:  MOVLW  18
2EF0:  MOVWF  x19
2EF2:  MOVLB  0
2EF4:  CALL   1982
2EF8:  MOVLW  10
2EFA:  MOVWF  FE9
2EFC:  MOVFF  117,119
2F00:  MOVFF  116,118
2F04:  RCALL  27A2
2F06:  MOVLW  0D
2F08:  BTFSS  F9E.4
2F0A:  BRA    2F08
2F0C:  MOVWF  FAD
2F0E:  MOVLW  0A
2F10:  BTFSS  F9E.4
2F12:  BRA    2F10
2F14:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#    htd_disconnect_adc=%lu\r\n",config.ch[i].htd_disconnect_adc);
2F16:  MOVLB  1
2F18:  MOVF   x15,W
2F1A:  MULLW  24
2F1C:  MOVF   FF3,W
2F1E:  CLRF   x17
2F20:  MOVWF  x16
2F22:  MOVLW  1C
2F24:  ADDWF  x16,W
2F26:  MOVWF  01
2F28:  MOVLW  00
2F2A:  ADDWFC x17,W
2F2C:  MOVWF  03
2F2E:  MOVF   01,W
2F30:  ADDLW  1B
2F32:  MOVWF  FE9
2F34:  MOVLW  00
2F36:  ADDWFC 03,W
2F38:  MOVWF  FEA
2F3A:  MOVFF  FEC,117
2F3E:  MOVF   FED,F
2F40:  MOVFF  FEF,116
2F44:  MOVLW  74
2F46:  MOVWF  FF6
2F48:  MOVLW  11
2F4A:  MOVWF  FF7
2F4C:  MOVLW  18
2F4E:  MOVWF  x19
2F50:  MOVLB  0
2F52:  CALL   1982
2F56:  MOVLW  10
2F58:  MOVWF  FE9
2F5A:  MOVFF  117,119
2F5E:  MOVFF  116,118
2F62:  RCALL  27A2
2F64:  MOVLW  0D
2F66:  BTFSS  F9E.4
2F68:  BRA    2F66
2F6A:  MOVWF  FAD
2F6C:  MOVLW  0A
2F6E:  BTFSS  F9E.4
2F70:  BRA    2F6E
2F72:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  htd_disconnect_delay=%lu\r\n",config.ch[i].htd_disconnect_delay);
2F74:  MOVLB  1
2F76:  MOVF   x15,W
2F78:  MULLW  24
2F7A:  MOVF   FF3,W
2F7C:  CLRF   x17
2F7E:  MOVWF  x16
2F80:  MOVLW  1E
2F82:  ADDWF  x16,W
2F84:  MOVWF  01
2F86:  MOVLW  00
2F88:  ADDWFC x17,W
2F8A:  MOVWF  03
2F8C:  MOVF   01,W
2F8E:  ADDLW  1B
2F90:  MOVWF  FE9
2F92:  MOVLW  00
2F94:  ADDWFC 03,W
2F96:  MOVWF  FEA
2F98:  MOVFF  FEC,117
2F9C:  MOVF   FED,F
2F9E:  MOVFF  FEF,116
2FA2:  MOVLW  92
2FA4:  MOVWF  FF6
2FA6:  MOVLW  11
2FA8:  MOVWF  FF7
2FAA:  MOVLW  18
2FAC:  MOVWF  x19
2FAE:  MOVLB  0
2FB0:  CALL   1982
2FB4:  MOVLW  10
2FB6:  MOVWF  FE9
2FB8:  MOVFF  117,119
2FBC:  MOVFF  116,118
2FC0:  CALL   27A2
2FC4:  MOVLW  0D
2FC6:  BTFSS  F9E.4
2FC8:  BRA    2FC6
2FCA:  MOVWF  FAD
2FCC:  MOVLW  0A
2FCE:  BTFSS  F9E.4
2FD0:  BRA    2FCE
2FD2:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     htd_reconnect_adc=%lu\r\n",config.ch[i].htd_reconnect_adc);
2FD4:  MOVLB  1
2FD6:  MOVF   x15,W
2FD8:  MULLW  24
2FDA:  MOVF   FF3,W
2FDC:  CLRF   x17
2FDE:  MOVWF  x16
2FE0:  MOVLW  20
2FE2:  ADDWF  x16,W
2FE4:  MOVWF  01
2FE6:  MOVLW  00
2FE8:  ADDWFC x17,W
2FEA:  MOVWF  03
2FEC:  MOVF   01,W
2FEE:  ADDLW  1B
2FF0:  MOVWF  FE9
2FF2:  MOVLW  00
2FF4:  ADDWFC 03,W
2FF6:  MOVWF  FEA
2FF8:  MOVFF  FEC,117
2FFC:  MOVF   FED,F
2FFE:  MOVFF  FEF,116
3002:  MOVLW  B0
3004:  MOVWF  FF6
3006:  MOVLW  11
3008:  MOVWF  FF7
300A:  MOVLW  18
300C:  MOVWF  x19
300E:  MOVLB  0
3010:  CALL   1982
3014:  MOVLW  10
3016:  MOVWF  FE9
3018:  MOVFF  117,119
301C:  MOVFF  116,118
3020:  CALL   27A2
3024:  MOVLW  0D
3026:  BTFSS  F9E.4
3028:  BRA    3026
302A:  MOVWF  FAD
302C:  MOVLW  0A
302E:  BTFSS  F9E.4
3030:  BRA    302E
3032:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#   htd_reconnect_delay=%lu\r\n",config.ch[i].htd_reconnect_delay);
3034:  MOVLB  1
3036:  MOVF   x15,W
3038:  MULLW  24
303A:  MOVF   FF3,W
303C:  CLRF   x17
303E:  MOVWF  x16
3040:  MOVLW  22
3042:  ADDWF  x16,W
3044:  MOVWF  01
3046:  MOVLW  00
3048:  ADDWFC x17,W
304A:  MOVWF  03
304C:  MOVF   01,W
304E:  ADDLW  1B
3050:  MOVWF  FE9
3052:  MOVLW  00
3054:  ADDWFC 03,W
3056:  MOVWF  FEA
3058:  MOVFF  FEC,117
305C:  MOVF   FED,F
305E:  MOVFF  FEF,116
3062:  MOVLW  CE
3064:  MOVWF  FF6
3066:  MOVLW  11
3068:  MOVWF  FF7
306A:  MOVLW  18
306C:  MOVWF  x19
306E:  MOVLB  0
3070:  CALL   1982
3074:  MOVLW  10
3076:  MOVWF  FE9
3078:  MOVFF  117,119
307C:  MOVFF  116,118
3080:  CALL   27A2
3084:  MOVLW  0D
3086:  BTFSS  F9E.4
3088:  BRA    3086
308A:  MOVWF  FAD
308C:  MOVLW  0A
308E:  BTFSS  F9E.4
3090:  BRA    308E
3092:  MOVWF  FAD
.................... 
.................... 
.................... 		restart_wdt();
3094:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# channel[%u]\r\n",i);
3096:  MOVLW  EC
3098:  MOVWF  FF6
309A:  MOVLW  11
309C:  MOVWF  FF7
309E:  MOVLW  0A
30A0:  MOVLB  1
30A2:  MOVWF  x19
30A4:  MOVLB  0
30A6:  CALL   1982
30AA:  MOVFF  115,116
30AE:  MOVLW  1B
30B0:  MOVLB  1
30B2:  MOVWF  x17
30B4:  MOVLB  0
30B6:  CALL   2724
30BA:  MOVLW  F8
30BC:  MOVWF  FF6
30BE:  MOVLW  11
30C0:  MOVWF  FF7
30C2:  MOVLW  03
30C4:  MOVLB  1
30C6:  MOVWF  x19
30C8:  MOVLB  0
30CA:  CALL   1982
.................... 		fprintf(STREAM_FTDI,"#                        state=0x%02x\r\n",channel[i].state);
30CE:  MOVLB  1
30D0:  MOVF   x15,W
30D2:  MULLW  19
30D4:  MOVF   FF3,W
30D6:  CLRF   x17
30D8:  MOVWF  x16
30DA:  MOVLW  D4
30DC:  ADDWF  x16,W
30DE:  MOVWF  FE9
30E0:  MOVLW  00
30E2:  ADDWFC x17,W
30E4:  MOVWF  FEA
30E6:  MOVFF  FEF,118
30EA:  MOVLW  FC
30EC:  MOVWF  FF6
30EE:  MOVLW  11
30F0:  MOVWF  FF7
30F2:  MOVLW  21
30F4:  MOVWF  x19
30F6:  MOVLB  0
30F8:  CALL   1982
30FC:  MOVFF  118,119
3100:  MOVLW  57
3102:  MOVLB  1
3104:  MOVWF  x1A
3106:  MOVLB  0
3108:  GOTO   2854
310C:  MOVLW  0D
310E:  BTFSS  F9E.4
3110:  BRA    310E
3112:  MOVWF  FAD
3114:  MOVLW  0A
3116:  BTFSS  F9E.4
3118:  BRA    3116
311A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#           command_on_seconds=%lu\r\n",channel[i].command_on_seconds);
311C:  MOVLB  1
311E:  MOVF   x15,W
3120:  MULLW  19
3122:  MOVF   FF3,W
3124:  CLRF   x17
3126:  MOVWF  x16
3128:  MOVLW  01
312A:  ADDWF  x16,W
312C:  MOVWF  01
312E:  MOVLW  00
3130:  ADDWFC x17,W
3132:  MOVWF  03
3134:  MOVF   01,W
3136:  ADDLW  D4
3138:  MOVWF  FE9
313A:  MOVLW  00
313C:  ADDWFC 03,W
313E:  MOVWF  FEA
3140:  MOVFF  FEC,117
3144:  MOVF   FED,F
3146:  MOVFF  FEF,116
314A:  MOVLW  24
314C:  MOVWF  FF6
314E:  MOVLW  12
3150:  MOVWF  FF7
3152:  MOVLW  1F
3154:  MOVWF  x19
3156:  MOVLB  0
3158:  CALL   1982
315C:  MOVLW  10
315E:  MOVWF  FE9
3160:  MOVFF  117,119
3164:  MOVFF  116,118
3168:  CALL   27A2
316C:  MOVLW  0D
316E:  BTFSS  F9E.4
3170:  BRA    316E
3172:  MOVWF  FAD
3174:  MOVLW  0A
3176:  BTFSS  F9E.4
3178:  BRA    3176
317A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#      command_on_hold_seconds=%lu\r\n",channel[i].command_on_hold_seconds);
317C:  MOVLB  1
317E:  MOVF   x15,W
3180:  MULLW  19
3182:  MOVF   FF3,W
3184:  CLRF   x17
3186:  MOVWF  x16
3188:  MOVLW  03
318A:  ADDWF  x16,W
318C:  MOVWF  01
318E:  MOVLW  00
3190:  ADDWFC x17,W
3192:  MOVWF  03
3194:  MOVF   01,W
3196:  ADDLW  D4
3198:  MOVWF  FE9
319A:  MOVLW  00
319C:  ADDWFC 03,W
319E:  MOVWF  FEA
31A0:  MOVFF  FEC,117
31A4:  MOVF   FED,F
31A6:  MOVFF  FEF,116
31AA:  MOVLW  4A
31AC:  MOVWF  FF6
31AE:  MOVLW  12
31B0:  MOVWF  FF7
31B2:  MOVLW  1F
31B4:  MOVWF  x19
31B6:  MOVLB  0
31B8:  CALL   1982
31BC:  MOVLW  10
31BE:  MOVWF  FE9
31C0:  MOVFF  117,119
31C4:  MOVFF  116,118
31C8:  CALL   27A2
31CC:  MOVLW  0D
31CE:  BTFSS  F9E.4
31D0:  BRA    31CE
31D2:  MOVWF  FAD
31D4:  MOVLW  0A
31D6:  BTFSS  F9E.4
31D8:  BRA    31D6
31DA:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"#          command_off_seconds=%lu\r\n",channel[i].command_off_seconds);
31DC:  MOVLB  1
31DE:  MOVF   x15,W
31E0:  MULLW  19
31E2:  MOVF   FF3,W
31E4:  CLRF   x17
31E6:  MOVWF  x16
31E8:  MOVLW  05
31EA:  ADDWF  x16,W
31EC:  MOVWF  01
31EE:  MOVLW  00
31F0:  ADDWFC x17,W
31F2:  MOVWF  03
31F4:  MOVF   01,W
31F6:  ADDLW  D4
31F8:  MOVWF  FE9
31FA:  MOVLW  00
31FC:  ADDWFC 03,W
31FE:  MOVWF  FEA
3200:  MOVFF  FEC,117
3204:  MOVF   FED,F
3206:  MOVFF  FEF,116
320A:  MOVLW  70
320C:  MOVWF  FF6
320E:  MOVLW  12
3210:  MOVWF  FF7
3212:  MOVLW  1F
3214:  MOVWF  x19
3216:  MOVLB  0
3218:  CALL   1982
321C:  MOVLW  10
321E:  MOVWF  FE9
3220:  MOVFF  117,119
3224:  MOVFF  116,118
3228:  CALL   27A2
322C:  MOVLW  0D
322E:  BTFSS  F9E.4
3230:  BRA    322E
3232:  MOVWF  FAD
3234:  MOVLW  0A
3236:  BTFSS  F9E.4
3238:  BRA    3236
323A:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#     command_off_hold_seconds=%lu\r\n",channel[i].command_off_hold_seconds);
323C:  MOVLB  1
323E:  MOVF   x15,W
3240:  MULLW  19
3242:  MOVF   FF3,W
3244:  CLRF   x17
3246:  MOVWF  x16
3248:  MOVLW  07
324A:  ADDWF  x16,W
324C:  MOVWF  01
324E:  MOVLW  00
3250:  ADDWFC x17,W
3252:  MOVWF  03
3254:  MOVF   01,W
3256:  ADDLW  D4
3258:  MOVWF  FE9
325A:  MOVLW  00
325C:  ADDWFC 03,W
325E:  MOVWF  FEA
3260:  MOVFF  FEC,117
3264:  MOVF   FED,F
3266:  MOVFF  FEF,116
326A:  MOVLW  96
326C:  MOVWF  FF6
326E:  MOVLW  12
3270:  MOVWF  FF7
3272:  MOVLW  1F
3274:  MOVWF  x19
3276:  MOVLB  0
3278:  CALL   1982
327C:  MOVLW  10
327E:  MOVWF  FE9
3280:  MOVFF  117,119
3284:  MOVFF  116,118
3288:  CALL   27A2
328C:  MOVLW  0D
328E:  BTFSS  F9E.4
3290:  BRA    328E
3292:  MOVWF  FAD
3294:  MOVLW  0A
3296:  BTFSS  F9E.4
3298:  BRA    3296
329A:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# lvd_disconnect_delay_seconds=%lu\r\n",channel[i].lvd_disconnect_delay_seconds);
329C:  MOVLB  1
329E:  MOVF   x15,W
32A0:  MULLW  19
32A2:  MOVF   FF3,W
32A4:  CLRF   x17
32A6:  MOVWF  x16
32A8:  MOVLW  09
32AA:  ADDWF  x16,W
32AC:  MOVWF  01
32AE:  MOVLW  00
32B0:  ADDWFC x17,W
32B2:  MOVWF  03
32B4:  MOVF   01,W
32B6:  ADDLW  D4
32B8:  MOVWF  FE9
32BA:  MOVLW  00
32BC:  ADDWFC 03,W
32BE:  MOVWF  FEA
32C0:  MOVFF  FEC,117
32C4:  MOVF   FED,F
32C6:  MOVFF  FEF,116
32CA:  MOVLW  BC
32CC:  MOVWF  FF6
32CE:  MOVLW  12
32D0:  MOVWF  FF7
32D2:  MOVLW  1F
32D4:  MOVWF  x19
32D6:  MOVLB  0
32D8:  CALL   1982
32DC:  MOVLW  10
32DE:  MOVWF  FE9
32E0:  MOVFF  117,119
32E4:  MOVFF  116,118
32E8:  CALL   27A2
32EC:  MOVLW  0D
32EE:  BTFSS  F9E.4
32F0:  BRA    32EE
32F2:  MOVWF  FAD
32F4:  MOVLW  0A
32F6:  BTFSS  F9E.4
32F8:  BRA    32F6
32FA:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  lvd_reconnect_delay_seconds=%lu\r\n",channel[i].lvd_reconnect_delay_seconds);
32FC:  MOVLB  1
32FE:  MOVF   x15,W
3300:  MULLW  19
3302:  MOVF   FF3,W
3304:  CLRF   x17
3306:  MOVWF  x16
3308:  MOVLW  0B
330A:  ADDWF  x16,W
330C:  MOVWF  01
330E:  MOVLW  00
3310:  ADDWFC x17,W
3312:  MOVWF  03
3314:  MOVF   01,W
3316:  ADDLW  D4
3318:  MOVWF  FE9
331A:  MOVLW  00
331C:  ADDWFC 03,W
331E:  MOVWF  FEA
3320:  MOVFF  FEC,117
3324:  MOVF   FED,F
3326:  MOVFF  FEF,116
332A:  MOVLW  E2
332C:  MOVWF  FF6
332E:  MOVLW  12
3330:  MOVWF  FF7
3332:  MOVLW  1F
3334:  MOVWF  x19
3336:  MOVLB  0
3338:  CALL   1982
333C:  MOVLW  10
333E:  MOVWF  FE9
3340:  MOVFF  117,119
3344:  MOVFF  116,118
3348:  CALL   27A2
334C:  MOVLW  0D
334E:  BTFSS  F9E.4
3350:  BRA    334E
3352:  MOVWF  FAD
3354:  MOVLW  0A
3356:  BTFSS  F9E.4
3358:  BRA    3356
335A:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# hvd_disconnect_delay_seconds=%lu\r\n",channel[i].hvd_disconnect_delay_seconds);
335C:  MOVLB  1
335E:  MOVF   x15,W
3360:  MULLW  19
3362:  MOVF   FF3,W
3364:  CLRF   x17
3366:  MOVWF  x16
3368:  MOVLW  0D
336A:  ADDWF  x16,W
336C:  MOVWF  01
336E:  MOVLW  00
3370:  ADDWFC x17,W
3372:  MOVWF  03
3374:  MOVF   01,W
3376:  ADDLW  D4
3378:  MOVWF  FE9
337A:  MOVLW  00
337C:  ADDWFC 03,W
337E:  MOVWF  FEA
3380:  MOVFF  FEC,117
3384:  MOVF   FED,F
3386:  MOVFF  FEF,116
338A:  MOVLW  08
338C:  MOVWF  FF6
338E:  MOVLW  13
3390:  MOVWF  FF7
3392:  MOVLW  1F
3394:  MOVWF  x19
3396:  MOVLB  0
3398:  CALL   1982
339C:  MOVLW  10
339E:  MOVWF  FE9
33A0:  MOVFF  117,119
33A4:  MOVFF  116,118
33A8:  CALL   27A2
33AC:  MOVLW  0D
33AE:  BTFSS  F9E.4
33B0:  BRA    33AE
33B2:  MOVWF  FAD
33B4:  MOVLW  0A
33B6:  BTFSS  F9E.4
33B8:  BRA    33B6
33BA:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  hvd_reconnect_delay_seconds=%lu\r\n",channel[i].hvd_reconnect_delay_seconds);
33BC:  MOVLB  1
33BE:  MOVF   x15,W
33C0:  MULLW  19
33C2:  MOVF   FF3,W
33C4:  CLRF   x17
33C6:  MOVWF  x16
33C8:  MOVLW  0F
33CA:  ADDWF  x16,W
33CC:  MOVWF  01
33CE:  MOVLW  00
33D0:  ADDWFC x17,W
33D2:  MOVWF  03
33D4:  MOVF   01,W
33D6:  ADDLW  D4
33D8:  MOVWF  FE9
33DA:  MOVLW  00
33DC:  ADDWFC 03,W
33DE:  MOVWF  FEA
33E0:  MOVFF  FEC,117
33E4:  MOVF   FED,F
33E6:  MOVFF  FEF,116
33EA:  MOVLW  2E
33EC:  MOVWF  FF6
33EE:  MOVLW  13
33F0:  MOVWF  FF7
33F2:  MOVLW  1F
33F4:  MOVWF  x19
33F6:  MOVLB  0
33F8:  CALL   1982
33FC:  MOVLW  10
33FE:  MOVWF  FE9
3400:  MOVFF  117,119
3404:  MOVFF  116,118
3408:  CALL   27A2
340C:  MOVLW  0D
340E:  BTFSS  F9E.4
3410:  BRA    340E
3412:  MOVWF  FAD
3414:  MOVLW  0A
3416:  BTFSS  F9E.4
3418:  BRA    3416
341A:  MOVWF  FAD
.................... 
.................... 		restart_wdt();
341C:  CLRWDT
.................... 		fprintf(STREAM_FTDI,"# ltd_disconnect_delay_seconds=%lu\r\n",channel[i].ltd_disconnect_delay_seconds);
341E:  MOVLB  1
3420:  MOVF   x15,W
3422:  MULLW  19
3424:  MOVF   FF3,W
3426:  CLRF   x17
3428:  MOVWF  x16
342A:  MOVLW  11
342C:  ADDWF  x16,W
342E:  MOVWF  01
3430:  MOVLW  00
3432:  ADDWFC x17,W
3434:  MOVWF  03
3436:  MOVF   01,W
3438:  ADDLW  D4
343A:  MOVWF  FE9
343C:  MOVLW  00
343E:  ADDWFC 03,W
3440:  MOVWF  FEA
3442:  MOVFF  FEC,117
3446:  MOVF   FED,F
3448:  MOVFF  FEF,116
344C:  MOVLW  54
344E:  MOVWF  FF6
3450:  MOVLW  13
3452:  MOVWF  FF7
3454:  MOVLW  1F
3456:  MOVWF  x19
3458:  MOVLB  0
345A:  CALL   1982
345E:  MOVLW  10
3460:  MOVWF  FE9
3462:  MOVFF  117,119
3466:  MOVFF  116,118
346A:  CALL   27A2
346E:  MOVLW  0D
3470:  BTFSS  F9E.4
3472:  BRA    3470
3474:  MOVWF  FAD
3476:  MOVLW  0A
3478:  BTFSS  F9E.4
347A:  BRA    3478
347C:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  ltd_reconnect_delay_seconds=%lu\r\n",channel[i].ltd_reconnect_delay_seconds);
347E:  MOVLB  1
3480:  MOVF   x15,W
3482:  MULLW  19
3484:  MOVF   FF3,W
3486:  CLRF   x17
3488:  MOVWF  x16
348A:  MOVLW  13
348C:  ADDWF  x16,W
348E:  MOVWF  01
3490:  MOVLW  00
3492:  ADDWFC x17,W
3494:  MOVWF  03
3496:  MOVF   01,W
3498:  ADDLW  D4
349A:  MOVWF  FE9
349C:  MOVLW  00
349E:  ADDWFC 03,W
34A0:  MOVWF  FEA
34A2:  MOVFF  FEC,117
34A6:  MOVF   FED,F
34A8:  MOVFF  FEF,116
34AC:  MOVLW  7A
34AE:  MOVWF  FF6
34B0:  MOVLW  13
34B2:  MOVWF  FF7
34B4:  MOVLW  1F
34B6:  MOVWF  x19
34B8:  MOVLB  0
34BA:  CALL   1982
34BE:  MOVLW  10
34C0:  MOVWF  FE9
34C2:  MOVFF  117,119
34C6:  MOVFF  116,118
34CA:  CALL   27A2
34CE:  MOVLW  0D
34D0:  BTFSS  F9E.4
34D2:  BRA    34D0
34D4:  MOVWF  FAD
34D6:  MOVLW  0A
34D8:  BTFSS  F9E.4
34DA:  BRA    34D8
34DC:  MOVWF  FAD
.................... 
.................... 		fprintf(STREAM_FTDI,"# htd_disconnect_delay_seconds=%lu\r\n",channel[i].htd_disconnect_delay_seconds);
34DE:  MOVLB  1
34E0:  MOVF   x15,W
34E2:  MULLW  19
34E4:  MOVF   FF3,W
34E6:  CLRF   x17
34E8:  MOVWF  x16
34EA:  MOVLW  15
34EC:  ADDWF  x16,W
34EE:  MOVWF  01
34F0:  MOVLW  00
34F2:  ADDWFC x17,W
34F4:  MOVWF  03
34F6:  MOVF   01,W
34F8:  ADDLW  D4
34FA:  MOVWF  FE9
34FC:  MOVLW  00
34FE:  ADDWFC 03,W
3500:  MOVWF  FEA
3502:  MOVFF  FEC,117
3506:  MOVF   FED,F
3508:  MOVFF  FEF,116
350C:  MOVLW  A0
350E:  MOVWF  FF6
3510:  MOVLW  13
3512:  MOVWF  FF7
3514:  MOVLW  1F
3516:  MOVWF  x19
3518:  MOVLB  0
351A:  CALL   1982
351E:  MOVLW  10
3520:  MOVWF  FE9
3522:  MOVFF  117,119
3526:  MOVFF  116,118
352A:  CALL   27A2
352E:  MOVLW  0D
3530:  BTFSS  F9E.4
3532:  BRA    3530
3534:  MOVWF  FAD
3536:  MOVLW  0A
3538:  BTFSS  F9E.4
353A:  BRA    3538
353C:  MOVWF  FAD
.................... 		fprintf(STREAM_FTDI,"#  htd_reconnect_delay_seconds=%lu\r\n",channel[i].htd_reconnect_delay_seconds);
353E:  MOVLB  1
3540:  MOVF   x15,W
3542:  MULLW  19
3544:  MOVF   FF3,W
3546:  CLRF   x17
3548:  MOVWF  x16
354A:  MOVLW  17
354C:  ADDWF  x16,W
354E:  MOVWF  01
3550:  MOVLW  00
3552:  ADDWFC x17,W
3554:  MOVWF  03
3556:  MOVF   01,W
3558:  ADDLW  D4
355A:  MOVWF  FE9
355C:  MOVLW  00
355E:  ADDWFC 03,W
3560:  MOVWF  FEA
3562:  MOVFF  FEC,117
3566:  MOVF   FED,F
3568:  MOVFF  FEF,116
356C:  MOVLW  C6
356E:  MOVWF  FF6
3570:  MOVLW  13
3572:  MOVWF  FF7
3574:  MOVLW  1F
3576:  MOVWF  x19
3578:  MOVLB  0
357A:  CALL   1982
357E:  MOVLW  10
3580:  MOVWF  FE9
3582:  MOVFF  117,119
3586:  MOVFF  116,118
358A:  CALL   27A2
358E:  MOVLW  0D
3590:  BTFSS  F9E.4
3592:  BRA    3590
3594:  MOVWF  FAD
3596:  MOVLW  0A
3598:  BTFSS  F9E.4
359A:  BRA    3598
359C:  MOVWF  FAD
359E:  MOVLB  1
35A0:  INCF   x15,F
35A2:  GOTO   2A0E
.................... 
.................... 	}
35A6:  MOVLB  0
35A8:  GOTO   37F2 (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... 
.................... void contactor_on_a(void) {
.................... 	/* only turn on contactor if it isn't on or needs a refresh */
.................... 	if ( 1 == timers.contactor_a )
35AC:  BTFSS  xCF.6
35AE:  BRA    35B2
.................... 		return;
35B0:  BRA    35C0
.................... 
.................... 	timers.contactor_a_powersave=CONTACTOR_POWER_SAVE_MS;
35B2:  MOVLW  C8
35B4:  MOVWF  xD2
.................... 
.................... 	output_high(BRIDGE_A_A);
35B6:  BCF    F94.3
35B8:  BSF    F8B.3
.................... 	output_low(BRIDGE_A_B);
35BA:  BCF    F94.4
35BC:  BCF    F8B.4
.................... 
.................... 	timers.contactor_a=1;
35BE:  BSF    xCF.6
35C0:  GOTO   3814 (RETURN)
.................... }
.................... 
.................... void contactor_off_a(void) {
.................... 	/* only turn off contactor if it isn't on or needs a refresh */
.................... 	if ( 0 == timers.contactor_a )
35C4:  BTFSC  xCF.6
35C6:  BRA    35CA
.................... 		return;
35C8:  BRA    35D8
.................... 
.................... 	timers.contactor_a_powersave=CONTACTOR_POWER_SAVE_MS;
35CA:  MOVLW  C8
35CC:  MOVWF  xD2
.................... 
.................... 	output_low(BRIDGE_A_A);
35CE:  BCF    F94.3
35D0:  BCF    F8B.3
.................... 	output_high(BRIDGE_A_B);
35D2:  BCF    F94.4
35D4:  BSF    F8B.4
.................... 
.................... 	timers.contactor_a=0;
35D6:  BCF    xCF.6
35D8:  GOTO   381E (RETURN)
.................... }
.................... 
.................... void contactor_on_b(void) {
.................... 	/* only turn on contactor if it isn't on or needs a refresh */
.................... 	if ( 1 == timers.contactor_b )
35DC:  BTFSS  xCF.7
35DE:  BRA    35E2
.................... 		return;
35E0:  BRA    35F0
.................... 
.................... 	timers.contactor_b_powersave=CONTACTOR_POWER_SAVE_MS;
35E2:  MOVLW  C8
35E4:  MOVWF  xD3
.................... 
.................... 	output_high(BRIDGE_B_A);
35E6:  BCF    F94.5
35E8:  BSF    F8B.5
.................... 	output_low(BRIDGE_B_B);
35EA:  BCF    F94.6
35EC:  BCF    F8B.6
.................... 
.................... 	timers.contactor_b=1;
35EE:  BSF    xCF.7
35F0:  GOTO   3840 (RETURN)
.................... }
.................... 
.................... void contactor_off_b(void) {
.................... 	/* only turn off contactor if it isn't on or needs a refresh */
.................... 	if ( 0 == timers.contactor_b )
35F4:  BTFSC  xCF.7
35F6:  BRA    35FA
.................... 		return;
35F8:  BRA    3608
.................... 
.................... 	timers.contactor_b_powersave=CONTACTOR_POWER_SAVE_MS;
35FA:  MOVLW  C8
35FC:  MOVWF  xD3
.................... 
.................... 	output_low(BRIDGE_B_A);
35FE:  BCF    F94.5
3600:  BCF    F8B.5
.................... 	output_high(BRIDGE_B_B);
3602:  BCF    F94.6
3604:  BSF    F8B.6
.................... 
.................... 	timers.contactor_b=0;
3606:  BCF    xCF.7
3608:  GOTO   384A (RETURN)
.................... }
.................... 
.................... void contactor_set(int8 c) {
*
25CE:  MOVLB  1
25D0:  BSF    x16.0
.................... 	int1 state=1;
.................... 
.................... 	/* if nothing is set in channel[c].state, contactor is on */
.................... 	state=1; 
25D2:  BSF    x16.0
.................... 
.................... 	if ( channel[c].state & CH_STATE_MASK_ON ) {
25D4:  MOVF   x15,W
25D6:  MULLW  19
25D8:  MOVF   FF3,W
25DA:  CLRF   x18
25DC:  MOVWF  x17
25DE:  MOVLW  D4
25E0:  ADDWF  x17,W
25E2:  MOVWF  FE9
25E4:  MOVLW  00
25E6:  ADDWFC x18,W
25E8:  MOVWF  FEA
25EA:  MOVF   FEF,W
25EC:  ANDLW  03
25EE:  BZ    25F4
.................... 		/* if override button (switch) is set or we are commanded on, then we will be on */
.................... 		state=1;
25F0:  BSF    x16.0
.................... 	} else if ( channel[c].state & CH_STATE_MASK_OFF ) {
25F2:  BRA    2612
25F4:  MOVF   x15,W
25F6:  MULLW  19
25F8:  MOVF   FF3,W
25FA:  CLRF   x18
25FC:  MOVWF  x17
25FE:  MOVLW  D4
2600:  ADDWF  x17,W
2602:  MOVWF  FE9
2604:  MOVLW  00
2606:  ADDWFC x18,W
2608:  MOVWF  FEA
260A:  MOVF   FEF,W
260C:  ANDLW  7C
260E:  BZ    2612
.................... 		/* if one of the disconnect bits is set, we will be off */
.................... 		state=0;
2610:  BCF    x16.0
.................... 	}
2612:  MOVLB  0
2614:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... void contactor_logic(int8 c) {
.................... 	int16 adc;
.................... 
.................... 	/* TODO: implement override switch */
.................... 
.................... 
.................... 	/* command on. 65535 disables */
.................... 	if ( 65535 != channel[c].command_on_seconds ) {
*
1A6C:  MOVLB  1
1A6E:  MOVF   x15,W
1A70:  MULLW  19
1A72:  MOVF   FF3,W
1A74:  CLRF   x19
1A76:  MOVWF  x18
1A78:  MOVLW  01
1A7A:  ADDWF  x18,W
1A7C:  MOVWF  01
1A7E:  MOVLW  00
1A80:  ADDWFC x19,W
1A82:  MOVWF  03
1A84:  MOVF   01,W
1A86:  ADDLW  D4
1A88:  MOVWF  FE9
1A8A:  MOVLW  00
1A8C:  ADDWFC 03,W
1A8E:  MOVWF  FEA
1A90:  MOVFF  FEC,03
1A94:  MOVF   FED,F
1A96:  MOVF   FEF,W
1A98:  SUBLW  FF
1A9A:  BNZ   1AA2
1A9C:  INCFSZ 03,W
1A9E:  BRA    1AA2
1AA0:  BRA    1C38
.................... 		if ( channel[c].command_on_seconds > 0 ) {
1AA2:  MOVF   x15,W
1AA4:  MULLW  19
1AA6:  MOVF   FF3,W
1AA8:  CLRF   x19
1AAA:  MOVWF  x18
1AAC:  MOVLW  01
1AAE:  ADDWF  x18,W
1AB0:  MOVWF  01
1AB2:  MOVLW  00
1AB4:  ADDWFC x19,W
1AB6:  MOVWF  03
1AB8:  MOVF   01,W
1ABA:  ADDLW  D4
1ABC:  MOVWF  FE9
1ABE:  MOVLW  00
1AC0:  ADDWFC 03,W
1AC2:  MOVWF  FEA
1AC4:  MOVFF  FEC,119
1AC8:  MOVF   FED,F
1ACA:  MOVFF  FEF,118
1ACE:  MOVF   x18,F
1AD0:  BNZ   1AD6
1AD2:  MOVF   x19,F
1AD4:  BZ    1B04
.................... 			/* waiting to power on */
.................... 			channel[c].command_on_seconds--;
1AD6:  MOVF   x15,W
1AD8:  MULLW  19
1ADA:  MOVF   FF3,W
1ADC:  CLRF   x19
1ADE:  MOVWF  x18
1AE0:  MOVLW  01
1AE2:  ADDWF  x18,W
1AE4:  MOVWF  01
1AE6:  MOVLW  00
1AE8:  ADDWFC x19,W
1AEA:  MOVWF  03
1AEC:  MOVF   01,W
1AEE:  ADDLW  D4
1AF0:  MOVWF  FE9
1AF2:  MOVLW  00
1AF4:  ADDWFC 03,W
1AF6:  MOVWF  FEA
1AF8:  MOVLW  FF
1AFA:  ADDWF  FEF,F
1AFC:  BC    1B02
1AFE:  MOVF   FEE,F
1B00:  DECF   FED,F
.................... 		} else {
1B02:  BRA    1C38
.................... 			/* timer at zero, ready to power on or already powered on */
.................... 			if ( ! bit_test(channel[c].state,CH_STATE_BIT_CMD_ON) ) {
1B04:  MOVF   x15,W
1B06:  MULLW  19
1B08:  MOVF   FF3,W
1B0A:  CLRF   x19
1B0C:  MOVWF  x18
1B0E:  MOVLW  D4
1B10:  ADDWF  x18,W
1B12:  MOVWF  FE9
1B14:  MOVLW  00
1B16:  ADDWFC x19,W
1B18:  MOVWF  FEA
1B1A:  MOVFF  FEF,11A
1B1E:  BTFSC  x1A.1
1B20:  BRA    1B96
.................... 				/* not currently set, so we set it and start the countdown */
.................... 				bit_set(channel[c].state,CH_STATE_BIT_CMD_ON);
1B22:  MOVF   x15,W
1B24:  MULLW  19
1B26:  MOVF   FF3,W
1B28:  CLRF   x19
1B2A:  MOVWF  x18
1B2C:  MOVLW  D4
1B2E:  ADDWF  x18,W
1B30:  MOVWF  01
1B32:  MOVLW  00
1B34:  ADDWFC x19,W
1B36:  MOVFF  01,FE9
1B3A:  MOVWF  FEA
1B3C:  BSF    FEF.1
.................... 				channel[c].command_on_hold_seconds=config.ch[c].command_on_hold_time;
1B3E:  MOVF   x15,W
1B40:  MULLW  19
1B42:  MOVF   FF3,W
1B44:  CLRF   x19
1B46:  MOVWF  x18
1B48:  MOVLW  03
1B4A:  ADDWF  x18,W
1B4C:  MOVWF  01
1B4E:  MOVLW  00
1B50:  ADDWFC x19,W
1B52:  MOVWF  03
1B54:  MOVF   01,W
1B56:  ADDLW  D4
1B58:  MOVWF  01
1B5A:  MOVLW  00
1B5C:  ADDWFC 03,F
1B5E:  MOVFF  03,119
1B62:  MOVF   x15,W
1B64:  MULLW  24
1B66:  MOVF   FF3,W
1B68:  CLRF   x1B
1B6A:  MOVWF  x1A
1B6C:  MOVLW  1B
1B6E:  ADDWF  x1A,W
1B70:  MOVWF  FE9
1B72:  MOVLW  00
1B74:  ADDWFC x1B,W
1B76:  MOVWF  FEA
1B78:  MOVFF  FEC,03
1B7C:  MOVF   FED,F
1B7E:  MOVFF  FEF,11C
1B82:  MOVFF  119,FEA
1B86:  MOVFF  01,FE9
1B8A:  MOVFF  03,FEC
1B8E:  MOVF   FED,F
1B90:  MOVFF  11C,FEF
.................... 			} else {
1B94:  BRA    1C38
.................... 				/* set, so we clear it once countdown has elapsed */
.................... 				if ( 0==channel[c].command_on_hold_seconds ) {
1B96:  MOVF   x15,W
1B98:  MULLW  19
1B9A:  MOVF   FF3,W
1B9C:  CLRF   x19
1B9E:  MOVWF  x18
1BA0:  MOVLW  03
1BA2:  ADDWF  x18,W
1BA4:  MOVWF  01
1BA6:  MOVLW  00
1BA8:  ADDWFC x19,W
1BAA:  MOVWF  03
1BAC:  MOVF   01,W
1BAE:  ADDLW  D4
1BB0:  MOVWF  FE9
1BB2:  MOVLW  00
1BB4:  ADDWFC 03,W
1BB6:  MOVWF  FEA
1BB8:  MOVFF  FEC,03
1BBC:  MOVF   FED,F
1BBE:  MOVF   FEF,W
1BC0:  BNZ   1C0C
1BC2:  MOVF   03,F
1BC4:  BNZ   1C0C
.................... 					/* countdown elapsed, clear the flag and reset the timer */
.................... 					bit_clear(channel[c].state,CH_STATE_BIT_CMD_ON);
1BC6:  MOVF   x15,W
1BC8:  MULLW  19
1BCA:  MOVF   FF3,W
1BCC:  CLRF   x19
1BCE:  MOVWF  x18
1BD0:  MOVLW  D4
1BD2:  ADDWF  x18,W
1BD4:  MOVWF  01
1BD6:  MOVLW  00
1BD8:  ADDWFC x19,W
1BDA:  MOVFF  01,FE9
1BDE:  MOVWF  FEA
1BE0:  BCF    FEF.1
.................... 					channel[c].command_on_seconds=65535;
1BE2:  MOVF   x15,W
1BE4:  MULLW  19
1BE6:  MOVF   FF3,W
1BE8:  CLRF   x19
1BEA:  MOVWF  x18
1BEC:  MOVLW  01
1BEE:  ADDWF  x18,W
1BF0:  MOVWF  01
1BF2:  MOVLW  00
1BF4:  ADDWFC x19,W
1BF6:  MOVWF  03
1BF8:  MOVF   01,W
1BFA:  ADDLW  D4
1BFC:  MOVWF  FE9
1BFE:  MOVLW  00
1C00:  ADDWFC 03,W
1C02:  MOVWF  FEA
1C04:  SETF   FEC
1C06:  MOVF   FED,F
1C08:  SETF   FEF
.................... 				} else {
1C0A:  BRA    1C38
.................... 					channel[c].command_on_hold_seconds--;
1C0C:  MOVF   x15,W
1C0E:  MULLW  19
1C10:  MOVF   FF3,W
1C12:  CLRF   x19
1C14:  MOVWF  x18
1C16:  MOVLW  03
1C18:  ADDWF  x18,W
1C1A:  MOVWF  01
1C1C:  MOVLW  00
1C1E:  ADDWFC x19,W
1C20:  MOVWF  03
1C22:  MOVF   01,W
1C24:  ADDLW  D4
1C26:  MOVWF  FE9
1C28:  MOVLW  00
1C2A:  ADDWFC 03,W
1C2C:  MOVWF  FEA
1C2E:  MOVLW  FF
1C30:  ADDWF  FEF,F
1C32:  BC    1C38
1C34:  MOVF   FEE,F
1C36:  DECF   FED,F
.................... 				}
.................... 			}		
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	/* command off. 65535 disables */
.................... 	if ( 65535 != channel[c].command_off_seconds ) {
1C38:  MOVF   x15,W
1C3A:  MULLW  19
1C3C:  MOVF   FF3,W
1C3E:  CLRF   x19
1C40:  MOVWF  x18
1C42:  MOVLW  05
1C44:  ADDWF  x18,W
1C46:  MOVWF  01
1C48:  MOVLW  00
1C4A:  ADDWFC x19,W
1C4C:  MOVWF  03
1C4E:  MOVF   01,W
1C50:  ADDLW  D4
1C52:  MOVWF  FE9
1C54:  MOVLW  00
1C56:  ADDWFC 03,W
1C58:  MOVWF  FEA
1C5A:  MOVFF  FEC,03
1C5E:  MOVF   FED,F
1C60:  MOVF   FEF,W
1C62:  SUBLW  FF
1C64:  BNZ   1C6C
1C66:  INCFSZ 03,W
1C68:  BRA    1C6C
1C6A:  BRA    1E12
.................... 		if ( channel[c].command_off_seconds > 0 ) {
1C6C:  MOVF   x15,W
1C6E:  MULLW  19
1C70:  MOVF   FF3,W
1C72:  CLRF   x19
1C74:  MOVWF  x18
1C76:  MOVLW  05
1C78:  ADDWF  x18,W
1C7A:  MOVWF  01
1C7C:  MOVLW  00
1C7E:  ADDWFC x19,W
1C80:  MOVWF  03
1C82:  MOVF   01,W
1C84:  ADDLW  D4
1C86:  MOVWF  FE9
1C88:  MOVLW  00
1C8A:  ADDWFC 03,W
1C8C:  MOVWF  FEA
1C8E:  MOVFF  FEC,119
1C92:  MOVF   FED,F
1C94:  MOVFF  FEF,118
1C98:  MOVF   x18,F
1C9A:  BNZ   1CA0
1C9C:  MOVF   x19,F
1C9E:  BZ    1CCE
.................... 			/* waiting to power off */
.................... 			channel[c].command_off_seconds--;
1CA0:  MOVF   x15,W
1CA2:  MULLW  19
1CA4:  MOVF   FF3,W
1CA6:  CLRF   x19
1CA8:  MOVWF  x18
1CAA:  MOVLW  05
1CAC:  ADDWF  x18,W
1CAE:  MOVWF  01
1CB0:  MOVLW  00
1CB2:  ADDWFC x19,W
1CB4:  MOVWF  03
1CB6:  MOVF   01,W
1CB8:  ADDLW  D4
1CBA:  MOVWF  FE9
1CBC:  MOVLW  00
1CBE:  ADDWFC 03,W
1CC0:  MOVWF  FEA
1CC2:  MOVLW  FF
1CC4:  ADDWF  FEF,F
1CC6:  BC    1CCC
1CC8:  MOVF   FEE,F
1CCA:  DECF   FED,F
.................... 		} else {
1CCC:  BRA    1E12
.................... 			/* timer at zero, ready to power off or already powered off */
.................... 			if ( ! bit_test(channel[c].state,CH_STATE_BIT_CMD_OFF) ) {
1CCE:  MOVF   x15,W
1CD0:  MULLW  19
1CD2:  MOVF   FF3,W
1CD4:  CLRF   x19
1CD6:  MOVWF  x18
1CD8:  MOVLW  D4
1CDA:  ADDWF  x18,W
1CDC:  MOVWF  FE9
1CDE:  MOVLW  00
1CE0:  ADDWFC x19,W
1CE2:  MOVWF  FEA
1CE4:  MOVFF  FEF,11A
1CE8:  BTFSC  x1A.2
1CEA:  BRA    1D70
.................... 				/* not currently set, so we set it and start the countdown */
.................... 				bit_set(channel[c].state,CH_STATE_BIT_CMD_OFF);
1CEC:  MOVF   x15,W
1CEE:  MULLW  19
1CF0:  MOVF   FF3,W
1CF2:  CLRF   x19
1CF4:  MOVWF  x18
1CF6:  MOVLW  D4
1CF8:  ADDWF  x18,W
1CFA:  MOVWF  01
1CFC:  MOVLW  00
1CFE:  ADDWFC x19,W
1D00:  MOVFF  01,FE9
1D04:  MOVWF  FEA
1D06:  BSF    FEF.2
.................... 				channel[c].command_off_hold_seconds=config.ch[c].command_off_hold_time;
1D08:  MOVF   x15,W
1D0A:  MULLW  19
1D0C:  MOVF   FF3,W
1D0E:  CLRF   x19
1D10:  MOVWF  x18
1D12:  MOVLW  07
1D14:  ADDWF  x18,W
1D16:  MOVWF  01
1D18:  MOVLW  00
1D1A:  ADDWFC x19,W
1D1C:  MOVWF  03
1D1E:  MOVF   01,W
1D20:  ADDLW  D4
1D22:  MOVWF  01
1D24:  MOVLW  00
1D26:  ADDWFC 03,F
1D28:  MOVFF  01,118
1D2C:  MOVFF  03,119
1D30:  MOVF   x15,W
1D32:  MULLW  24
1D34:  MOVF   FF3,W
1D36:  CLRF   x1B
1D38:  MOVWF  x1A
1D3A:  MOVLW  02
1D3C:  ADDWF  x1A,W
1D3E:  MOVWF  01
1D40:  MOVLW  00
1D42:  ADDWFC x1B,W
1D44:  MOVWF  03
1D46:  MOVF   01,W
1D48:  ADDLW  1B
1D4A:  MOVWF  FE9
1D4C:  MOVLW  00
1D4E:  ADDWFC 03,W
1D50:  MOVWF  FEA
1D52:  MOVFF  FEC,03
1D56:  MOVF   FED,F
1D58:  MOVFF  FEF,11A
1D5C:  MOVFF  119,FEA
1D60:  MOVFF  118,FE9
1D64:  MOVFF  03,FEC
1D68:  MOVF   FED,F
1D6A:  MOVFF  11A,FEF
.................... 			} else {
1D6E:  BRA    1E12
.................... 				/* set, so we clear it once countdown has elapsed */
.................... 				if ( 0==channel[c].command_off_hold_seconds ) {
1D70:  MOVF   x15,W
1D72:  MULLW  19
1D74:  MOVF   FF3,W
1D76:  CLRF   x19
1D78:  MOVWF  x18
1D7A:  MOVLW  07
1D7C:  ADDWF  x18,W
1D7E:  MOVWF  01
1D80:  MOVLW  00
1D82:  ADDWFC x19,W
1D84:  MOVWF  03
1D86:  MOVF   01,W
1D88:  ADDLW  D4
1D8A:  MOVWF  FE9
1D8C:  MOVLW  00
1D8E:  ADDWFC 03,W
1D90:  MOVWF  FEA
1D92:  MOVFF  FEC,03
1D96:  MOVF   FED,F
1D98:  MOVF   FEF,W
1D9A:  BNZ   1DE6
1D9C:  MOVF   03,F
1D9E:  BNZ   1DE6
.................... 					/* countdown elapsed, clear the flag and reset the timer */
.................... 					bit_clear(channel[c].state,CH_STATE_BIT_CMD_OFF);
1DA0:  MOVF   x15,W
1DA2:  MULLW  19
1DA4:  MOVF   FF3,W
1DA6:  CLRF   x19
1DA8:  MOVWF  x18
1DAA:  MOVLW  D4
1DAC:  ADDWF  x18,W
1DAE:  MOVWF  01
1DB0:  MOVLW  00
1DB2:  ADDWFC x19,W
1DB4:  MOVFF  01,FE9
1DB8:  MOVWF  FEA
1DBA:  BCF    FEF.2
.................... 					channel[c].command_off_seconds=65535;
1DBC:  MOVF   x15,W
1DBE:  MULLW  19
1DC0:  MOVF   FF3,W
1DC2:  CLRF   x19
1DC4:  MOVWF  x18
1DC6:  MOVLW  05
1DC8:  ADDWF  x18,W
1DCA:  MOVWF  01
1DCC:  MOVLW  00
1DCE:  ADDWFC x19,W
1DD0:  MOVWF  03
1DD2:  MOVF   01,W
1DD4:  ADDLW  D4
1DD6:  MOVWF  FE9
1DD8:  MOVLW  00
1DDA:  ADDWFC 03,W
1DDC:  MOVWF  FEA
1DDE:  SETF   FEC
1DE0:  MOVF   FED,F
1DE2:  SETF   FEF
.................... 				} else {
1DE4:  BRA    1E12
.................... 					channel[c].command_off_hold_seconds--;
1DE6:  MOVF   x15,W
1DE8:  MULLW  19
1DEA:  MOVF   FF3,W
1DEC:  CLRF   x19
1DEE:  MOVWF  x18
1DF0:  MOVLW  07
1DF2:  ADDWF  x18,W
1DF4:  MOVWF  01
1DF6:  MOVLW  00
1DF8:  ADDWFC x19,W
1DFA:  MOVWF  03
1DFC:  MOVF   01,W
1DFE:  ADDLW  D4
1E00:  MOVWF  FE9
1E02:  MOVLW  00
1E04:  ADDWFC 03,W
1E06:  MOVWF  FEA
1E08:  MOVLW  FF
1E0A:  ADDWF  FEF,F
1E0C:  BC    1E12
1E0E:  MOVF   FEE,F
1E10:  DECF   FED,F
.................... 				}
.................... 			}		
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	/* LVD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].lvd_disconnect_delay ) {
1E12:  MOVF   x15,W
1E14:  MULLW  24
1E16:  MOVF   FF3,W
1E18:  CLRF   x19
1E1A:  MOVWF  x18
1E1C:  MOVLW  06
1E1E:  ADDWF  x18,W
1E20:  MOVWF  01
1E22:  MOVLW  00
1E24:  ADDWFC x19,W
1E26:  MOVWF  03
1E28:  MOVF   01,W
1E2A:  ADDLW  1B
1E2C:  MOVWF  FE9
1E2E:  MOVLW  00
1E30:  ADDWFC 03,W
1E32:  MOVWF  FEA
1E34:  MOVFF  FEC,03
1E38:  MOVF   FED,F
1E3A:  MOVF   FEF,W
1E3C:  SUBLW  FF
1E3E:  BNZ   1E46
1E40:  INCFSZ 03,W
1E42:  BRA    1E46
1E44:  BRA    20A4
1E46:  CLRF   19
1E48:  BTFSC  FF2.7
1E4A:  BSF    19.7
1E4C:  BCF    FF2.7
.................... 		adc=adc_get(0);
1E4E:  CLRF   x3D
1E50:  MOVLB  0
1E52:  CALL   0594
1E56:  BTFSC  19.7
1E58:  BSF    FF2.7
1E5A:  MOVFF  02,117
1E5E:  MOVFF  01,116
.................... 
.................... 		if ( adc > config.ch[c].lvd_reconnect_adc ) {
1E62:  MOVLB  1
1E64:  MOVF   x15,W
1E66:  MULLW  24
1E68:  MOVF   FF3,W
1E6A:  CLRF   x19
1E6C:  MOVWF  x18
1E6E:  MOVLW  08
1E70:  ADDWF  x18,W
1E72:  MOVWF  01
1E74:  MOVLW  00
1E76:  ADDWFC x19,W
1E78:  MOVWF  03
1E7A:  MOVF   01,W
1E7C:  ADDLW  1B
1E7E:  MOVWF  FE9
1E80:  MOVLW  00
1E82:  ADDWFC 03,W
1E84:  MOVWF  FEA
1E86:  MOVFF  FEC,03
1E8A:  MOVF   FED,F
1E8C:  MOVFF  FEF,01
1E90:  MOVF   03,W
1E92:  SUBWF  x17,W
1E94:  BNC   1F1E
1E96:  BNZ   1E9E
1E98:  MOVF   x16,W
1E9A:  SUBWF  01,W
1E9C:  BC    1F1E
.................... 			if ( channel[c].lvd_reconnect_delay_seconds > 0 ) {
1E9E:  MOVF   x15,W
1EA0:  MULLW  19
1EA2:  MOVF   FF3,W
1EA4:  CLRF   x19
1EA6:  MOVWF  x18
1EA8:  MOVLW  0B
1EAA:  ADDWF  x18,W
1EAC:  MOVWF  01
1EAE:  MOVLW  00
1EB0:  ADDWFC x19,W
1EB2:  MOVWF  03
1EB4:  MOVF   01,W
1EB6:  ADDLW  D4
1EB8:  MOVWF  FE9
1EBA:  MOVLW  00
1EBC:  ADDWFC 03,W
1EBE:  MOVWF  FEA
1EC0:  MOVFF  FEC,119
1EC4:  MOVF   FED,F
1EC6:  MOVFF  FEF,118
1ECA:  MOVF   x18,F
1ECC:  BNZ   1ED2
1ECE:  MOVF   x19,F
1ED0:  BZ    1F00
.................... 				channel[c].lvd_reconnect_delay_seconds--;
1ED2:  MOVF   x15,W
1ED4:  MULLW  19
1ED6:  MOVF   FF3,W
1ED8:  CLRF   x19
1EDA:  MOVWF  x18
1EDC:  MOVLW  0B
1EDE:  ADDWF  x18,W
1EE0:  MOVWF  01
1EE2:  MOVLW  00
1EE4:  ADDWFC x19,W
1EE6:  MOVWF  03
1EE8:  MOVF   01,W
1EEA:  ADDLW  D4
1EEC:  MOVWF  FE9
1EEE:  MOVLW  00
1EF0:  ADDWFC 03,W
1EF2:  MOVWF  FEA
1EF4:  MOVLW  FF
1EF6:  ADDWF  FEF,F
1EF8:  BC    1EFE
1EFA:  MOVF   FEE,F
1EFC:  DECF   FED,F
.................... 			} else {
1EFE:  BRA    1F1C
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_LVD);
1F00:  MOVF   x15,W
1F02:  MULLW  19
1F04:  MOVF   FF3,W
1F06:  CLRF   x19
1F08:  MOVWF  x18
1F0A:  MOVLW  D4
1F0C:  ADDWF  x18,W
1F0E:  MOVWF  01
1F10:  MOVLW  00
1F12:  ADDWFC x19,W
1F14:  MOVFF  01,FE9
1F18:  MOVWF  FEA
1F1A:  BCF    FEF.3
.................... 			}
.................... 		} else {
1F1C:  BRA    1F84
.................... 			channel[c].lvd_reconnect_delay_seconds=config.ch[c].lvd_reconnect_delay;
1F1E:  MOVF   x15,W
1F20:  MULLW  19
1F22:  MOVF   FF3,W
1F24:  CLRF   x19
1F26:  MOVWF  x18
1F28:  MOVLW  0B
1F2A:  ADDWF  x18,W
1F2C:  MOVWF  01
1F2E:  MOVLW  00
1F30:  ADDWFC x19,W
1F32:  MOVWF  03
1F34:  MOVF   01,W
1F36:  ADDLW  D4
1F38:  MOVWF  01
1F3A:  MOVLW  00
1F3C:  ADDWFC 03,F
1F3E:  MOVFF  01,118
1F42:  MOVFF  03,119
1F46:  MOVF   x15,W
1F48:  MULLW  24
1F4A:  MOVF   FF3,W
1F4C:  CLRF   x1B
1F4E:  MOVWF  x1A
1F50:  MOVLW  0A
1F52:  ADDWF  x1A,W
1F54:  MOVWF  01
1F56:  MOVLW  00
1F58:  ADDWFC x1B,W
1F5A:  MOVWF  03
1F5C:  MOVF   01,W
1F5E:  ADDLW  1B
1F60:  MOVWF  FE9
1F62:  MOVLW  00
1F64:  ADDWFC 03,W
1F66:  MOVWF  FEA
1F68:  MOVFF  FEC,03
1F6C:  MOVF   FED,F
1F6E:  MOVFF  FEF,11A
1F72:  MOVFF  119,FEA
1F76:  MOVFF  118,FE9
1F7A:  MOVFF  03,FEC
1F7E:  MOVF   FED,F
1F80:  MOVFF  11A,FEF
.................... 		}
.................... 
.................... 		if ( adc < config.ch[c].lvd_disconnect_adc ) {
1F84:  MOVF   x15,W
1F86:  MULLW  24
1F88:  MOVF   FF3,W
1F8A:  CLRF   x19
1F8C:  MOVWF  x18
1F8E:  MOVLW  04
1F90:  ADDWF  x18,W
1F92:  MOVWF  01
1F94:  MOVLW  00
1F96:  ADDWFC x19,W
1F98:  MOVWF  03
1F9A:  MOVF   01,W
1F9C:  ADDLW  1B
1F9E:  MOVWF  FE9
1FA0:  MOVLW  00
1FA2:  ADDWFC 03,W
1FA4:  MOVWF  FEA
1FA6:  MOVFF  FEC,03
1FAA:  MOVF   FED,F
1FAC:  MOVFF  FEF,01
1FB0:  MOVF   x17,W
1FB2:  SUBWF  03,W
1FB4:  BNC   203E
1FB6:  BNZ   1FBE
1FB8:  MOVF   01,W
1FBA:  SUBWF  x16,W
1FBC:  BC    203E
.................... 			if ( channel[c].lvd_disconnect_delay_seconds > 0 ) {
1FBE:  MOVF   x15,W
1FC0:  MULLW  19
1FC2:  MOVF   FF3,W
1FC4:  CLRF   x19
1FC6:  MOVWF  x18
1FC8:  MOVLW  09
1FCA:  ADDWF  x18,W
1FCC:  MOVWF  01
1FCE:  MOVLW  00
1FD0:  ADDWFC x19,W
1FD2:  MOVWF  03
1FD4:  MOVF   01,W
1FD6:  ADDLW  D4
1FD8:  MOVWF  FE9
1FDA:  MOVLW  00
1FDC:  ADDWFC 03,W
1FDE:  MOVWF  FEA
1FE0:  MOVFF  FEC,119
1FE4:  MOVF   FED,F
1FE6:  MOVFF  FEF,118
1FEA:  MOVF   x18,F
1FEC:  BNZ   1FF2
1FEE:  MOVF   x19,F
1FF0:  BZ    2020
.................... 				channel[c].lvd_disconnect_delay_seconds--;
1FF2:  MOVF   x15,W
1FF4:  MULLW  19
1FF6:  MOVF   FF3,W
1FF8:  CLRF   x19
1FFA:  MOVWF  x18
1FFC:  MOVLW  09
1FFE:  ADDWF  x18,W
2000:  MOVWF  01
2002:  MOVLW  00
2004:  ADDWFC x19,W
2006:  MOVWF  03
2008:  MOVF   01,W
200A:  ADDLW  D4
200C:  MOVWF  FE9
200E:  MOVLW  00
2010:  ADDWFC 03,W
2012:  MOVWF  FEA
2014:  MOVLW  FF
2016:  ADDWF  FEF,F
2018:  BC    201E
201A:  MOVF   FEE,F
201C:  DECF   FED,F
.................... 			} else {
201E:  BRA    203C
.................... 				bit_set(channel[c].state,CH_STATE_BIT_LVD);
2020:  MOVF   x15,W
2022:  MULLW  19
2024:  MOVF   FF3,W
2026:  CLRF   x19
2028:  MOVWF  x18
202A:  MOVLW  D4
202C:  ADDWF  x18,W
202E:  MOVWF  01
2030:  MOVLW  00
2032:  ADDWFC x19,W
2034:  MOVFF  01,FE9
2038:  MOVWF  FEA
203A:  BSF    FEF.3
.................... 			}
.................... 		} else {
203C:  BRA    20A4
.................... 			channel[c].lvd_disconnect_delay_seconds=config.ch[c].lvd_disconnect_delay;
203E:  MOVF   x15,W
2040:  MULLW  19
2042:  MOVF   FF3,W
2044:  CLRF   x19
2046:  MOVWF  x18
2048:  MOVLW  09
204A:  ADDWF  x18,W
204C:  MOVWF  01
204E:  MOVLW  00
2050:  ADDWFC x19,W
2052:  MOVWF  03
2054:  MOVF   01,W
2056:  ADDLW  D4
2058:  MOVWF  01
205A:  MOVLW  00
205C:  ADDWFC 03,F
205E:  MOVFF  01,118
2062:  MOVFF  03,119
2066:  MOVF   x15,W
2068:  MULLW  24
206A:  MOVF   FF3,W
206C:  CLRF   x1B
206E:  MOVWF  x1A
2070:  MOVLW  06
2072:  ADDWF  x1A,W
2074:  MOVWF  01
2076:  MOVLW  00
2078:  ADDWFC x1B,W
207A:  MOVWF  03
207C:  MOVF   01,W
207E:  ADDLW  1B
2080:  MOVWF  FE9
2082:  MOVLW  00
2084:  ADDWFC 03,W
2086:  MOVWF  FEA
2088:  MOVFF  FEC,03
208C:  MOVF   FED,F
208E:  MOVFF  FEF,11A
2092:  MOVFF  119,FEA
2096:  MOVFF  118,FE9
209A:  MOVFF  03,FEC
209E:  MOVF   FED,F
20A0:  MOVFF  11A,FEF
.................... 		}
.................... 	}
.................... 
.................... 	/* HVD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].hvd_disconnect_delay ) {
20A4:  MOVF   x15,W
20A6:  MULLW  24
20A8:  MOVF   FF3,W
20AA:  CLRF   x19
20AC:  MOVWF  x18
20AE:  MOVLW  0E
20B0:  ADDWF  x18,W
20B2:  MOVWF  01
20B4:  MOVLW  00
20B6:  ADDWFC x19,W
20B8:  MOVWF  03
20BA:  MOVF   01,W
20BC:  ADDLW  1B
20BE:  MOVWF  FE9
20C0:  MOVLW  00
20C2:  ADDWFC 03,W
20C4:  MOVWF  FEA
20C6:  MOVFF  FEC,03
20CA:  MOVF   FED,F
20CC:  MOVF   FEF,W
20CE:  SUBLW  FF
20D0:  BNZ   20D8
20D2:  INCFSZ 03,W
20D4:  BRA    20D8
20D6:  BRA    2336
20D8:  CLRF   19
20DA:  BTFSC  FF2.7
20DC:  BSF    19.7
20DE:  BCF    FF2.7
.................... 		adc=adc_get(0);
20E0:  CLRF   x3D
20E2:  MOVLB  0
20E4:  CALL   0594
20E8:  BTFSC  19.7
20EA:  BSF    FF2.7
20EC:  MOVFF  02,117
20F0:  MOVFF  01,116
.................... 
.................... 		if ( adc < config.ch[c].hvd_reconnect_adc ) {
20F4:  MOVLB  1
20F6:  MOVF   x15,W
20F8:  MULLW  24
20FA:  MOVF   FF3,W
20FC:  CLRF   x19
20FE:  MOVWF  x18
2100:  MOVLW  10
2102:  ADDWF  x18,W
2104:  MOVWF  01
2106:  MOVLW  00
2108:  ADDWFC x19,W
210A:  MOVWF  03
210C:  MOVF   01,W
210E:  ADDLW  1B
2110:  MOVWF  FE9
2112:  MOVLW  00
2114:  ADDWFC 03,W
2116:  MOVWF  FEA
2118:  MOVFF  FEC,03
211C:  MOVF   FED,F
211E:  MOVFF  FEF,01
2122:  MOVF   x17,W
2124:  SUBWF  03,W
2126:  BNC   21B0
2128:  BNZ   2130
212A:  MOVF   01,W
212C:  SUBWF  x16,W
212E:  BC    21B0
.................... 			if ( channel[c].hvd_reconnect_delay_seconds > 0 ) {
2130:  MOVF   x15,W
2132:  MULLW  19
2134:  MOVF   FF3,W
2136:  CLRF   x19
2138:  MOVWF  x18
213A:  MOVLW  0F
213C:  ADDWF  x18,W
213E:  MOVWF  01
2140:  MOVLW  00
2142:  ADDWFC x19,W
2144:  MOVWF  03
2146:  MOVF   01,W
2148:  ADDLW  D4
214A:  MOVWF  FE9
214C:  MOVLW  00
214E:  ADDWFC 03,W
2150:  MOVWF  FEA
2152:  MOVFF  FEC,119
2156:  MOVF   FED,F
2158:  MOVFF  FEF,118
215C:  MOVF   x18,F
215E:  BNZ   2164
2160:  MOVF   x19,F
2162:  BZ    2192
.................... 				channel[c].hvd_reconnect_delay_seconds--;
2164:  MOVF   x15,W
2166:  MULLW  19
2168:  MOVF   FF3,W
216A:  CLRF   x19
216C:  MOVWF  x18
216E:  MOVLW  0F
2170:  ADDWF  x18,W
2172:  MOVWF  01
2174:  MOVLW  00
2176:  ADDWFC x19,W
2178:  MOVWF  03
217A:  MOVF   01,W
217C:  ADDLW  D4
217E:  MOVWF  FE9
2180:  MOVLW  00
2182:  ADDWFC 03,W
2184:  MOVWF  FEA
2186:  MOVLW  FF
2188:  ADDWF  FEF,F
218A:  BC    2190
218C:  MOVF   FEE,F
218E:  DECF   FED,F
.................... 			} else {
2190:  BRA    21AE
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_HVD);
2192:  MOVF   x15,W
2194:  MULLW  19
2196:  MOVF   FF3,W
2198:  CLRF   x19
219A:  MOVWF  x18
219C:  MOVLW  D4
219E:  ADDWF  x18,W
21A0:  MOVWF  01
21A2:  MOVLW  00
21A4:  ADDWFC x19,W
21A6:  MOVFF  01,FE9
21AA:  MOVWF  FEA
21AC:  BCF    FEF.4
.................... 			}
.................... 		} else {
21AE:  BRA    2216
.................... 			channel[c].hvd_reconnect_delay_seconds=config.ch[c].hvd_reconnect_delay;
21B0:  MOVF   x15,W
21B2:  MULLW  19
21B4:  MOVF   FF3,W
21B6:  CLRF   x19
21B8:  MOVWF  x18
21BA:  MOVLW  0F
21BC:  ADDWF  x18,W
21BE:  MOVWF  01
21C0:  MOVLW  00
21C2:  ADDWFC x19,W
21C4:  MOVWF  03
21C6:  MOVF   01,W
21C8:  ADDLW  D4
21CA:  MOVWF  01
21CC:  MOVLW  00
21CE:  ADDWFC 03,F
21D0:  MOVFF  01,118
21D4:  MOVFF  03,119
21D8:  MOVF   x15,W
21DA:  MULLW  24
21DC:  MOVF   FF3,W
21DE:  CLRF   x1B
21E0:  MOVWF  x1A
21E2:  MOVLW  12
21E4:  ADDWF  x1A,W
21E6:  MOVWF  01
21E8:  MOVLW  00
21EA:  ADDWFC x1B,W
21EC:  MOVWF  03
21EE:  MOVF   01,W
21F0:  ADDLW  1B
21F2:  MOVWF  FE9
21F4:  MOVLW  00
21F6:  ADDWFC 03,W
21F8:  MOVWF  FEA
21FA:  MOVFF  FEC,03
21FE:  MOVF   FED,F
2200:  MOVFF  FEF,11A
2204:  MOVFF  119,FEA
2208:  MOVFF  118,FE9
220C:  MOVFF  03,FEC
2210:  MOVF   FED,F
2212:  MOVFF  11A,FEF
.................... 		}
.................... 
.................... 		if ( adc > config.ch[c].hvd_disconnect_adc ) {
2216:  MOVF   x15,W
2218:  MULLW  24
221A:  MOVF   FF3,W
221C:  CLRF   x19
221E:  MOVWF  x18
2220:  MOVLW  0C
2222:  ADDWF  x18,W
2224:  MOVWF  01
2226:  MOVLW  00
2228:  ADDWFC x19,W
222A:  MOVWF  03
222C:  MOVF   01,W
222E:  ADDLW  1B
2230:  MOVWF  FE9
2232:  MOVLW  00
2234:  ADDWFC 03,W
2236:  MOVWF  FEA
2238:  MOVFF  FEC,03
223C:  MOVF   FED,F
223E:  MOVFF  FEF,01
2242:  MOVF   03,W
2244:  SUBWF  x17,W
2246:  BNC   22D0
2248:  BNZ   2250
224A:  MOVF   x16,W
224C:  SUBWF  01,W
224E:  BC    22D0
.................... 			if ( channel[c].hvd_disconnect_delay_seconds > 0 ) {
2250:  MOVF   x15,W
2252:  MULLW  19
2254:  MOVF   FF3,W
2256:  CLRF   x19
2258:  MOVWF  x18
225A:  MOVLW  0D
225C:  ADDWF  x18,W
225E:  MOVWF  01
2260:  MOVLW  00
2262:  ADDWFC x19,W
2264:  MOVWF  03
2266:  MOVF   01,W
2268:  ADDLW  D4
226A:  MOVWF  FE9
226C:  MOVLW  00
226E:  ADDWFC 03,W
2270:  MOVWF  FEA
2272:  MOVFF  FEC,119
2276:  MOVF   FED,F
2278:  MOVFF  FEF,118
227C:  MOVF   x18,F
227E:  BNZ   2284
2280:  MOVF   x19,F
2282:  BZ    22B2
.................... 				channel[c].hvd_disconnect_delay_seconds--;
2284:  MOVF   x15,W
2286:  MULLW  19
2288:  MOVF   FF3,W
228A:  CLRF   x19
228C:  MOVWF  x18
228E:  MOVLW  0D
2290:  ADDWF  x18,W
2292:  MOVWF  01
2294:  MOVLW  00
2296:  ADDWFC x19,W
2298:  MOVWF  03
229A:  MOVF   01,W
229C:  ADDLW  D4
229E:  MOVWF  FE9
22A0:  MOVLW  00
22A2:  ADDWFC 03,W
22A4:  MOVWF  FEA
22A6:  MOVLW  FF
22A8:  ADDWF  FEF,F
22AA:  BC    22B0
22AC:  MOVF   FEE,F
22AE:  DECF   FED,F
.................... 			} else {
22B0:  BRA    22CE
.................... 				bit_set(channel[c].state,CH_STATE_BIT_HVD);
22B2:  MOVF   x15,W
22B4:  MULLW  19
22B6:  MOVF   FF3,W
22B8:  CLRF   x19
22BA:  MOVWF  x18
22BC:  MOVLW  D4
22BE:  ADDWF  x18,W
22C0:  MOVWF  01
22C2:  MOVLW  00
22C4:  ADDWFC x19,W
22C6:  MOVFF  01,FE9
22CA:  MOVWF  FEA
22CC:  BSF    FEF.4
.................... 			}
.................... 		} else {
22CE:  BRA    2336
.................... 			channel[c].hvd_disconnect_delay_seconds=config.ch[c].hvd_disconnect_delay;
22D0:  MOVF   x15,W
22D2:  MULLW  19
22D4:  MOVF   FF3,W
22D6:  CLRF   x19
22D8:  MOVWF  x18
22DA:  MOVLW  0D
22DC:  ADDWF  x18,W
22DE:  MOVWF  01
22E0:  MOVLW  00
22E2:  ADDWFC x19,W
22E4:  MOVWF  03
22E6:  MOVF   01,W
22E8:  ADDLW  D4
22EA:  MOVWF  01
22EC:  MOVLW  00
22EE:  ADDWFC 03,F
22F0:  MOVFF  01,118
22F4:  MOVFF  03,119
22F8:  MOVF   x15,W
22FA:  MULLW  24
22FC:  MOVF   FF3,W
22FE:  CLRF   x1B
2300:  MOVWF  x1A
2302:  MOVLW  0E
2304:  ADDWF  x1A,W
2306:  MOVWF  01
2308:  MOVLW  00
230A:  ADDWFC x1B,W
230C:  MOVWF  03
230E:  MOVF   01,W
2310:  ADDLW  1B
2312:  MOVWF  FE9
2314:  MOVLW  00
2316:  ADDWFC 03,W
2318:  MOVWF  FEA
231A:  MOVFF  FEC,03
231E:  MOVF   FED,F
2320:  MOVFF  FEF,11A
2324:  MOVFF  119,FEA
2328:  MOVFF  118,FE9
232C:  MOVFF  03,FEC
2330:  MOVF   FED,F
2332:  MOVFF  11A,FEF
.................... 		}
.................... 	}
.................... 
.................... 	/* LTD. 65535 disables */
.................... 	if ( 65535 != config.ch[c].ltd_disconnect_delay ) {
2336:  MOVF   x15,W
2338:  MULLW  24
233A:  MOVF   FF3,W
233C:  CLRF   x19
233E:  MOVWF  x18
2340:  MOVLW  16
2342:  ADDWF  x18,W
2344:  MOVWF  01
2346:  MOVLW  00
2348:  ADDWFC x19,W
234A:  MOVWF  03
234C:  MOVF   01,W
234E:  ADDLW  1B
2350:  MOVWF  FE9
2352:  MOVLW  00
2354:  ADDWFC 03,W
2356:  MOVWF  FEA
2358:  MOVFF  FEC,03
235C:  MOVF   FED,F
235E:  MOVF   FEF,W
2360:  SUBLW  FF
2362:  BNZ   236A
2364:  INCFSZ 03,W
2366:  BRA    236A
2368:  BRA    25CA
236A:  CLRF   19
236C:  BTFSC  FF2.7
236E:  BSF    19.7
2370:  BCF    FF2.7
.................... 		adc=adc_get(1);
2372:  MOVLW  01
2374:  MOVWF  x3D
2376:  MOVLB  0
2378:  CALL   0594
237C:  BTFSC  19.7
237E:  BSF    FF2.7
2380:  MOVFF  02,117
2384:  MOVFF  01,116
.................... 
.................... 		if ( adc < config.ch[c].ltd_reconnect_adc ) {
2388:  MOVLB  1
238A:  MOVF   x15,W
238C:  MULLW  24
238E:  MOVF   FF3,W
2390:  CLRF   x19
2392:  MOVWF  x18
2394:  MOVLW  18
2396:  ADDWF  x18,W
2398:  MOVWF  01
239A:  MOVLW  00
239C:  ADDWFC x19,W
239E:  MOVWF  03
23A0:  MOVF   01,W
23A2:  ADDLW  1B
23A4:  MOVWF  FE9
23A6:  MOVLW  00
23A8:  ADDWFC 03,W
23AA:  MOVWF  FEA
23AC:  MOVFF  FEC,03
23B0:  MOVF   FED,F
23B2:  MOVFF  FEF,01
23B6:  MOVF   x17,W
23B8:  SUBWF  03,W
23BA:  BNC   2444
23BC:  BNZ   23C4
23BE:  MOVF   01,W
23C0:  SUBWF  x16,W
23C2:  BC    2444
.................... 			if ( channel[c].ltd_reconnect_delay_seconds > 0 ) {
23C4:  MOVF   x15,W
23C6:  MULLW  19
23C8:  MOVF   FF3,W
23CA:  CLRF   x19
23CC:  MOVWF  x18
23CE:  MOVLW  13
23D0:  ADDWF  x18,W
23D2:  MOVWF  01
23D4:  MOVLW  00
23D6:  ADDWFC x19,W
23D8:  MOVWF  03
23DA:  MOVF   01,W
23DC:  ADDLW  D4
23DE:  MOVWF  FE9
23E0:  MOVLW  00
23E2:  ADDWFC 03,W
23E4:  MOVWF  FEA
23E6:  MOVFF  FEC,119
23EA:  MOVF   FED,F
23EC:  MOVFF  FEF,118
23F0:  MOVF   x18,F
23F2:  BNZ   23F8
23F4:  MOVF   x19,F
23F6:  BZ    2426
.................... 				channel[c].ltd_reconnect_delay_seconds--;
23F8:  MOVF   x15,W
23FA:  MULLW  19
23FC:  MOVF   FF3,W
23FE:  CLRF   x19
2400:  MOVWF  x18
2402:  MOVLW  13
2404:  ADDWF  x18,W
2406:  MOVWF  01
2408:  MOVLW  00
240A:  ADDWFC x19,W
240C:  MOVWF  03
240E:  MOVF   01,W
2410:  ADDLW  D4
2412:  MOVWF  FE9
2414:  MOVLW  00
2416:  ADDWFC 03,W
2418:  MOVWF  FEA
241A:  MOVLW  FF
241C:  ADDWF  FEF,F
241E:  BC    2424
2420:  MOVF   FEE,F
2422:  DECF   FED,F
.................... 			} else {
2424:  BRA    2442
.................... 				bit_clear(channel[c].state,CH_STATE_BIT_LTD);
2426:  MOVF   x15,W
2428:  MULLW  19
242A:  MOVF   FF3,W
242C:  CLRF   x19
242E:  MOVWF  x18
2430:  MOVLW  D4
2432:  ADDWF  x18,W
2434:  MOVWF  01
2436:  MOVLW  00
2438:  ADDWFC x19,W
243A:  MOVFF  01,FE9
243E:  MOVWF  FEA
2440:  BCF    FEF.5
.................... 			}
.................... 		} else {
2442:  BRA    24AA
.................... 			channel[c].ltd_reconnect_delay_seconds=config.ch[c].ltd_reconnect_delay;
2444:  MOVF   x15,W
2446:  MULLW  19
2448:  MOVF   FF3,W
244A:  CLRF   x19
244C:  MOVWF  x18
244E:  MOVLW  13
2450:  ADDWF  x18,W
2452:  MOVWF  01
2454:  MOVLW  00
2456:  ADDWFC x19,W
2458:  MOVWF  03
245A:  MOVF   01,W
245C:  ADDLW  D4
245E:  MOVWF  01
2460:  MOVLW  00
2462:  ADDWFC 03,F
2464:  MOVFF  01,118
2468:  MOVFF  03,119
246C:  MOVF   x15,W
246E:  MULLW  24
2470:  MOVF   FF3,W
2472:  CLRF   x1B
2474:  MOVWF  x1A
2476:  MOVLW  1A
2478:  ADDWF  x1A,W
247A:  MOVWF  01
247C:  MOVLW  00
247E:  ADDWFC x1B,W
2480:  MOVWF  03
2482:  MOVF   01,W
2484:  ADDLW  1B
2486:  MOVWF  FE9
2488:  MOVLW  00
248A:  ADDWFC 03,W
248C:  MOVWF  FEA
248E:  MOVFF  FEC,03
2492:  MOVF   FED,F
2494:  MOVFF  FEF,11A
2498:  MOVFF  119,FEA
249C:  MOVFF  118,FE9
24A0:  MOVFF  03,FEC
24A4:  MOVF   FED,F
24A6:  MOVFF  11A,FEF
.................... 		}
.................... 
.................... 		if ( adc > config.ch[c].ltd_disconnect_adc ) {
24AA:  MOVF   x15,W
24AC:  MULLW  24
24AE:  MOVF   FF3,W
24B0:  CLRF   x19
24B2:  MOVWF  x18
24B4:  MOVLW  14
24B6:  ADDWF  x18,W
24B8:  MOVWF  01
24BA:  MOVLW  00
24BC:  ADDWFC x19,W
24BE:  MOVWF  03
24C0:  MOVF   01,W
24C2:  ADDLW  1B
24C4:  MOVWF  FE9
24C6:  MOVLW  00
24C8:  ADDWFC 03,W
24CA:  MOVWF  FEA
24CC:  MOVFF  FEC,03
24D0:  MOVF   FED,F
24D2:  MOVFF  FEF,01
24D6:  MOVF   03,W
24D8:  SUBWF  x17,W
24DA:  BNC   2564
24DC:  BNZ   24E4
24DE:  MOVF   x16,W
24E0:  SUBWF  01,W
24E2:  BC    2564
.................... 			if ( channel[c].ltd_disconnect_delay_seconds > 0 ) {
24E4:  MOVF   x15,W
24E6:  MULLW  19
24E8:  MOVF   FF3,W
24EA:  CLRF   x19
24EC:  MOVWF  x18
24EE:  MOVLW  11
24F0:  ADDWF  x18,W
24F2:  MOVWF  01
24F4:  MOVLW  00
24F6:  ADDWFC x19,W
24F8:  MOVWF  03
24FA:  MOVF   01,W
24FC:  ADDLW  D4
24FE:  MOVWF  FE9
2500:  MOVLW  00
2502:  ADDWFC 03,W
2504:  MOVWF  FEA
2506:  MOVFF  FEC,119
250A:  MOVF   FED,F
250C:  MOVFF  FEF,118
2510:  MOVF   x18,F
2512:  BNZ   2518
2514:  MOVF   x19,F
2516:  BZ    2546
.................... 				channel[c].ltd_disconnect_delay_seconds--;
2518:  MOVF   x15,W
251A:  MULLW  19
251C:  MOVF   FF3,W
251E:  CLRF   x19
2520:  MOVWF  x18
2522:  MOVLW  11
2524:  ADDWF  x18,W
2526:  MOVWF  01
2528:  MOVLW  00
252A:  ADDWFC x19,W
252C:  MOVWF  03
252E:  MOVF   01,W
2530:  ADDLW  D4
2532:  MOVWF  FE9
2534:  MOVLW  00
2536:  ADDWFC 03,W
2538:  MOVWF  FEA
253A:  MOVLW  FF
253C:  ADDWF  FEF,F
253E:  BC    2544
2540:  MOVF   FEE,F
2542:  DECF   FED,F
.................... 			} else {
2544:  BRA    2562
.................... 				bit_set(channel[c].state,CH_STATE_BIT_LTD);
2546:  MOVF   x15,W
2548:  MULLW  19
254A:  MOVF   FF3,W
254C:  CLRF   x19
254E:  MOVWF  x18
2550:  MOVLW  D4
2552:  ADDWF  x18,W
2554:  MOVWF  01
2556:  MOVLW  00
2558:  ADDWFC x19,W
255A:  MOVFF  01,FE9
255E:  MOVWF  FEA
2560:  BSF    FEF.5
.................... 			}
.................... 		} else {
2562:  BRA    25CA
.................... 			channel[c].ltd_disconnect_delay_seconds=config.ch[c].ltd_disconnect_delay;
2564:  MOVF   x15,W
2566:  MULLW  19
2568:  MOVF   FF3,W
256A:  CLRF   x19
256C:  MOVWF  x18
256E:  MOVLW  11
2570:  ADDWF  x18,W
2572:  MOVWF  01
2574:  MOVLW  00
2576:  ADDWFC x19,W
2578:  MOVWF  03
257A:  MOVF   01,W
257C:  ADDLW  D4
257E:  MOVWF  01
2580:  MOVLW  00
2582:  ADDWFC 03,F
2584:  MOVFF  01,118
2588:  MOVFF  03,119
258C:  MOVF   x15,W
258E:  MULLW  24
2590:  MOVF   FF3,W
2592:  CLRF   x1B
2594:  MOVWF  x1A
2596:  MOVLW  16
2598:  ADDWF  x1A,W
259A:  MOVWF  01
259C:  MOVLW  00
259E:  ADDWFC x1B,W
25A0:  MOVWF  03
25A2:  MOVF   01,W
25A4:  ADDLW  1B
25A6:  MOVWF  FE9
25A8:  MOVLW  00
25AA:  ADDWFC 03,W
25AC:  MOVWF  FEA
25AE:  MOVFF  FEC,03
25B2:  MOVF   FED,F
25B4:  MOVFF  FEF,11A
25B8:  MOVFF  119,FEA
25BC:  MOVFF  118,FE9
25C0:  MOVFF  03,FEC
25C4:  MOVF   FED,F
25C6:  MOVFF  11A,FEF
.................... 		}
.................... 	}
25CA:  MOVLB  0
25CC:  RETURN 0
.................... 
.................... 
.................... 	/* TODO: implement High Temperature Disconnect (HTD) */
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void periodic_millisecond(void) {
.................... 	static int8 uptimeticks=0;
.................... 	static int16 adcTicks=0;
.................... 	static int16 ticks=0;
.................... 
.................... 
.................... 	timers.now_millisecond=0;
*
2616:  BCF    xCF.2
.................... 
.................... 	/* LED control */
.................... 	if ( 0==timers.led_on_a ) {
2618:  MOVF   xD0,F
261A:  BNZ   2622
.................... 		output_low(LED_A);
261C:  BCF    F94.1
261E:  BCF    F8B.1
.................... 	} else {
2620:  BRA    2628
.................... 		output_high(LED_A);
2622:  BCF    F94.1
2624:  BSF    F8B.1
.................... 		timers.led_on_a--;
2626:  DECF   xD0,F
.................... 	}
.................... 	if ( 0==timers.led_on_b ) {
2628:  MOVF   xD1,F
262A:  BNZ   2632
.................... 		output_low(LED_B);
262C:  BCF    F94.2
262E:  BCF    F8B.2
.................... 	} else {
2630:  BRA    2638
.................... 		output_high(LED_B);
2632:  BCF    F94.2
2634:  BSF    F8B.2
.................... 		timers.led_on_b--;
2636:  DECF   xD1,F
.................... 	}
.................... 
.................... 	/* some other random stuff that we don't need to do every cycle in main */
.................... 	if ( current.interval_milliseconds < 65535 ) {
2638:  INCFSZ xC8,W
263A:  BRA    2642
263C:  INCFSZ xC9,W
263E:  BRA    2642
2640:  BRA    2648
.................... 		current.interval_milliseconds++;
2642:  INCF   xC8,F
2644:  BTFSC  FD8.2
2646:  INCF   xC9,F
.................... 	}
.................... 
.................... 	/* contactor timeout */
.................... 	if ( 0 == timers.contactor_a_powersave ) {
2648:  MOVF   xD2,F
264A:  BNZ   2656
.................... 		output_low(BRIDGE_A_A);
264C:  BCF    F94.3
264E:  BCF    F8B.3
.................... 		output_low(BRIDGE_A_B);
2650:  BCF    F94.4
2652:  BCF    F8B.4
.................... 	} else {
2654:  BRA    2658
.................... 		timers.contactor_a_powersave--;
2656:  DECF   xD2,F
.................... 	}
.................... 	if ( 0 == timers.contactor_b_powersave ) {
2658:  MOVF   xD3,F
265A:  BNZ   2666
.................... 		output_low(BRIDGE_B_A);
265C:  BCF    F94.5
265E:  BCF    F8B.5
.................... 		output_low(BRIDGE_B_B);
2660:  BCF    F94.6
2662:  BCF    F8B.6
.................... 	} else {
2664:  BRA    2668
.................... 		timers.contactor_b_powersave--;
2666:  DECF   xD3,F
.................... 	}
.................... 
.................... 
.................... 
.................... 
.................... 	/* seconds */
.................... 	ticks++;
2668:  MOVLB  1
266A:  INCF   x10,F
266C:  BTFSC  FD8.2
266E:  INCF   x11,F
.................... 	if ( 1000 == ticks ) {
2670:  MOVF   x10,W
2672:  SUBLW  E8
2674:  BNZ   26C6
2676:  MOVF   x11,W
2678:  SUBLW  03
267A:  BNZ   26C6
.................... 		ticks=0;
267C:  CLRF   x11
267E:  CLRF   x10
.................... 
.................... 		/* set channe[n].state based on logic */
.................... 		contactor_logic(0);
2680:  CLRF   x15
2682:  MOVLB  0
2684:  CALL   1A6C
.................... 		contactor_logic(1);
2688:  MOVLW  01
268A:  MOVLB  1
268C:  MOVWF  x15
268E:  MOVLB  0
2690:  CALL   1A6C
.................... 
.................... 		/* set contactor outputs */
.................... 		contactor_set(0);
2694:  MOVLB  1
2696:  CLRF   x15
2698:  MOVLB  0
269A:  RCALL  25CE
.................... 		contactor_set(1);		
269C:  MOVLW  01
269E:  MOVLB  1
26A0:  MOVWF  x15
26A2:  MOVLB  0
26A4:  RCALL  25CE
.................... 
.................... 		/* uptime counter */
.................... 		uptimeTicks++;
26A6:  MOVLB  1
26A8:  INCF   x0D,F
.................... 		if ( 60 == uptimeTicks ) {
26AA:  MOVF   x0D,W
26AC:  SUBLW  3C
26AE:  BNZ   26C6
.................... 			uptimeTicks=0;
26B0:  CLRF   x0D
.................... 			if ( current.uptime_minutes < 65535 ) 
26B2:  MOVLB  0
26B4:  INCFSZ xC6,W
26B6:  BRA    26BE
26B8:  INCFSZ xC7,W
26BA:  BRA    26BE
26BC:  BRA    26C4
.................... 				current.uptime_minutes++;
26BE:  INCF   xC6,F
26C0:  BTFSC  FD8.2
26C2:  INCF   xC7,F
26C4:  MOVLB  1
.................... 		}
.................... 	}
.................... 
.................... 	/* ADC sample counter */
.................... 	if ( timers.now_adc_reset_count ) {
26C6:  MOVLB  0
26C8:  BTFSS  xCF.1
26CA:  BRA    26D6
.................... 		timers.now_adc_reset_count=0;
26CC:  BCF    xCF.1
.................... 		adcTicks=0;
26CE:  MOVLB  1
26D0:  CLRF   x0F
26D2:  CLRF   x0E
26D4:  MOVLB  0
.................... 	}
.................... 
.................... 	/* ADC sampling trigger */
.................... 	adcTicks++;
26D6:  MOVLB  1
26D8:  INCF   x0E,F
26DA:  BTFSC  FD8.2
26DC:  INCF   x0F,F
.................... 	if ( ADC_SAMPLE_TICKS == adcTicks ) {
26DE:  MOVF   x0E,W
26E0:  SUBLW  14
26E2:  BNZ   26F2
26E4:  MOVF   x0F,F
26E6:  BNZ   26F2
.................... 		adcTicks=0;
26E8:  CLRF   x0F
26EA:  CLRF   x0E
.................... 		timers.now_adc_sample=1;
26EC:  MOVLB  0
26EE:  BSF    xCF.0
26F0:  MOVLB  1
.................... 	}
26F2:  MOVLB  0
26F4:  GOTO   37E8 (RETURN)
.................... 
.................... }
.................... 
.................... void init(void) {
.................... 	int8 buff[32];
.................... 	setup_oscillator(OSC_16MHZ);
*
1534:  MOVLW  70
1536:  MOVWF  FD3
1538:  BCF    F9B.6
153A:  BCF    F9B.7
.................... 
.................... 	setup_adc(ADC_CLOCK_DIV_16);
153C:  MOVF   FC0,W
153E:  ANDLW  C0
1540:  IORLW  05
1542:  MOVWF  FC0
1544:  BSF    FC0.7
1546:  BSF    FC2.0
.................... 	/* NTC thermistor on sAN2, input voltage divider on sAN4, DIP switch analog on sAN9
.................... 	voltage spans between 0 and Vdd */
.................... 	setup_adc_ports(sAN2 | sAN4 | sAN9,VSS_VDD);
1548:  MOVLW  14
154A:  MOVWF  F7E
154C:  BCF    FC1.0
154E:  BCF    FC1.1
1550:  BCF    FC1.2
1552:  BCF    FC1.3
1554:  MOVLW  02
1556:  MOVWF  F7F
.................... 
.................... 	setup_wdt(WDT_512MS);
1558:  BSF    FD1.0
.................... 
.................... 	set_tris_a(0b00111111);
155A:  MOVLW  3F
155C:  MOVWF  F92
.................... 	set_tris_b(0b01110000);
155E:  MOVLW  70
1560:  MOVWF  F93
.................... 	set_tris_c(0b10000001);
1562:  MOVLW  81
1564:  MOVWF  F94
.................... //               76543210
.................... 
.................... 	port_a_pullups(0b00110000);
1566:  MOVLW  30
1568:  MOVWF  F77
156A:  BCF    FF1.7
.................... 	port_b_pullups(0b00000000);
156C:  CLRF   F78
.................... //                   76543210
.................... 
.................... 	/* data structure initialization */
.................... 	/* all initialized to 0 on declaration. Just do this if need non-zero */
.................... 	channel[0].command_off_seconds=65535;
156E:  SETF   xDA
1570:  SETF   xD9
.................... 	channel[1].command_off_seconds=65535;
1572:  SETF   xF3
1574:  SETF   xF2
.................... 	channel[0].command_on_seconds =65535;
1576:  SETF   xD6
1578:  SETF   xD5
.................... 	channel[1].command_on_seconds =65535;
157A:  SETF   xEF
157C:  SETF   xEE
.................... 
.................... 
.................... 	/* get our compiled date from constant */
.................... 	strcpy(buff,__DATE__);
157E:  MOVLW  01
1580:  MOVWF  FEA
1582:  MOVLW  15
1584:  MOVWF  FE9
1586:  MOVLW  00
1588:  CALL   00BA
158C:  TBLRD*-
158E:  TBLRD*+
1590:  MOVF   FF5,W
1592:  MOVWF  FEE
1594:  IORLW  00
1596:  BNZ   158E
.................... 	current.compile_day =(buff[0]-'0')*10;
1598:  MOVLW  30
159A:  MOVLB  1
159C:  SUBWF  x15,W
159E:  MULLW  0A
15A0:  MOVFF  FF3,CD
15A4:  MOVLB  0
.................... 	current.compile_day+=(buff[1]-'0');
15A6:  MOVLW  30
15A8:  MOVLB  1
15AA:  SUBWF  x16,W
15AC:  MOVLB  0
15AE:  ADDWF  xCD,F
.................... 	/* determine month ... how annoying */
.................... 	if ( 'J'==buff[3] ) {
15B0:  MOVLB  1
15B2:  MOVF   x18,W
15B4:  SUBLW  4A
15B6:  BNZ   15E2
.................... 		if ( 'A'==buff[4] )
15B8:  MOVF   x19,W
15BA:  SUBLW  41
15BC:  BNZ   15C8
.................... 			current.compile_month=1;
15BE:  MOVLW  01
15C0:  MOVLB  0
15C2:  MOVWF  xCC
15C4:  BRA    15DE
15C6:  MOVLB  1
.................... 		else if ( 'N'==buff[5] )
15C8:  MOVF   x1A,W
15CA:  SUBLW  4E
15CC:  BNZ   15D8
.................... 			current.compile_month=6;
15CE:  MOVLW  06
15D0:  MOVLB  0
15D2:  MOVWF  xCC
15D4:  BRA    15DE
15D6:  MOVLB  1
.................... 		else
.................... 			current.compile_month=7;
15D8:  MOVLW  07
15DA:  MOVLB  0
15DC:  MOVWF  xCC
.................... 	} else if ( 'A'==buff[3] ) {
15DE:  BRA    1676
15E0:  MOVLB  1
15E2:  MOVF   x18,W
15E4:  SUBLW  41
15E6:  BNZ   1602
.................... 		if ( 'P'==buff[4] )
15E8:  MOVF   x19,W
15EA:  SUBLW  50
15EC:  BNZ   15F8
.................... 			current.compile_month=4;
15EE:  MOVLW  04
15F0:  MOVLB  0
15F2:  MOVWF  xCC
15F4:  BRA    15FE
15F6:  MOVLB  1
.................... 		else
.................... 			current.compile_month=8;
15F8:  MOVLW  08
15FA:  MOVLB  0
15FC:  MOVWF  xCC
.................... 	} else if ( 'M'==buff[3] ) {
15FE:  BRA    1676
1600:  MOVLB  1
1602:  MOVF   x18,W
1604:  SUBLW  4D
1606:  BNZ   1622
.................... 		if ( 'R'==buff[5] )
1608:  MOVF   x1A,W
160A:  SUBLW  52
160C:  BNZ   1618
.................... 			current.compile_month=3;
160E:  MOVLW  03
1610:  MOVLB  0
1612:  MOVWF  xCC
1614:  BRA    161E
1616:  MOVLB  1
.................... 		else
.................... 			current.compile_month=5;
1618:  MOVLW  05
161A:  MOVLB  0
161C:  MOVWF  xCC
.................... 	} else if ( 'F'==buff[3] ) {
161E:  BRA    1676
1620:  MOVLB  1
1622:  MOVF   x18,W
1624:  SUBLW  46
1626:  BNZ   1632
.................... 		current.compile_month=2;
1628:  MOVLW  02
162A:  MOVLB  0
162C:  MOVWF  xCC
.................... 	} else if ( 'S'==buff[3] ) {
162E:  BRA    1676
1630:  MOVLB  1
1632:  MOVF   x18,W
1634:  SUBLW  53
1636:  BNZ   1642
.................... 		current.compile_month=9;
1638:  MOVLW  09
163A:  MOVLB  0
163C:  MOVWF  xCC
.................... 	} else if ( 'O'==buff[3] ) {
163E:  BRA    1676
1640:  MOVLB  1
1642:  MOVF   x18,W
1644:  SUBLW  4F
1646:  BNZ   1652
.................... 		current.compile_month=10;
1648:  MOVLW  0A
164A:  MOVLB  0
164C:  MOVWF  xCC
.................... 	} else if ( 'N'==buff[3] ) {
164E:  BRA    1676
1650:  MOVLB  1
1652:  MOVF   x18,W
1654:  SUBLW  4E
1656:  BNZ   1662
.................... 		current.compile_month=11;
1658:  MOVLW  0B
165A:  MOVLB  0
165C:  MOVWF  xCC
.................... 	} else if ( 'D'==buff[3] ) {
165E:  BRA    1676
1660:  MOVLB  1
1662:  MOVF   x18,W
1664:  SUBLW  44
1666:  BNZ   1672
.................... 		current.compile_month=12;
1668:  MOVLW  0C
166A:  MOVLB  0
166C:  MOVWF  xCC
.................... 	} else {
166E:  BRA    1676
1670:  MOVLB  1
.................... 		/* error parsing, shouldn't happen */
.................... 		current.compile_month=255;
1672:  MOVLB  0
1674:  SETF   xCC
.................... 	}
.................... 	current.compile_year =(buff[7]-'0')*10;
1676:  MOVLW  30
1678:  MOVLB  1
167A:  SUBWF  x1C,W
167C:  MULLW  0A
167E:  MOVFF  FF3,CB
1682:  MOVLB  0
.................... 	current.compile_year+=(buff[8]-'0');
1684:  MOVLW  30
1686:  MOVLB  1
1688:  SUBWF  x1D,W
168A:  MOVLB  0
168C:  ADDWF  xCB,F
.................... 
.................... 
.................... 	/* one periodic interrupt @ 1mS. Generated from system 16 MHz clock */
.................... 	/* prescale=16, match=249, postscale=1. Match is 249 because when match occurs, one cycle is lost */
.................... 	setup_timer_2(T2_DIV_BY_16,249,1);
168E:  MOVLW  00
1690:  IORLW  06
1692:  MOVWF  FCA
1694:  MOVLW  F9
1696:  MOVWF  FCB
.................... 
.................... 	enable_interrupts(INT_TIMER2);
1698:  BSF    F9D.1
.................... 
.................... 	/* set I2C slave address, which is always an even number */
.................... 	i2c_slaveaddr(STREAM_SLAVE,0x3e + (read_dip_switch()<<1) );
169A:  BRA    14C2
169C:  BCF    FD8.0
169E:  RLCF   01,W
16A0:  ADDLW  3E
16A2:  MOVLB  1
16A4:  MOVWF  FC8
16A6:  MOVLB  0
16A8:  GOTO   369E (RETURN)
.................... }
.................... 
.................... 
.................... void main(void) {
*
360C:  CLRF   FF8
360E:  BCF    FD0.7
3610:  BSF    07.7
3612:  BSF    F93.6
3614:  BSF    F93.4
3616:  CLRF   FC8
3618:  MOVLW  36
361A:  MOVWF  FC6
361C:  BSF    FC5.0
361E:  BSF    FC5.7
3620:  CLRF   1A
3622:  BSF    FB8.3
3624:  MOVLW  A0
3626:  MOVWF  FAF
3628:  MOVLW  01
362A:  MOVWF  FB0
362C:  MOVLW  A6
362E:  MOVWF  FAC
3630:  MOVLW  90
3632:  MOVWF  FAB
3634:  MOVLB  1
3636:  CLRF   x0C
3638:  CLRF   x0B
363A:  MOVLW  00
363C:  MOVWF  F7E
363E:  BCF    FC1.0
3640:  BCF    FC1.1
3642:  BCF    FC1.2
3644:  BCF    FC1.3
3646:  MOVWF  F7F
3648:  CLRF   F6C
364A:  CLRF   F6B
364C:  CLRF   F6D
364E:  BRA    365A
3650:  DATA F0,40
3652:  DATA 1B,00
3654:  DATA 05,41
3656:  DATA 0D,00
3658:  DATA 00,00
365A:  MOVLW  00
365C:  MOVWF  FF8
365E:  MOVLW  36
3660:  MOVWF  FF7
3662:  MOVLW  50
3664:  MOVWF  FF6
3666:  TBLRD*+
3668:  MOVF   FF5,W
366A:  MOVWF  00
366C:  XORLW  00
366E:  BZ    3696
3670:  TBLRD*+
3672:  MOVF   FF5,W
3674:  MOVWF  01
3676:  BTFSC  FE8.7
3678:  BRA    3684
367A:  ANDLW  3F
367C:  MOVWF  FEA
367E:  TBLRD*+
3680:  MOVFF  FF5,FE9
3684:  BTFSC  01.6
3686:  TBLRD*+
3688:  BTFSS  01.6
368A:  TBLRD*+
368C:  MOVFF  FF5,FEE
3690:  DCFSNZ 00,F
3692:  BRA    3666
3694:  BRA    3688
3696:  CLRF   FF8
.................... 	int8 i;
.................... 	int8 last_a, last_b;
.................... 
.................... 	init();
3698:  MOVLB  0
369A:  GOTO   1534
.................... 
.................... 
.................... 	/* read parameters from EEPROM and write defaults if CRC doesn't match */
.................... 	read_param_file();
369E:  GOTO   193C
.................... 
.................... 
.................... 	/* flash on startup */
.................... 	for ( i=0 ; i<5 ; i++ ) {
36A2:  MOVLB  1
36A4:  CLRF   x12
36A6:  MOVF   x12,W
36A8:  SUBLW  04
36AA:  BNC   36D2
.................... 		restart_wdt();
36AC:  CLRWDT
.................... 		output_high(LED_A);
36AE:  BCF    F94.1
36B0:  BSF    F8B.1
.................... 		delay_ms(200);
36B2:  MOVLW  C8
36B4:  MOVWF  x37
36B6:  MOVLB  0
36B8:  CALL   1498
.................... 		output_low(LED_A);
36BC:  BCF    F94.1
36BE:  BCF    F8B.1
.................... 		delay_ms(200);
36C0:  MOVLW  C8
36C2:  MOVLB  1
36C4:  MOVWF  x37
36C6:  MOVLB  0
36C8:  CALL   1498
36CC:  MOVLB  1
36CE:  INCF   x12,F
36D0:  BRA    36A6
.................... 	}
.................... 
.................... 	fprintf(STREAM_FTDI,"# dcswc_module_latching_contactor %s\r\n# ",__DATE__);
36D2:  MOVLW  EC
36D4:  MOVWF  FF6
36D6:  MOVLW  13
36D8:  MOVWF  FF7
36DA:  MOVLW  22
36DC:  MOVWF  x19
36DE:  MOVLB  0
36E0:  CALL   1982
36E4:  MOVLW  16
36E6:  MOVWF  FF6
36E8:  MOVLW  14
36EA:  MOVWF  FF7
36EC:  CALL   19AC
36F0:  MOVLW  10
36F2:  MOVWF  FF6
36F4:  MOVLW  14
36F6:  MOVWF  FF7
36F8:  MOVLW  04
36FA:  MOVLB  1
36FC:  MOVWF  x19
36FE:  MOVLB  0
3700:  CALL   1982
.................... 	switch ( restart_cause ) {
3704:  MOVLW  07
3706:  SUBWF  00,W
3708:  BZ    372E
370A:  MOVLW  0B
370C:  SUBWF  00,W
370E:  BZ    373C
3710:  MOVLW  0F
3712:  SUBWF  00,W
3714:  BZ    374A
3716:  MOVLW  0C
3718:  SUBWF  00,W
371A:  BZ    3758
371C:  MOVLW  0E
371E:  SUBWF  00,W
3720:  BZ    3766
3722:  MOVLW  03
3724:  SUBWF  00,W
3726:  BZ    3774
3728:  MOVF   00,F
372A:  BZ    3782
372C:  BRA    3790
.................... 		case WDT_TIMEOUT:       fprintf(STREAM_FTDI,"WDT TIMEOUT"); break;
372E:  MOVLW  20
3730:  MOVWF  FF6
3732:  MOVLW  14
3734:  MOVWF  FF7
3736:  CALL   19AC
373A:  BRA    379C
.................... 		case MCLR_FROM_SLEEP:   fprintf(STREAM_FTDI,"MCLR FROM SLEEP"); break;
373C:  MOVLW  2C
373E:  MOVWF  FF6
3740:  MOVLW  14
3742:  MOVWF  FF7
3744:  CALL   19AC
3748:  BRA    379C
.................... 		case MCLR_FROM_RUN:     fprintf(STREAM_FTDI,"MCLR FROM RUN"); break;
374A:  MOVLW  3C
374C:  MOVWF  FF6
374E:  MOVLW  14
3750:  MOVWF  FF7
3752:  CALL   19AC
3756:  BRA    379C
.................... 		case NORMAL_POWER_UP:   fprintf(STREAM_FTDI,"NORMAL POWER UP"); break;
3758:  MOVLW  4A
375A:  MOVWF  FF6
375C:  MOVLW  14
375E:  MOVWF  FF7
3760:  CALL   19AC
3764:  BRA    379C
.................... 		case BROWNOUT_RESTART:  fprintf(STREAM_FTDI,"BROWNOUT RESTART"); break;
3766:  MOVLW  5A
3768:  MOVWF  FF6
376A:  MOVLW  14
376C:  MOVWF  FF7
376E:  CALL   19AC
3772:  BRA    379C
.................... 		case WDT_FROM_SLEEP:    fprintf(STREAM_FTDI,"WDT FROM SLEEP"); break;
3774:  MOVLW  6C
3776:  MOVWF  FF6
3778:  MOVLW  14
377A:  MOVWF  FF7
377C:  CALL   19AC
3780:  BRA    379C
.................... 		case RESET_INSTRUCTION: fprintf(STREAM_FTDI,"RESET INSTRUCTION"); break;
3782:  MOVLW  7C
3784:  MOVWF  FF6
3786:  MOVLW  14
3788:  MOVWF  FF7
378A:  CALL   19AC
378E:  BRA    379C
.................... 		default:                fprintf(STREAM_FTDI,"UNKNOWN!");
3790:  MOVLW  8E
3792:  MOVWF  FF6
3794:  MOVLW  14
3796:  MOVWF  FF7
3798:  CALL   19AC
.................... 	}
.................... 	fprintf(STREAM_FTDI,"\r\n");
379C:  MOVLW  0D
379E:  BTFSS  F9E.4
37A0:  BRA    379E
37A2:  MOVWF  FAD
37A4:  MOVLW  0A
37A6:  BTFSS  F9E.4
37A8:  BRA    37A6
37AA:  MOVWF  FAD
.................... 
.................... 	timers.led_on_a=500;
37AC:  MOVLW  F4
37AE:  MOVWF  xD0
.................... 
.................... 	enable_interrupts(GLOBAL);
37B0:  MOVLW  C0
37B2:  IORWF  FF2,F
.................... 
.................... 	/* Prime ADC filter */
.................... 	for ( i=0 ; i<30 ; i++ ) {
37B4:  MOVLB  1
37B6:  CLRF   x12
37B8:  MOVF   x12,W
37BA:  SUBLW  1D
37BC:  BNC   37CA
.................... 		adc_update();
37BE:  MOVLB  0
37C0:  CALL   19CE
37C4:  MOVLB  1
37C6:  INCF   x12,F
37C8:  BRA    37B8
.................... 	}
.................... 
.................... 	last_a = ! input(SW_OVERRIDE_A);
37CA:  BSF    F92.5
37CC:  CLRF   x13
37CE:  BTFSS  F80.5
37D0:  INCF   x13,F
.................... 	last_b = ! input(SW_OVERRIDE_B);
37D2:  BSF    F92.4
37D4:  CLRF   x14
37D6:  BTFSS  F80.4
37D8:  INCF   x14,F
.................... 
.................... 
.................... 	/* enable I2C slave interrupt */
.................... 	enable_interrupts(INT_SSP);
37DA:  BSF    F9D.3
.................... 
.................... 	for ( ; ; ) {
.................... 		restart_wdt();
37DC:  CLRWDT
.................... 
.................... 		if ( timers.now_millisecond ) {
37DE:  MOVLB  0
37E0:  BTFSS  xCF.2
37E2:  BRA    37E8
.................... 			periodic_millisecond();
37E4:  GOTO   2616
.................... 		}
.................... 
.................... 		if ( timers.now_debug_dump ) {
37E8:  BTFSS  xCF.5
37EA:  BRA    37F2
.................... 			timers.now_debug_dump=0;
37EC:  BCF    xCF.5
.................... 
.................... 			debug_dump();
37EE:  GOTO   289C
.................... 		}
.................... 
.................... #if 1
.................... 		if ( input(SW_OVERRIDE_A) != last_a ) {
37F2:  BSF    F92.5
37F4:  MOVLW  00
37F6:  BTFSC  F80.5
37F8:  MOVLW  01
37FA:  MOVLB  1
37FC:  SUBWF  x13,W
37FE:  BZ    3820
.................... 			last_a=input(SW_OVERRIDE_A);
3800:  BSF    F92.5
3802:  CLRF   x13
3804:  BTFSC  F80.5
3806:  INCF   x13,F
.................... 
.................... 			if ( last_a ) {
3808:  MOVF   x13,F
380A:  BZ    3818
.................... 				timers.led_on_a=500;
380C:  MOVLW  F4
380E:  MOVLB  0
3810:  MOVWF  xD0
.................... 				contactor_on_a();
3812:  BRA    35AC
.................... 			} else {
3814:  BRA    381E
3816:  MOVLB  1
.................... 				timers.led_on_a=0;
3818:  MOVLB  0
381A:  CLRF   xD0
.................... 				contactor_off_a();
381C:  BRA    35C4
381E:  MOVLB  1
.................... 			}
.................... 		}
.................... 
.................... 
.................... 		if ( input(SW_OVERRIDE_B) != last_b ) {
3820:  BSF    F92.4
3822:  MOVLW  00
3824:  BTFSC  F80.4
3826:  MOVLW  01
3828:  SUBWF  x14,W
382A:  BZ    384C
.................... 			last_B=input(SW_OVERRIDE_B);
382C:  BSF    F92.4
382E:  CLRF   x14
3830:  BTFSC  F80.4
3832:  INCF   x14,F
.................... 
.................... 			if ( last_b ) {
3834:  MOVF   x14,F
3836:  BZ    3844
.................... 				timers.led_on_b=500;
3838:  MOVLW  F4
383A:  MOVLB  0
383C:  MOVWF  xD1
.................... 				contactor_on_b();
383E:  BRA    35DC
.................... 			} else {
3840:  BRA    384A
3842:  MOVLB  1
.................... 				timers.led_on_b=0;
3844:  MOVLB  0
3846:  CLRF   xD1
.................... 				contactor_off_b();
3848:  BRA    35F4
384A:  MOVLB  1
.................... 			}
.................... 		}
.................... #endif
.................... 
.................... 
.................... 		if ( timers.now_adc_sample ) {
384C:  MOVLB  0
384E:  BTFSS  xCF.0
3850:  BRA    3858
.................... 			timers.now_adc_sample=0;
3852:  BCF    xCF.0
.................... 			adc_update();
3854:  CALL   19CE
.................... 		}
.................... 
.................... 		if ( timers.now_write_config ) {
3858:  BTFSS  xCF.3
385A:  BRA    3862
.................... 			timers.now_write_config=0;
385C:  BCF    xCF.3
.................... 			write_param_file();
385E:  CALL   17CC
.................... 		}
.................... 		if ( timers.now_reset_config ) {
3862:  BTFSS  xCF.4
3864:  BRA    386C
.................... 			timers.now_reset_config=0;
3866:  BCF    xCF.4
.................... 			write_default_param_file();
3868:  CALL   1818
.................... 		}
386C:  MOVLB  1
386E:  BRA    37DC
.................... 
.................... 
.................... 	}
.................... 
.................... 
.................... }
3870:  BRA    3870

Configuration Fuses:
   Word  1: 2800   INTRC_IO NOPLLEN PCLKEN NOFCMEN NOIESO
   Word  2: 0E19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: 0000   NOHFOFST NOMCLR
   Word  4: 0009   STVREN NOLVP BBSIZ2K NOXINST DEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 40 00                                        ..@.
